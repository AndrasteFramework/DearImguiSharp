// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace DearImguiSharp
{
    public enum ImGuiNavLayer
    {
        ImGuiNavLayerMain = 0,
        ImGuiNavLayerMenu = 1,
        ImGuiNavLayerCOUNT = 2
    }

    public enum ImGuiInputSource
    {
        ImGuiInputSourceNone = 0,
        ImGuiInputSourceMouse = 1,
        ImGuiInputSourceNav = 2,
        ImGuiInputSourceNavKeyboard = 3,
        ImGuiInputSourceNavGamepad = 4,
        ImGuiInputSourceCOUNT = 5
    }

    public enum ImGuiNavForward
    {
        ImGuiNavForwardNone = 0,
        ImGuiNavForwardForwardQueued = 1,
        ImGuiNavForwardForwardActive = 2
    }

    public enum ImGuiLogType
    {
        ImGuiLogTypeNone = 0,
        ImGuiLogTypeTTY = 1,
        ImGuiLogTypeFile = 2,
        ImGuiLogTypeBuffer = 3,
        ImGuiLogTypeClipboard = 4
    }

    public enum ImGuiWindowFlags
    {
        ImGuiWindowFlagsNone = 0,
        ImGuiWindowFlagsNoTitleBar = 1,
        ImGuiWindowFlagsNoResize = 2,
        ImGuiWindowFlagsNoMove = 4,
        ImGuiWindowFlagsNoScrollbar = 8,
        ImGuiWindowFlagsNoScrollWithMouse = 16,
        ImGuiWindowFlagsNoCollapse = 32,
        ImGuiWindowFlagsAlwaysAutoResize = 64,
        ImGuiWindowFlagsNoBackground = 128,
        ImGuiWindowFlagsNoSavedSettings = 256,
        ImGuiWindowFlagsNoMouseInputs = 512,
        ImGuiWindowFlagsMenuBar = 1024,
        ImGuiWindowFlagsHorizontalScrollbar = 2048,
        ImGuiWindowFlagsNoFocusOnAppearing = 4096,
        ImGuiWindowFlagsNoBringToFrontOnFocus = 8192,
        ImGuiWindowFlagsAlwaysVerticalScrollbar = 16384,
        ImGuiWindowFlagsAlwaysHorizontalScrollbar = 32768,
        ImGuiWindowFlagsAlwaysUseWindowPadding = 65536,
        ImGuiWindowFlagsNoNavInputs = 262144,
        ImGuiWindowFlagsNoNavFocus = 524288,
        ImGuiWindowFlagsUnsavedDocument = 1048576,
        ImGuiWindowFlagsNoNav = 786432,
        ImGuiWindowFlagsNoDecoration = 43,
        ImGuiWindowFlagsNoInputs = 786944,
        ImGuiWindowFlagsNavFlattened = 8388608,
        ImGuiWindowFlagsChildWindow = 16777216,
        ImGuiWindowFlagsTooltip = 33554432,
        ImGuiWindowFlagsPopup = 67108864,
        ImGuiWindowFlagsModal = 134217728,
        ImGuiWindowFlagsChildMenu = 268435456
    }

    [Flags]
    public enum ImGuiInputTextFlags
    {
        ImGuiInputTextFlagsNone = 0,
        ImGuiInputTextFlagsCharsDecimal = 1,
        ImGuiInputTextFlagsCharsHexadecimal = 2,
        ImGuiInputTextFlagsCharsUppercase = 4,
        ImGuiInputTextFlagsCharsNoBlank = 8,
        ImGuiInputTextFlagsAutoSelectAll = 16,
        ImGuiInputTextFlagsEnterReturnsTrue = 32,
        ImGuiInputTextFlagsCallbackCompletion = 64,
        ImGuiInputTextFlagsCallbackHistory = 128,
        ImGuiInputTextFlagsCallbackAlways = 256,
        ImGuiInputTextFlagsCallbackCharFilter = 512,
        ImGuiInputTextFlagsAllowTabInput = 1024,
        ImGuiInputTextFlagsCtrlEnterForNewLine = 2048,
        ImGuiInputTextFlagsNoHorizontalScroll = 4096,
        ImGuiInputTextFlagsAlwaysInsertMode = 8192,
        ImGuiInputTextFlagsReadOnly = 16384,
        ImGuiInputTextFlagsPassword = 32768,
        ImGuiInputTextFlagsNoUndoRedo = 65536,
        ImGuiInputTextFlagsCharsScientific = 131072,
        ImGuiInputTextFlagsCallbackResize = 262144,
        ImGuiInputTextFlagsMultiline = 1048576,
        ImGuiInputTextFlagsNoMarkEdited = 2097152
    }

    public enum ImGuiTreeNodeFlags
    {
        ImGuiTreeNodeFlagsNone = 0,
        ImGuiTreeNodeFlagsSelected = 1,
        ImGuiTreeNodeFlagsFramed = 2,
        ImGuiTreeNodeFlagsAllowItemOverlap = 4,
        ImGuiTreeNodeFlagsNoTreePushOnOpen = 8,
        ImGuiTreeNodeFlagsNoAutoOpenOnLog = 16,
        ImGuiTreeNodeFlagsDefaultOpen = 32,
        ImGuiTreeNodeFlagsOpenOnDoubleClick = 64,
        ImGuiTreeNodeFlagsOpenOnArrow = 128,
        ImGuiTreeNodeFlagsLeaf = 256,
        ImGuiTreeNodeFlagsBullet = 512,
        ImGuiTreeNodeFlagsFramePadding = 1024,
        ImGuiTreeNodeFlagsSpanAvailWidth = 2048,
        ImGuiTreeNodeFlagsSpanFullWidth = 4096,
        ImGuiTreeNodeFlagsNavLeftJumpsBackHere = 8192,
        ImGuiTreeNodeFlagsCollapsingHeader = 26
    }

    [Flags]
    public enum ImGuiSelectableFlags
    {
        ImGuiSelectableFlagsNone = 0,
        ImGuiSelectableFlagsDontClosePopups = 1,
        ImGuiSelectableFlagsSpanAllColumns = 2,
        ImGuiSelectableFlagsAllowDoubleClick = 4,
        ImGuiSelectableFlagsDisabled = 8,
        ImGuiSelectableFlagsAllowItemOverlap = 16
    }

    public enum ImGuiComboFlags
    {
        ImGuiComboFlagsNone = 0,
        ImGuiComboFlagsPopupAlignLeft = 1,
        ImGuiComboFlagsHeightSmall = 2,
        ImGuiComboFlagsHeightRegular = 4,
        ImGuiComboFlagsHeightLarge = 8,
        ImGuiComboFlagsHeightLargest = 16,
        ImGuiComboFlagsNoArrowButton = 32,
        ImGuiComboFlagsNoPreview = 64,
        ImGuiComboFlagsHeightMask = 30
    }

    public enum ImGuiTabBarFlags
    {
        ImGuiTabBarFlagsNone = 0,
        ImGuiTabBarFlagsReorderable = 1,
        ImGuiTabBarFlagsAutoSelectNewTabs = 2,
        ImGuiTabBarFlagsTabListPopupButton = 4,
        ImGuiTabBarFlagsNoCloseWithMiddleMouseButton = 8,
        ImGuiTabBarFlagsNoTabListScrollingButtons = 16,
        ImGuiTabBarFlagsNoTooltip = 32,
        ImGuiTabBarFlagsFittingPolicyResizeDown = 64,
        ImGuiTabBarFlagsFittingPolicyScroll = 128,
        ImGuiTabBarFlagsFittingPolicyMask = 192,
        ImGuiTabBarFlagsFittingPolicyDefault = 64
    }

    [Flags]
    public enum ImGuiTabItemFlags
    {
        ImGuiTabItemFlagsNone = 0,
        ImGuiTabItemFlagsUnsavedDocument = 1,
        ImGuiTabItemFlagsSetSelected = 2,
        ImGuiTabItemFlagsNoCloseWithMiddleMouseButton = 4,
        ImGuiTabItemFlagsNoPushId = 8
    }

    public enum ImGuiFocusedFlags
    {
        ImGuiFocusedFlagsNone = 0,
        ImGuiFocusedFlagsChildWindows = 1,
        ImGuiFocusedFlagsRootWindow = 2,
        ImGuiFocusedFlagsAnyWindow = 4,
        ImGuiFocusedFlagsRootAndChildWindows = 3
    }

    public enum ImGuiHoveredFlags
    {
        ImGuiHoveredFlagsNone = 0,
        ImGuiHoveredFlagsChildWindows = 1,
        ImGuiHoveredFlagsRootWindow = 2,
        ImGuiHoveredFlagsAnyWindow = 4,
        ImGuiHoveredFlagsAllowWhenBlockedByPopup = 8,
        ImGuiHoveredFlagsAllowWhenBlockedByActiveItem = 32,
        ImGuiHoveredFlagsAllowWhenOverlapped = 64,
        ImGuiHoveredFlagsAllowWhenDisabled = 128,
        ImGuiHoveredFlagsRectOnly = 104,
        ImGuiHoveredFlagsRootAndChildWindows = 3
    }

    public enum ImGuiDragDropFlags
    {
        ImGuiDragDropFlagsNone = 0,
        ImGuiDragDropFlagsSourceNoPreviewTooltip = 1,
        ImGuiDragDropFlagsSourceNoDisableHover = 2,
        ImGuiDragDropFlagsSourceNoHoldToOpenOthers = 4,
        ImGuiDragDropFlagsSourceAllowNullID = 8,
        ImGuiDragDropFlagsSourceExtern = 16,
        ImGuiDragDropFlagsSourceAutoExpirePayload = 32,
        ImGuiDragDropFlagsAcceptBeforeDelivery = 1024,
        ImGuiDragDropFlagsAcceptNoDrawDefaultRect = 2048,
        ImGuiDragDropFlagsAcceptNoPreviewTooltip = 4096,
        ImGuiDragDropFlagsAcceptPeekOnly = 3072
    }

    public enum ImGuiDataType
    {
        ImGuiDataTypeS8 = 0,
        ImGuiDataTypeU8 = 1,
        ImGuiDataTypeS16 = 2,
        ImGuiDataTypeU16 = 3,
        ImGuiDataTypeS32 = 4,
        ImGuiDataTypeU32 = 5,
        ImGuiDataTypeS64 = 6,
        ImGuiDataTypeU64 = 7,
        ImGuiDataTypeFloat = 8,
        ImGuiDataTypeDouble = 9,
        ImGuiDataTypeCOUNT = 10
    }

    public enum ImGuiDir
    {
        ImGuiDirNone = -1,
        ImGuiDirLeft = 0,
        ImGuiDirRight = 1,
        ImGuiDirUp = 2,
        ImGuiDirDown = 3,
        ImGuiDirCOUNT = 4
    }

    public enum ImGuiKey
    {
        ImGuiKeyTab = 0,
        ImGuiKeyLeftArrow = 1,
        ImGuiKeyRightArrow = 2,
        ImGuiKeyUpArrow = 3,
        ImGuiKeyDownArrow = 4,
        ImGuiKeyPageUp = 5,
        ImGuiKeyPageDown = 6,
        ImGuiKeyHome = 7,
        ImGuiKeyEnd = 8,
        ImGuiKeyInsert = 9,
        ImGuiKeyDelete = 10,
        ImGuiKeyBackspace = 11,
        ImGuiKeySpace = 12,
        ImGuiKeyEnter = 13,
        ImGuiKeyEscape = 14,
        ImGuiKeyKeyPadEnter = 15,
        ImGuiKeyA = 16,
        ImGuiKeyC = 17,
        ImGuiKeyV = 18,
        ImGuiKeyX = 19,
        ImGuiKeyY = 20,
        ImGuiKeyZ = 21,
        ImGuiKeyCOUNT = 22
    }

    public enum ImGuiNavInput
    {
        ImGuiNavInputActivate = 0,
        ImGuiNavInputCancel = 1,
        ImGuiNavInputInput = 2,
        ImGuiNavInputMenu = 3,
        ImGuiNavInputDpadLeft = 4,
        ImGuiNavInputDpadRight = 5,
        ImGuiNavInputDpadUp = 6,
        ImGuiNavInputDpadDown = 7,
        ImGuiNavInputLStickLeft = 8,
        ImGuiNavInputLStickRight = 9,
        ImGuiNavInputLStickUp = 10,
        ImGuiNavInputLStickDown = 11,
        ImGuiNavInputFocusPrev = 12,
        ImGuiNavInputFocusNext = 13,
        ImGuiNavInputTweakSlow = 14,
        ImGuiNavInputTweakFast = 15,
        ImGuiNavInputKeyMenu = 16,
        ImGuiNavInputKeyLeft = 17,
        ImGuiNavInputKeyRight = 18,
        ImGuiNavInputKeyUp = 19,
        ImGuiNavInputKeyDown = 20,
        ImGuiNavInputCOUNT = 21,
        ImGuiNavInputInternalStart = 16
    }

    [Flags]
    public enum ImGuiConfigFlags
    {
        ImGuiConfigFlagsNone = 0,
        ImGuiConfigFlagsNavEnableKeyboard = 1,
        ImGuiConfigFlagsNavEnableGamepad = 2,
        ImGuiConfigFlagsNavEnableSetMousePos = 4,
        ImGuiConfigFlagsNavNoCaptureKeyboard = 8,
        ImGuiConfigFlagsNoMouse = 16,
        ImGuiConfigFlagsNoMouseCursorChange = 32,
        ImGuiConfigFlagsIsSRGB = 1048576,
        ImGuiConfigFlagsIsTouchScreen = 2097152
    }

    [Flags]
    public enum ImGuiBackendFlags
    {
        ImGuiBackendFlagsNone = 0,
        ImGuiBackendFlagsHasGamepad = 1,
        ImGuiBackendFlagsHasMouseCursors = 2,
        ImGuiBackendFlagsHasSetMousePos = 4,
        ImGuiBackendFlagsRendererHasVtxOffset = 8
    }

    public enum ImGuiCol
    {
        ImGuiColText = 0,
        ImGuiColTextDisabled = 1,
        ImGuiColWindowBg = 2,
        ImGuiColChildBg = 3,
        ImGuiColPopupBg = 4,
        ImGuiColBorder = 5,
        ImGuiColBorderShadow = 6,
        ImGuiColFrameBg = 7,
        ImGuiColFrameBgHovered = 8,
        ImGuiColFrameBgActive = 9,
        ImGuiColTitleBg = 10,
        ImGuiColTitleBgActive = 11,
        ImGuiColTitleBgCollapsed = 12,
        ImGuiColMenuBarBg = 13,
        ImGuiColScrollbarBg = 14,
        ImGuiColScrollbarGrab = 15,
        ImGuiColScrollbarGrabHovered = 16,
        ImGuiColScrollbarGrabActive = 17,
        ImGuiColCheckMark = 18,
        ImGuiColSliderGrab = 19,
        ImGuiColSliderGrabActive = 20,
        ImGuiColButton = 21,
        ImGuiColButtonHovered = 22,
        ImGuiColButtonActive = 23,
        ImGuiColHeader = 24,
        ImGuiColHeaderHovered = 25,
        ImGuiColHeaderActive = 26,
        ImGuiColSeparator = 27,
        ImGuiColSeparatorHovered = 28,
        ImGuiColSeparatorActive = 29,
        ImGuiColResizeGrip = 30,
        ImGuiColResizeGripHovered = 31,
        ImGuiColResizeGripActive = 32,
        ImGuiColTab = 33,
        ImGuiColTabHovered = 34,
        ImGuiColTabActive = 35,
        ImGuiColTabUnfocused = 36,
        ImGuiColTabUnfocusedActive = 37,
        ImGuiColPlotLines = 38,
        ImGuiColPlotLinesHovered = 39,
        ImGuiColPlotHistogram = 40,
        ImGuiColPlotHistogramHovered = 41,
        ImGuiColTextSelectedBg = 42,
        ImGuiColDragDropTarget = 43,
        ImGuiColNavHighlight = 44,
        ImGuiColNavWindowingHighlight = 45,
        ImGuiColNavWindowingDimBg = 46,
        ImGuiColModalWindowDimBg = 47,
        ImGuiColCOUNT = 48
    }

    public enum ImGuiStyleVar
    {
        ImGuiStyleVarAlpha = 0,
        ImGuiStyleVarWindowPadding = 1,
        ImGuiStyleVarWindowRounding = 2,
        ImGuiStyleVarWindowBorderSize = 3,
        ImGuiStyleVarWindowMinSize = 4,
        ImGuiStyleVarWindowTitleAlign = 5,
        ImGuiStyleVarChildRounding = 6,
        ImGuiStyleVarChildBorderSize = 7,
        ImGuiStyleVarPopupRounding = 8,
        ImGuiStyleVarPopupBorderSize = 9,
        ImGuiStyleVarFramePadding = 10,
        ImGuiStyleVarFrameRounding = 11,
        ImGuiStyleVarFrameBorderSize = 12,
        ImGuiStyleVarItemSpacing = 13,
        ImGuiStyleVarItemInnerSpacing = 14,
        ImGuiStyleVarIndentSpacing = 15,
        ImGuiStyleVarScrollbarSize = 16,
        ImGuiStyleVarScrollbarRounding = 17,
        ImGuiStyleVarGrabMinSize = 18,
        ImGuiStyleVarGrabRounding = 19,
        ImGuiStyleVarTabRounding = 20,
        ImGuiStyleVarButtonTextAlign = 21,
        ImGuiStyleVarSelectableTextAlign = 22,
        ImGuiStyleVarCOUNT = 23
    }

    public enum ImGuiColorEditFlags
    {
        ImGuiColorEditFlagsNone = 0,
        ImGuiColorEditFlagsNoAlpha = 2,
        ImGuiColorEditFlagsNoPicker = 4,
        ImGuiColorEditFlagsNoOptions = 8,
        ImGuiColorEditFlagsNoSmallPreview = 16,
        ImGuiColorEditFlagsNoInputs = 32,
        ImGuiColorEditFlagsNoTooltip = 64,
        ImGuiColorEditFlagsNoLabel = 128,
        ImGuiColorEditFlagsNoSidePreview = 256,
        ImGuiColorEditFlagsNoDragDrop = 512,
        ImGuiColorEditFlagsAlphaBar = 65536,
        ImGuiColorEditFlagsAlphaPreview = 131072,
        ImGuiColorEditFlagsAlphaPreviewHalf = 262144,
        ImGuiColorEditFlagsHDR = 524288,
        ImGuiColorEditFlagsDisplayRGB = 1048576,
        ImGuiColorEditFlagsDisplayHSV = 2097152,
        ImGuiColorEditFlagsDisplayHex = 4194304,
        ImGuiColorEditFlagsUint8 = 8388608,
        ImGuiColorEditFlagsFloat = 16777216,
        ImGuiColorEditFlagsPickerHueBar = 33554432,
        ImGuiColorEditFlagsPickerHueWheel = 67108864,
        ImGuiColorEditFlagsInputRGB = 134217728,
        ImGuiColorEditFlagsInputHSV = 268435456,
        ImGuiColorEditFlagsOptionsDefault = 177209344,
        ImGuiColorEditFlagsDisplayMask = 7340032,
        ImGuiColorEditFlagsDataTypeMask = 25165824,
        ImGuiColorEditFlagsPickerMask = 100663296,
        ImGuiColorEditFlagsInputMask = 402653184
    }

    public enum ImGuiMouseButton
    {
        ImGuiMouseButtonLeft = 0,
        ImGuiMouseButtonRight = 1,
        ImGuiMouseButtonMiddle = 2,
        ImGuiMouseButtonCOUNT = 5
    }

    public enum ImGuiMouseCursor
    {
        ImGuiMouseCursorNone = -1,
        ImGuiMouseCursorArrow = 0,
        ImGuiMouseCursorTextInput = 1,
        ImGuiMouseCursorResizeAll = 2,
        ImGuiMouseCursorResizeNS = 3,
        ImGuiMouseCursorResizeEW = 4,
        ImGuiMouseCursorResizeNESW = 5,
        ImGuiMouseCursorResizeNWSE = 6,
        ImGuiMouseCursorHand = 7,
        ImGuiMouseCursorNotAllowed = 8,
        ImGuiMouseCursorCOUNT = 9
    }

    [Flags]
    public enum ImGuiCond
    {
        ImGuiCondAlways = 1,
        ImGuiCondOnce = 2,
        ImGuiCondFirstUseEver = 4,
        ImGuiCondAppearing = 8
    }

    public enum ImDrawCornerFlags
    {
        ImDrawCornerFlagsNone = 0,
        ImDrawCornerFlagsTopLeft = 1,
        ImDrawCornerFlagsTopRight = 2,
        ImDrawCornerFlagsBotLeft = 4,
        ImDrawCornerFlagsBotRight = 8,
        ImDrawCornerFlagsTop = 3,
        ImDrawCornerFlagsBot = 12,
        ImDrawCornerFlagsLeft = 5,
        ImDrawCornerFlagsRight = 10,
        ImDrawCornerFlagsAll = 15
    }

    [Flags]
    public enum ImDrawListFlags
    {
        ImDrawListFlagsNone = 0,
        ImDrawListFlagsAntiAliasedLines = 1,
        ImDrawListFlagsAntiAliasedFill = 2,
        ImDrawListFlagsAllowVtxOffset = 4
    }

    public enum ImFontAtlasFlags
    {
        ImFontAtlasFlagsNone = 0,
        ImFontAtlasFlagsNoPowerOfTwoHeight = 1,
        ImFontAtlasFlagsNoMouseCursors = 2
    }

    public enum ImGuiButtonFlags
    {
        ImGuiButtonFlagsNone = 0,
        ImGuiButtonFlagsRepeat = 1,
        ImGuiButtonFlagsPressedOnClick = 2,
        ImGuiButtonFlagsPressedOnClickRelease = 4,
        ImGuiButtonFlagsPressedOnClickReleaseAnywhere = 8,
        ImGuiButtonFlagsPressedOnRelease = 16,
        ImGuiButtonFlagsPressedOnDoubleClick = 32,
        ImGuiButtonFlagsPressedOnDragDropHold = 64,
        ImGuiButtonFlagsFlattenChildren = 128,
        ImGuiButtonFlagsAllowItemOverlap = 256,
        ImGuiButtonFlagsDontClosePopups = 512,
        ImGuiButtonFlagsDisabled = 1024,
        ImGuiButtonFlagsAlignTextBaseLine = 2048,
        ImGuiButtonFlagsNoKeyModifiers = 4096,
        ImGuiButtonFlagsNoHoldingActiveId = 8192,
        ImGuiButtonFlagsNoNavFocus = 16384,
        ImGuiButtonFlagsNoHoveredOnNav = 32768,
        ImGuiButtonFlagsMouseButtonLeft = 65536,
        ImGuiButtonFlagsMouseButtonRight = 131072,
        ImGuiButtonFlagsMouseButtonMiddle = 262144,
        ImGuiButtonFlagsMouseButtonMask = 458752,
        ImGuiButtonFlagsMouseButtonShift = 16,
        ImGuiButtonFlagsMouseButtonDefault = 65536,
        ImGuiButtonFlagsPressedOnMask = 126,
        ImGuiButtonFlagsPressedOnDefault = 4
    }

    public enum ImGuiSliderFlags
    {
        ImGuiSliderFlagsNone = 0,
        ImGuiSliderFlagsVertical = 1
    }

    public enum ImGuiDragFlags
    {
        ImGuiDragFlagsNone = 0,
        ImGuiDragFlagsVertical = 1
    }

    [Flags]
    public enum ImGuiColumnsFlags
    {
        ImGuiColumnsFlagsNone = 0,
        ImGuiColumnsFlagsNoBorder = 1,
        ImGuiColumnsFlagsNoResize = 2,
        ImGuiColumnsFlagsNoPreserveWidths = 4,
        ImGuiColumnsFlagsNoForceWithinWindow = 8,
        ImGuiColumnsFlagsGrowParentContentsSize = 16
    }

    [Flags]
    public enum ImGuiSelectableFlagsPrivate
    {
        ImGuiSelectableFlagsNoHoldingActiveID = 1048576,
        ImGuiSelectableFlagsPressedOnClick = 2097152,
        ImGuiSelectableFlagsPressedOnRelease = 4194304,
        ImGuiSelectableFlagsDrawFillAvailWidth = 8388608,
        ImGuiSelectableFlagsDrawHoveredWhenHeld = 16777216,
        ImGuiSelectableFlagsSetNavIdOnHover = 33554432
    }

    [Flags]
    public enum ImGuiTreeNodeFlagsPrivate
    {
        ImGuiTreeNodeFlagsClipLabelForTrailingButton = 1048576
    }

    [Flags]
    public enum ImGuiSeparatorFlags
    {
        ImGuiSeparatorFlagsNone = 0,
        ImGuiSeparatorFlagsHorizontal = 1,
        ImGuiSeparatorFlagsVertical = 2,
        ImGuiSeparatorFlagsSpanAllColumns = 4
    }

    [Flags]
    public enum ImGuiItemFlags
    {
        ImGuiItemFlagsNone = 0,
        ImGuiItemFlagsNoTabStop = 1,
        ImGuiItemFlagsButtonRepeat = 2,
        ImGuiItemFlagsDisabled = 4,
        ImGuiItemFlagsNoNav = 8,
        ImGuiItemFlagsNoNavDefaultFocus = 16,
        ImGuiItemFlagsSelectableDontClosePopup = 32,
        ImGuiItemFlagsMixedValue = 64,
        ImGuiItemFlagsDefault = 0
    }

    [Flags]
    public enum ImGuiItemStatusFlags
    {
        ImGuiItemStatusFlagsNone = 0,
        ImGuiItemStatusFlagsHoveredRect = 1,
        ImGuiItemStatusFlagsHasDisplayRect = 2,
        ImGuiItemStatusFlagsEdited = 4,
        ImGuiItemStatusFlagsToggledSelection = 8,
        ImGuiItemStatusFlagsToggledOpen = 16,
        ImGuiItemStatusFlagsHasDeactivated = 32,
        ImGuiItemStatusFlagsDeactivated = 64
    }

    public enum ImGuiTextFlags
    {
        ImGuiTextFlagsNone = 0,
        ImGuiTextFlagsNoWidthForLargeClippedText = 1
    }

    public enum ImGuiTooltipFlags
    {
        ImGuiTooltipFlagsNone = 0,
        ImGuiTooltipFlagsOverridePreviousTooltip = 1
    }

    public enum ImGuiLayoutType
    {
        ImGuiLayoutTypeHorizontal = 0,
        ImGuiLayoutTypeVertical = 1
    }

    public enum ImGuiAxis
    {
        ImGuiAxisNone = -1,
        ImGuiAxisX = 0,
        ImGuiAxisY = 1
    }

    public enum ImGuiPlotType
    {
        ImGuiPlotTypeLines = 0,
        ImGuiPlotTypeHistogram = 1
    }

    public enum ImGuiInputReadMode
    {
        ImGuiInputReadModeDown = 0,
        ImGuiInputReadModePressed = 1,
        ImGuiInputReadModeReleased = 2,
        ImGuiInputReadModeRepeat = 3,
        ImGuiInputReadModeRepeatSlow = 4,
        ImGuiInputReadModeRepeatFast = 5
    }

    [Flags]
    public enum ImGuiNavHighlightFlags
    {
        ImGuiNavHighlightFlagsNone = 0,
        ImGuiNavHighlightFlagsTypeDefault = 1,
        ImGuiNavHighlightFlagsTypeThin = 2,
        ImGuiNavHighlightFlagsAlwaysDraw = 4,
        ImGuiNavHighlightFlagsNoRounding = 8
    }

    [Flags]
    public enum ImGuiNavDirSourceFlags
    {
        ImGuiNavDirSourceFlagsNone = 0,
        ImGuiNavDirSourceFlagsKeyboard = 1,
        ImGuiNavDirSourceFlagsPadDPad = 2,
        ImGuiNavDirSourceFlagsPadLStick = 4
    }

    [Flags]
    public enum ImGuiNavMoveFlags
    {
        ImGuiNavMoveFlagsNone = 0,
        ImGuiNavMoveFlagsLoopX = 1,
        ImGuiNavMoveFlagsLoopY = 2,
        ImGuiNavMoveFlagsWrapX = 4,
        ImGuiNavMoveFlagsWrapY = 8,
        ImGuiNavMoveFlagsAllowCurrentNavId = 16,
        ImGuiNavMoveFlagsAlsoScoreVisibleSet = 32,
        ImGuiNavMoveFlagsScrollToEdge = 64
    }

    public enum ImGuiPopupPositionPolicy
    {
        ImGuiPopupPositionPolicyDefault = 0,
        ImGuiPopupPositionPolicyComboBox = 1
    }

    [Flags]
    public enum ImGuiNextWindowDataFlags
    {
        ImGuiNextWindowDataFlagsNone = 0,
        ImGuiNextWindowDataFlagsHasPos = 1,
        ImGuiNextWindowDataFlagsHasSize = 2,
        ImGuiNextWindowDataFlagsHasContentSize = 4,
        ImGuiNextWindowDataFlagsHasCollapsed = 8,
        ImGuiNextWindowDataFlagsHasSizeConstraint = 16,
        ImGuiNextWindowDataFlagsHasFocus = 32,
        ImGuiNextWindowDataFlagsHasBgAlpha = 64
    }

    public enum ImGuiNextItemDataFlags
    {
        ImGuiNextItemDataFlagsNone = 0,
        ImGuiNextItemDataFlagsHasWidth = 1,
        ImGuiNextItemDataFlagsHasOpen = 2
    }

    [Flags]
    public enum ImGuiTabBarFlagsPrivate
    {
        ImGuiTabBarFlagsDockNode = 1048576,
        ImGuiTabBarFlagsIsFocused = 2097152,
        ImGuiTabBarFlagsSaveSettings = 4194304
    }

    [Flags]
    public enum ImGuiTabItemFlagsPrivate
    {
        ImGuiTabItemFlagsNoCloseButton = 1048576
    }

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ImDrawCallback(global::System.IntPtr parent_list, global::System.IntPtr cmd);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate void ImGuiSizeCallback(global::System.IntPtr data);

    [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
    public unsafe delegate int ImGuiInputTextCallback(global::System.IntPtr data);

    public unsafe partial class ImVector : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVector __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVector __CreateInstance(global::DearImguiSharp.ImVector.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVector.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector.__Internal));
            *(global::DearImguiSharp.ImVector.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVector(global::DearImguiSharp.ImVector.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVector(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVector()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVector(global::DearImguiSharp.ImVector _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVector.__Internal*) __Instance) = *((global::DearImguiSharp.ImVector.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVector __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVector.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVector.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVector.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVector.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::System.IntPtr Data
        {
            get
            {
                return ((global::DearImguiSharp.ImVector.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVector.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVector_float : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_float@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector_float> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector_float>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVector_float __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector_float(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVector_float __CreateInstance(global::DearImguiSharp.ImVector_float.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector_float(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVector_float.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_float.__Internal));
            *(global::DearImguiSharp.ImVector_float.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVector_float(global::DearImguiSharp.ImVector_float.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVector_float(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVector_float()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_float.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVector_float(global::DearImguiSharp.ImVector_float _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_float.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVector_float.__Internal*) __Instance) = *((global::DearImguiSharp.ImVector_float.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVector_float __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVector_float.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_float.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVector_float.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_float.__Internal*)__Instance)->Capacity = value;
            }
        }

        public float* Data
        {
            get
            {
                return (float*) ((global::DearImguiSharp.ImVector_float.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_float.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVectorImWchar : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImWchar@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImWchar> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImWchar>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImWchar __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImWchar(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImWchar __CreateInstance(global::DearImguiSharp.ImVectorImWchar.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImWchar(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImWchar.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImWchar.__Internal));
            *(global::DearImguiSharp.ImVectorImWchar.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImWchar(global::DearImguiSharp.ImVectorImWchar.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImWchar(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImWchar()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImWchar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImWchar(global::DearImguiSharp.ImVectorImWchar _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImWchar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImWchar.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImWchar.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImWchar __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImWchar.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImWchar.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImWchar.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImWchar.__Internal*)__Instance)->Capacity = value;
            }
        }

        public ushort* Data
        {
            get
            {
                return (ushort*) ((global::DearImguiSharp.ImVectorImWchar.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImWchar.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVectorImDrawVert : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImDrawVert@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawVert> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawVert>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImDrawVert __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawVert(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImDrawVert __CreateInstance(global::DearImguiSharp.ImVectorImDrawVert.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawVert(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImDrawVert.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawVert.__Internal));
            *(global::DearImguiSharp.ImVectorImDrawVert.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImDrawVert(global::DearImguiSharp.ImVectorImDrawVert.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImDrawVert(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImDrawVert()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawVert.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImDrawVert(global::DearImguiSharp.ImVectorImDrawVert _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawVert.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImDrawVert.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImDrawVert.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImDrawVert __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawVert.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawVert.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawVert.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawVert.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImDrawVert Data
        {
            get
            {
                global::DearImguiSharp.ImDrawVert __result0;
                if (((global::DearImguiSharp.ImVectorImDrawVert.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImDrawVert.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImDrawVert.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImDrawVert) global::DearImguiSharp.ImDrawVert.NativeToManagedMap[((global::DearImguiSharp.ImVectorImDrawVert.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImDrawVert.__CreateInstance(((global::DearImguiSharp.ImVectorImDrawVert.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawVert.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiSettingsHandler : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiSettingsHandler@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiSettingsHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiSettingsHandler>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiSettingsHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiSettingsHandler(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiSettingsHandler __CreateInstance(global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiSettingsHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiSettingsHandler(global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiSettingsHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiSettingsHandler()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiSettingsHandler(global::DearImguiSharp.ImVectorImGuiSettingsHandler _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiSettingsHandler __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiSettingsHandler Data
        {
            get
            {
                global::DearImguiSharp.ImGuiSettingsHandler __result0;
                if (((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiSettingsHandler.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiSettingsHandler) global::DearImguiSharp.ImGuiSettingsHandler.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiSettingsHandler.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImVec4 : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImVec4@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImVec4> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImVec4>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImVec4 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImVec4(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImVec4 __CreateInstance(global::DearImguiSharp.ImVectorImVec4.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImVec4(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImVec4.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImVec4.__Internal));
            *(global::DearImguiSharp.ImVectorImVec4.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImVec4(global::DearImguiSharp.ImVectorImVec4.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImVec4(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImVec4()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImVec4.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImVec4(global::DearImguiSharp.ImVectorImVec4 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImVec4.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImVec4.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImVec4.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImVec4 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImVec4.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImVec4.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImVec4.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImVec4.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImVec4 Data
        {
            get
            {
                global::DearImguiSharp.ImVec4 __result0;
                if (((global::DearImguiSharp.ImVectorImVec4.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImVec4.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImVec4.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImVec4) global::DearImguiSharp.ImVec4.NativeToManagedMap[((global::DearImguiSharp.ImVectorImVec4.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImVec4.__CreateInstance(((global::DearImguiSharp.ImVectorImVec4.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImVec4.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiGroupData : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiGroupData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiGroupData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiGroupData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiGroupData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiGroupData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiGroupData __CreateInstance(global::DearImguiSharp.ImVectorImGuiGroupData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiGroupData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiGroupData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiGroupData.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiGroupData(global::DearImguiSharp.ImVectorImGuiGroupData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiGroupData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiGroupData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiGroupData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiGroupData(global::DearImguiSharp.ImVectorImGuiGroupData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiGroupData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiGroupData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiGroupData Data
        {
            get
            {
                global::DearImguiSharp.ImGuiGroupData __result0;
                if (((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiGroupData.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiGroupData) global::DearImguiSharp.ImGuiGroupData.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiGroupData.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiID : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiID@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiID> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiID>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiID __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiID(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiID __CreateInstance(global::DearImguiSharp.ImVectorImGuiID.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiID(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiID.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiID.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiID.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiID(global::DearImguiSharp.ImVectorImGuiID.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiID(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiID()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiID(global::DearImguiSharp.ImVectorImGuiID _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiID.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiID.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiID __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiID.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiID.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiID.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiID.__Internal*)__Instance)->Capacity = value;
            }
        }

        public uint* Data
        {
            get
            {
                return (uint*) ((global::DearImguiSharp.ImVectorImGuiID.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiID.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVectorImGuiWindowPtr : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiWindowPtr@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiWindowPtr> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiWindowPtr>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiWindowPtr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiWindowPtr(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiWindowPtr __CreateInstance(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiWindowPtr(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiWindowPtr(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiWindowPtr(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiWindowPtr()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiWindowPtr(global::DearImguiSharp.ImVectorImGuiWindowPtr _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiWindowPtr __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiWindow Data
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*)__Instance)->Data = new global::System.IntPtr(&__value);
            }
        }
    }

    public unsafe partial class ImVectorImGuiColumnData : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiColumnData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiColumnData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiColumnData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiColumnData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiColumnData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiColumnData __CreateInstance(global::DearImguiSharp.ImVectorImGuiColumnData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiColumnData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiColumnData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiColumnData.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiColumnData(global::DearImguiSharp.ImVectorImGuiColumnData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiColumnData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiColumnData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiColumnData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiColumnData(global::DearImguiSharp.ImVectorImGuiColumnData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiColumnData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiColumnData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiColumnData Data
        {
            get
            {
                global::DearImguiSharp.ImGuiColumnData __result0;
                if (((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiColumnData.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiColumnData) global::DearImguiSharp.ImGuiColumnData.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiColumnData.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiColorMod : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiColorMod@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiColorMod> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiColorMod>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiColorMod __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiColorMod(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiColorMod __CreateInstance(global::DearImguiSharp.ImVectorImGuiColorMod.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiColorMod(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiColorMod.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiColorMod.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiColorMod(global::DearImguiSharp.ImVectorImGuiColorMod.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiColorMod(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiColorMod()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiColorMod.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiColorMod(global::DearImguiSharp.ImVectorImGuiColorMod _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiColorMod.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiColorMod __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiColorMod Data
        {
            get
            {
                global::DearImguiSharp.ImGuiColorMod __result0;
                if (((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiColorMod.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiColorMod) global::DearImguiSharp.ImGuiColorMod.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiColorMod.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImVec2 : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImVec2@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImVec2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImVec2>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImVec2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImVec2(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImVec2 __CreateInstance(global::DearImguiSharp.ImVectorImVec2.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImVec2(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImVec2.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImVec2.__Internal));
            *(global::DearImguiSharp.ImVectorImVec2.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImVec2(global::DearImguiSharp.ImVectorImVec2.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImVec2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImVec2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImVec2.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImVec2(global::DearImguiSharp.ImVectorImVec2 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImVec2.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImVec2.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImVec2.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImVec2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImVec2.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImVec2.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImVec2.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImVec2.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImVec2 Data
        {
            get
            {
                global::DearImguiSharp.ImVec2 __result0;
                if (((global::DearImguiSharp.ImVectorImVec2.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImVec2.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImVec2.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImVec2) global::DearImguiSharp.ImVec2.NativeToManagedMap[((global::DearImguiSharp.ImVectorImVec2.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImVec2.__CreateInstance(((global::DearImguiSharp.ImVectorImVec2.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImVec2.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImFontGlyph : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImFontGlyph@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImFontGlyph> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImFontGlyph>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImFontGlyph __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImFontGlyph(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImFontGlyph __CreateInstance(global::DearImguiSharp.ImVectorImFontGlyph.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImFontGlyph(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImFontGlyph.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontGlyph.__Internal));
            *(global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImFontGlyph(global::DearImguiSharp.ImVectorImFontGlyph.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImFontGlyph(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImFontGlyph()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontGlyph.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImFontGlyph(global::DearImguiSharp.ImVectorImFontGlyph _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontGlyph.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImFontGlyph __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImFontGlyph Data
        {
            get
            {
                global::DearImguiSharp.ImFontGlyph __result0;
                if (((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFontGlyph.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImFontGlyph) global::DearImguiSharp.ImFontGlyph.NativeToManagedMap[((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImFontGlyph.__CreateInstance(((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontGlyph.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiTextRange : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiTextRange@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiTextRange> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiTextRange>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiTextRange __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiTextRange(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiTextRange __CreateInstance(global::DearImguiSharp.ImVectorImGuiTextRange.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiTextRange(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiTextRange.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiTextRange.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiTextRange(global::DearImguiSharp.ImVectorImGuiTextRange.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiTextRange(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiTextRange()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiTextRange.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiTextRange(global::DearImguiSharp.ImVectorImGuiTextRange _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiTextRange.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiTextRange __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiTextRange Data
        {
            get
            {
                global::DearImguiSharp.ImGuiTextRange __result0;
                if (((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiTextRange.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiTextRange) global::DearImguiSharp.ImGuiTextRange.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiTextRange.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiStoragePair : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiStoragePair@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiStoragePair> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiStoragePair>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiStoragePair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiStoragePair(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiStoragePair __CreateInstance(global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiStoragePair(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiStoragePair(global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiStoragePair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiStoragePair()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiStoragePair(global::DearImguiSharp.ImVectorImGuiStoragePair _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiStoragePair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiStoragePair Data
        {
            get
            {
                global::DearImguiSharp.ImGuiStoragePair __result0;
                if (((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiStoragePair.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiStoragePair) global::DearImguiSharp.ImGuiStoragePair.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiStoragePair.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiStyleMod : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiStyleMod@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiStyleMod> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiStyleMod>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiStyleMod __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiStyleMod(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiStyleMod __CreateInstance(global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiStyleMod(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiStyleMod(global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiStyleMod(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiStyleMod()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiStyleMod(global::DearImguiSharp.ImVectorImGuiStyleMod _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiStyleMod __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiStyleMod Data
        {
            get
            {
                global::DearImguiSharp.ImGuiStyleMod __result0;
                if (((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiStyleMod.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiStyleMod) global::DearImguiSharp.ImGuiStyleMod.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiStyleMod.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImDrawChannel : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImDrawChannel@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawChannel> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawChannel>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImDrawChannel __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawChannel(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImDrawChannel __CreateInstance(global::DearImguiSharp.ImVectorImDrawChannel.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawChannel(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImDrawChannel.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawChannel.__Internal));
            *(global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImDrawChannel(global::DearImguiSharp.ImVectorImDrawChannel.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImDrawChannel(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImDrawChannel()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawChannel.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImDrawChannel(global::DearImguiSharp.ImVectorImDrawChannel _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawChannel.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImDrawChannel __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImDrawChannel Data
        {
            get
            {
                global::DearImguiSharp.ImDrawChannel __result0;
                if (((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImDrawChannel.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImDrawChannel) global::DearImguiSharp.ImDrawChannel.NativeToManagedMap[((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImDrawChannel.__CreateInstance(((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawChannel.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImDrawListPtr : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImDrawListPtr@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawListPtr> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawListPtr>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImDrawListPtr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawListPtr(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImDrawListPtr __CreateInstance(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawListPtr(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal));
            *(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImDrawListPtr(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImDrawListPtr(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImDrawListPtr()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImDrawListPtr(global::DearImguiSharp.ImVectorImDrawListPtr _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImDrawListPtr __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImDrawList Data
        {
            get
            {
                global::DearImguiSharp.ImDrawList __result0;
                if (((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImDrawList.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImDrawList) global::DearImguiSharp.ImDrawList.NativeToManagedMap[((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImDrawList.__CreateInstance(((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*)__Instance)->Data = new global::System.IntPtr(&__value);
            }
        }
    }

    public unsafe partial class ImVectorImU32 : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImU32@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImU32> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImU32>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImU32 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImU32(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImU32 __CreateInstance(global::DearImguiSharp.ImVectorImU32.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImU32(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImU32.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImU32.__Internal));
            *(global::DearImguiSharp.ImVectorImU32.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImU32(global::DearImguiSharp.ImVectorImU32.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImU32(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImU32()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImU32.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImU32(global::DearImguiSharp.ImVectorImU32 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImU32.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImU32.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImU32.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImU32 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImU32.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImU32.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImU32.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImU32.__Internal*)__Instance)->Capacity = value;
            }
        }

        public uint* Data
        {
            get
            {
                return (uint*) ((global::DearImguiSharp.ImVectorImU32.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImU32.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVectorImGuiItemFlags : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiItemFlags@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiItemFlags> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiItemFlags>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiItemFlags __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiItemFlags(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiItemFlags __CreateInstance(global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiItemFlags(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiItemFlags(global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiItemFlags(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiItemFlags()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiItemFlags(global::DearImguiSharp.ImVectorImGuiItemFlags _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiItemFlags __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*)__Instance)->Capacity = value;
            }
        }

        public int* Data
        {
            get
            {
                return (int*) ((global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVectorImFontAtlasCustomRect : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImFontAtlasCustomRect@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImFontAtlasCustomRect> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImFontAtlasCustomRect>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImFontAtlasCustomRect __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImFontAtlasCustomRect(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImFontAtlasCustomRect __CreateInstance(global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImFontAtlasCustomRect(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal));
            *(global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImFontAtlasCustomRect(global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImFontAtlasCustomRect(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImFontAtlasCustomRect()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImFontAtlasCustomRect(global::DearImguiSharp.ImVectorImFontAtlasCustomRect _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImFontAtlasCustomRect __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImFontAtlasCustomRect Data
        {
            get
            {
                global::DearImguiSharp.ImFontAtlasCustomRect __result0;
                if (((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFontAtlasCustomRect.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImFontAtlasCustomRect) global::DearImguiSharp.ImFontAtlasCustomRect.NativeToManagedMap[((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImFontAtlasCustomRect.__CreateInstance(((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiTabItem : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiTabItem@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiTabItem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiTabItem>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiTabItem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiTabItem(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiTabItem __CreateInstance(global::DearImguiSharp.ImVectorImGuiTabItem.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiTabItem(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiTabItem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiTabItem.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiTabItem(global::DearImguiSharp.ImVectorImGuiTabItem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiTabItem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiTabItem()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiTabItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiTabItem(global::DearImguiSharp.ImVectorImGuiTabItem _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiTabItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiTabItem __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiTabItem Data
        {
            get
            {
                global::DearImguiSharp.ImGuiTabItem __result0;
                if (((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiTabItem.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiTabItem) global::DearImguiSharp.ImGuiTabItem.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiTabItem.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiColumns : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiColumns@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiColumns> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiColumns>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiColumns __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiColumns(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiColumns __CreateInstance(global::DearImguiSharp.ImVectorImGuiColumns.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiColumns(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiColumns.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiColumns.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiColumns(global::DearImguiSharp.ImVectorImGuiColumns.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiColumns(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiColumns()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiColumns.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiColumns(global::DearImguiSharp.ImVectorImGuiColumns _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiColumns.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiColumns __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiColumns Data
        {
            get
            {
                global::DearImguiSharp.ImGuiColumns __result0;
                if (((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiColumns.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiColumns) global::DearImguiSharp.ImGuiColumns.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiColumns.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiColumns.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiShrinkWidthItem : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiShrinkWidthItem@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiShrinkWidthItem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiShrinkWidthItem>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiShrinkWidthItem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiShrinkWidthItem(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiShrinkWidthItem __CreateInstance(global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiShrinkWidthItem(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiShrinkWidthItem(global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiShrinkWidthItem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiShrinkWidthItem()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiShrinkWidthItem(global::DearImguiSharp.ImVectorImGuiShrinkWidthItem _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiShrinkWidthItem __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiShrinkWidthItem Data
        {
            get
            {
                global::DearImguiSharp.ImGuiShrinkWidthItem __result0;
                if (((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiShrinkWidthItem.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiShrinkWidthItem) global::DearImguiSharp.ImGuiShrinkWidthItem.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiShrinkWidthItem.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVector_char : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_char@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector_char> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector_char>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVector_char __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector_char(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVector_char __CreateInstance(global::DearImguiSharp.ImVector_char.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector_char(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVector_char.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_char.__Internal));
            *(global::DearImguiSharp.ImVector_char.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVector_char(global::DearImguiSharp.ImVector_char.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVector_char(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVector_char()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_char.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVector_char(global::DearImguiSharp.ImVector_char _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_char.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVector_char.__Internal*) __Instance) = *((global::DearImguiSharp.ImVector_char.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVector_char __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVector_char.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_char.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVector_char.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_char.__Internal*)__Instance)->Capacity = value;
            }
        }

        public sbyte* Data
        {
            get
            {
                return (sbyte*) ((global::DearImguiSharp.ImVector_char.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_char.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVectorImTextureID : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImTextureID@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImTextureID> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImTextureID>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImTextureID __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImTextureID(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImTextureID __CreateInstance(global::DearImguiSharp.ImVectorImTextureID.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImTextureID(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImTextureID.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImTextureID.__Internal));
            *(global::DearImguiSharp.ImVectorImTextureID.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImTextureID(global::DearImguiSharp.ImVectorImTextureID.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImTextureID(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImTextureID()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImTextureID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImTextureID(global::DearImguiSharp.ImVectorImTextureID _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImTextureID.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImTextureID.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImTextureID.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImTextureID __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImTextureID.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImTextureID.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImTextureID.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImTextureID.__Internal*)__Instance)->Capacity = value;
            }
        }
    }

    public unsafe partial class ImVectorImFontPtr : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImFontPtr@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImFontPtr> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImFontPtr>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImFontPtr __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImFontPtr(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImFontPtr __CreateInstance(global::DearImguiSharp.ImVectorImFontPtr.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImFontPtr(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImFontPtr.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontPtr.__Internal));
            *(global::DearImguiSharp.ImVectorImFontPtr.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImFontPtr(global::DearImguiSharp.ImVectorImFontPtr.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImFontPtr(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImFontPtr()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImFontPtr(global::DearImguiSharp.ImVectorImFontPtr _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontPtr.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImFontPtr.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImFontPtr.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImFontPtr __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImFontPtr.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontPtr.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImFontPtr.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontPtr.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImFont Data
        {
            get
            {
                global::DearImguiSharp.ImFont __result0;
                if (((global::DearImguiSharp.ImVectorImFontPtr.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImFontPtr.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[((global::DearImguiSharp.ImVectorImFontPtr.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(((global::DearImguiSharp.ImVectorImFontPtr.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::DearImguiSharp.ImVectorImFontPtr.__Internal*)__Instance)->Data = new global::System.IntPtr(&__value);
            }
        }
    }

    public unsafe partial class ImVectorImFontConfig : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImFontConfig@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImFontConfig> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImFontConfig>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImFontConfig __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImFontConfig(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImFontConfig __CreateInstance(global::DearImguiSharp.ImVectorImFontConfig.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImFontConfig(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImFontConfig.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontConfig.__Internal));
            *(global::DearImguiSharp.ImVectorImFontConfig.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImFontConfig(global::DearImguiSharp.ImVectorImFontConfig.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImFontConfig(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImFontConfig()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontConfig.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImFontConfig(global::DearImguiSharp.ImVectorImFontConfig _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImFontConfig.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImFontConfig.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImFontConfig.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImFontConfig __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImFontConfig.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontConfig.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImFontConfig.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontConfig.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImFontConfig Data
        {
            get
            {
                global::DearImguiSharp.ImFontConfig __result0;
                if (((global::DearImguiSharp.ImVectorImFontConfig.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFontConfig.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImFontConfig.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImFontConfig) global::DearImguiSharp.ImFontConfig.NativeToManagedMap[((global::DearImguiSharp.ImVectorImFontConfig.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImFontConfig.__CreateInstance(((global::DearImguiSharp.ImVectorImFontConfig.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImFontConfig.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVector_int : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_int@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector_int> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector_int>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVector_int __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector_int(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVector_int __CreateInstance(global::DearImguiSharp.ImVector_int.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector_int(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVector_int.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_int.__Internal));
            *(global::DearImguiSharp.ImVector_int.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVector_int(global::DearImguiSharp.ImVector_int.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVector_int(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVector_int()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_int.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVector_int(global::DearImguiSharp.ImVector_int _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_int.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVector_int.__Internal*) __Instance) = *((global::DearImguiSharp.ImVector_int.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVector_int __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVector_int.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_int.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVector_int.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_int.__Internal*)__Instance)->Capacity = value;
            }
        }

        public int* Data
        {
            get
            {
                return (int*) ((global::DearImguiSharp.ImVector_int.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_int.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVectorImDrawCmd : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImDrawCmd@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawCmd> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawCmd>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImDrawCmd __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawCmd(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImDrawCmd __CreateInstance(global::DearImguiSharp.ImVectorImDrawCmd.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawCmd(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImDrawCmd.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawCmd.__Internal));
            *(global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImDrawCmd(global::DearImguiSharp.ImVectorImDrawCmd.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImDrawCmd(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImDrawCmd()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawCmd.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImDrawCmd(global::DearImguiSharp.ImVectorImDrawCmd _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawCmd.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImDrawCmd __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImDrawCmd Data
        {
            get
            {
                global::DearImguiSharp.ImDrawCmd __result0;
                if (((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImDrawCmd.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImDrawCmd) global::DearImguiSharp.ImDrawCmd.NativeToManagedMap[((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImDrawCmd.__CreateInstance(((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawCmd.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiPtrOrIndex : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiPtrOrIndex@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiPtrOrIndex> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiPtrOrIndex>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiPtrOrIndex __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiPtrOrIndex(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiPtrOrIndex __CreateInstance(global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiPtrOrIndex(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiPtrOrIndex(global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiPtrOrIndex(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiPtrOrIndex()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiPtrOrIndex(global::DearImguiSharp.ImVectorImGuiPtrOrIndex _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiPtrOrIndex __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiPtrOrIndex Data
        {
            get
            {
                global::DearImguiSharp.ImGuiPtrOrIndex __result0;
                if (((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiPtrOrIndex.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiPtrOrIndex) global::DearImguiSharp.ImGuiPtrOrIndex.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiPtrOrIndex.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiPopupData : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiPopupData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiPopupData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiPopupData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiPopupData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiPopupData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiPopupData __CreateInstance(global::DearImguiSharp.ImVectorImGuiPopupData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiPopupData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiPopupData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiPopupData.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiPopupData(global::DearImguiSharp.ImVectorImGuiPopupData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiPopupData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiPopupData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiPopupData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiPopupData(global::DearImguiSharp.ImVectorImGuiPopupData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiPopupData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiPopupData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiPopupData Data
        {
            get
            {
                global::DearImguiSharp.ImGuiPopupData __result0;
                if (((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiPopupData.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiPopupData) global::DearImguiSharp.ImGuiPopupData.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiPopupData.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImDrawIdx : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImDrawIdx@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawIdx> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImDrawIdx>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImDrawIdx __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawIdx(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImDrawIdx __CreateInstance(global::DearImguiSharp.ImVectorImDrawIdx.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImDrawIdx(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImDrawIdx.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawIdx.__Internal));
            *(global::DearImguiSharp.ImVectorImDrawIdx.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImDrawIdx(global::DearImguiSharp.ImVectorImDrawIdx.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImDrawIdx(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImDrawIdx()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawIdx.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImDrawIdx(global::DearImguiSharp.ImVectorImDrawIdx _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImDrawIdx.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImDrawIdx.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImDrawIdx.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImDrawIdx __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawIdx.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawIdx.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImDrawIdx.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawIdx.__Internal*)__Instance)->Capacity = value;
            }
        }

        public ushort* Data
        {
            get
            {
                return (ushort*) ((global::DearImguiSharp.ImVectorImDrawIdx.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImDrawIdx.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVector_unsigned_char : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_unsigned_char@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector_unsigned_char> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVector_unsigned_char>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVector_unsigned_char __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector_unsigned_char(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVector_unsigned_char __CreateInstance(global::DearImguiSharp.ImVector_unsigned_char.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVector_unsigned_char(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVector_unsigned_char.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_unsigned_char.__Internal));
            *(global::DearImguiSharp.ImVector_unsigned_char.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVector_unsigned_char(global::DearImguiSharp.ImVector_unsigned_char.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVector_unsigned_char(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVector_unsigned_char()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_unsigned_char.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVector_unsigned_char(global::DearImguiSharp.ImVector_unsigned_char _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVector_unsigned_char.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVector_unsigned_char.__Internal*) __Instance) = *((global::DearImguiSharp.ImVector_unsigned_char.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVector_unsigned_char __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVector_unsigned_char.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_unsigned_char.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVector_unsigned_char.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_unsigned_char.__Internal*)__Instance)->Capacity = value;
            }
        }

        public byte* Data
        {
            get
            {
                return (byte*) ((global::DearImguiSharp.ImVector_unsigned_char.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImVector_unsigned_char.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImVectorImGuiWindowSettings : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiWindowSettings@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiWindowSettings> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiWindowSettings>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiWindowSettings __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiWindowSettings(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiWindowSettings __CreateInstance(global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiWindowSettings(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiWindowSettings(global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiWindowSettings(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiWindowSettings()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiWindowSettings(global::DearImguiSharp.ImVectorImGuiWindowSettings _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiWindowSettings __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiWindowSettings Data
        {
            get
            {
                global::DearImguiSharp.ImGuiWindowSettings __result0;
                if (((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiWindowSettings) global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiWindowSettings.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImChunkStreamImGuiWindowSettings : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal Buf;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImChunkStream_ImGuiWindowSettings@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImChunkStreamImGuiWindowSettings> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImChunkStreamImGuiWindowSettings>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImChunkStreamImGuiWindowSettings __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImChunkStreamImGuiWindowSettings(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImChunkStreamImGuiWindowSettings __CreateInstance(global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImChunkStreamImGuiWindowSettings(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal));
            *(global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImChunkStreamImGuiWindowSettings(global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImChunkStreamImGuiWindowSettings(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImChunkStreamImGuiWindowSettings()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImChunkStreamImGuiWindowSettings(global::DearImguiSharp.ImChunkStreamImGuiWindowSettings _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal*) __Instance) = *((global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImChunkStreamImGuiWindowSettings __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVectorImGuiWindowSettings Buf
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiWindowSettings.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal*) __Instance)->Buf));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal*)__Instance)->Buf = *(global::DearImguiSharp.ImVectorImGuiWindowSettings.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class StbUndoRecord : IDisposable
    {
        public partial struct __Internal
        {
            internal int @where;

            internal int insert_length;

            internal int delete_length;

            internal int char_storage;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0StbUndoRecord@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.StbUndoRecord> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.StbUndoRecord>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.StbUndoRecord __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.StbUndoRecord(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.StbUndoRecord __CreateInstance(global::DearImguiSharp.StbUndoRecord.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.StbUndoRecord(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.StbUndoRecord.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.StbUndoRecord.__Internal));
            *(global::DearImguiSharp.StbUndoRecord.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StbUndoRecord(global::DearImguiSharp.StbUndoRecord.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StbUndoRecord(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public StbUndoRecord()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.StbUndoRecord.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public StbUndoRecord(global::DearImguiSharp.StbUndoRecord _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.StbUndoRecord.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.StbUndoRecord.__Internal*) __Instance) = *((global::DearImguiSharp.StbUndoRecord.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.StbUndoRecord __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Where
        {
            get
            {
                return ((global::DearImguiSharp.StbUndoRecord.__Internal*) __Instance)->@where;
            }

            set
            {
                ((global::DearImguiSharp.StbUndoRecord.__Internal*)__Instance)->@where = value;
            }
        }

        public int InsertLength
        {
            get
            {
                return ((global::DearImguiSharp.StbUndoRecord.__Internal*) __Instance)->insert_length;
            }

            set
            {
                ((global::DearImguiSharp.StbUndoRecord.__Internal*)__Instance)->insert_length = value;
            }
        }

        public int DeleteLength
        {
            get
            {
                return ((global::DearImguiSharp.StbUndoRecord.__Internal*) __Instance)->delete_length;
            }

            set
            {
                ((global::DearImguiSharp.StbUndoRecord.__Internal*)__Instance)->delete_length = value;
            }
        }

        public int CharStorage
        {
            get
            {
                return ((global::DearImguiSharp.StbUndoRecord.__Internal*) __Instance)->char_storage;
            }

            set
            {
                ((global::DearImguiSharp.StbUndoRecord.__Internal*)__Instance)->char_storage = value;
            }
        }
    }

    public unsafe partial class StbUndoState : IDisposable
    {
        public partial struct __Internal
        {
            internal fixed byte undo_rec[1584];

            internal fixed ushort undo_char[999];

            internal short undo_point;

            internal short redo_point;

            internal int undo_char_point;

            internal int redo_char_point;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0StbUndoState@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.StbUndoState> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.StbUndoState>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.StbUndoState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.StbUndoState(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.StbUndoState __CreateInstance(global::DearImguiSharp.StbUndoState.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.StbUndoState(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.StbUndoState.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.StbUndoState.__Internal));
            *(global::DearImguiSharp.StbUndoState.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StbUndoState(global::DearImguiSharp.StbUndoState.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StbUndoState(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public StbUndoState()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.StbUndoState.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public StbUndoState(global::DearImguiSharp.StbUndoState _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.StbUndoState.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.StbUndoState.__Internal*) __Instance) = *((global::DearImguiSharp.StbUndoState.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.StbUndoState __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.StbUndoRecord[] UndoRec
        {
            get
            {
                global::DearImguiSharp.StbUndoRecord[] __value = null;
                if (((global::DearImguiSharp.StbUndoState.__Internal*) __Instance)->undo_rec != null)
                {
                    __value = new global::DearImguiSharp.StbUndoRecord[99];
                    for (int i = 0; i < 99; i++)
                        __value[i] = global::DearImguiSharp.StbUndoRecord.__CreateInstance(*((global::DearImguiSharp.StbUndoRecord.__Internal*)&(((global::DearImguiSharp.StbUndoState.__Internal*) __Instance)->undo_rec[i * sizeof(global::DearImguiSharp.StbUndoRecord.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 99)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 99; i++)
                        *(global::DearImguiSharp.StbUndoRecord.__Internal*) &((global::DearImguiSharp.StbUndoState.__Internal*)__Instance)->undo_rec[i * sizeof(global::DearImguiSharp.StbUndoRecord.__Internal)] = *(global::DearImguiSharp.StbUndoRecord.__Internal*)value[i].__Instance;
                }
            }
        }

        public ushort[] UndoChar
        {
            get
            {
                ushort[] __value = null;
                if (((global::DearImguiSharp.StbUndoState.__Internal*) __Instance)->undo_char != null)
                {
                    __value = new ushort[999];
                    for (int i = 0; i < 999; i++)
                        __value[i] = ((global::DearImguiSharp.StbUndoState.__Internal*) __Instance)->undo_char[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 999; i++)
                        ((global::DearImguiSharp.StbUndoState.__Internal*)__Instance)->undo_char[i] = value[i];
                }
            }
        }

        public short UndoPoint
        {
            get
            {
                return ((global::DearImguiSharp.StbUndoState.__Internal*) __Instance)->undo_point;
            }

            set
            {
                ((global::DearImguiSharp.StbUndoState.__Internal*)__Instance)->undo_point = value;
            }
        }

        public short RedoPoint
        {
            get
            {
                return ((global::DearImguiSharp.StbUndoState.__Internal*) __Instance)->redo_point;
            }

            set
            {
                ((global::DearImguiSharp.StbUndoState.__Internal*)__Instance)->redo_point = value;
            }
        }

        public int UndoCharPoint
        {
            get
            {
                return ((global::DearImguiSharp.StbUndoState.__Internal*) __Instance)->undo_char_point;
            }

            set
            {
                ((global::DearImguiSharp.StbUndoState.__Internal*)__Instance)->undo_char_point = value;
            }
        }

        public int RedoCharPoint
        {
            get
            {
                return ((global::DearImguiSharp.StbUndoState.__Internal*) __Instance)->redo_char_point;
            }

            set
            {
                ((global::DearImguiSharp.StbUndoState.__Internal*)__Instance)->redo_char_point = value;
            }
        }
    }

    public unsafe partial class STB_TexteditState : IDisposable
    {
        public partial struct __Internal
        {
            internal int cursor;

            internal int select_start;

            internal int select_end;

            internal byte insert_mode;

            internal byte cursor_at_end_of_line;

            internal byte initialized;

            internal byte has_preferred_x;

            internal byte single_line;

            internal byte padding1;

            internal byte padding2;

            internal byte padding3;

            internal float preferred_x;

            internal global::DearImguiSharp.StbUndoState.__Internal undostate;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0STB_TexteditState@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.STB_TexteditState> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.STB_TexteditState>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.STB_TexteditState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.STB_TexteditState(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.STB_TexteditState __CreateInstance(global::DearImguiSharp.STB_TexteditState.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.STB_TexteditState(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.STB_TexteditState.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.STB_TexteditState.__Internal));
            *(global::DearImguiSharp.STB_TexteditState.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private STB_TexteditState(global::DearImguiSharp.STB_TexteditState.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected STB_TexteditState(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public STB_TexteditState()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.STB_TexteditState.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public STB_TexteditState(global::DearImguiSharp.STB_TexteditState _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.STB_TexteditState.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance) = *((global::DearImguiSharp.STB_TexteditState.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.STB_TexteditState __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Cursor
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->cursor;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->cursor = value;
            }
        }

        public int SelectStart
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->select_start;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->select_start = value;
            }
        }

        public int SelectEnd
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->select_end;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->select_end = value;
            }
        }

        public byte InsertMode
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->insert_mode;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->insert_mode = value;
            }
        }

        public byte CursorAtEndOfLine
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->cursor_at_end_of_line;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->cursor_at_end_of_line = value;
            }
        }

        public byte Initialized
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->initialized;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->initialized = value;
            }
        }

        public byte HasPreferredX
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->has_preferred_x;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->has_preferred_x = value;
            }
        }

        public byte SingleLine
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->single_line;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->single_line = value;
            }
        }

        public byte Padding1
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->padding1;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->padding1 = value;
            }
        }

        public byte Padding2
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->padding2;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->padding2 = value;
            }
        }

        public byte Padding3
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->padding3;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->padding3 = value;
            }
        }

        public float PreferredX
        {
            get
            {
                return ((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->preferred_x;
            }

            set
            {
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->preferred_x = value;
            }
        }

        public global::DearImguiSharp.StbUndoState Undostate
        {
            get
            {
                return global::DearImguiSharp.StbUndoState.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.STB_TexteditState.__Internal*) __Instance)->undostate));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.STB_TexteditState.__Internal*)__Instance)->undostate = *(global::DearImguiSharp.StbUndoState.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class StbTexteditRow : IDisposable
    {
        public partial struct __Internal
        {
            internal float x0;

            internal float x1;

            internal float baseline_y_delta;

            internal float ymin;

            internal float ymax;

            internal int num_chars;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0StbTexteditRow@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.StbTexteditRow> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.StbTexteditRow>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.StbTexteditRow __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.StbTexteditRow(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.StbTexteditRow __CreateInstance(global::DearImguiSharp.StbTexteditRow.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.StbTexteditRow(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.StbTexteditRow.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.StbTexteditRow.__Internal));
            *(global::DearImguiSharp.StbTexteditRow.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private StbTexteditRow(global::DearImguiSharp.StbTexteditRow.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected StbTexteditRow(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public StbTexteditRow()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.StbTexteditRow.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public StbTexteditRow(global::DearImguiSharp.StbTexteditRow _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.StbTexteditRow.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.StbTexteditRow.__Internal*) __Instance) = *((global::DearImguiSharp.StbTexteditRow.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.StbTexteditRow __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X0
        {
            get
            {
                return ((global::DearImguiSharp.StbTexteditRow.__Internal*) __Instance)->x0;
            }

            set
            {
                ((global::DearImguiSharp.StbTexteditRow.__Internal*)__Instance)->x0 = value;
            }
        }

        public float X1
        {
            get
            {
                return ((global::DearImguiSharp.StbTexteditRow.__Internal*) __Instance)->x1;
            }

            set
            {
                ((global::DearImguiSharp.StbTexteditRow.__Internal*)__Instance)->x1 = value;
            }
        }

        public float BaselineYDelta
        {
            get
            {
                return ((global::DearImguiSharp.StbTexteditRow.__Internal*) __Instance)->baseline_y_delta;
            }

            set
            {
                ((global::DearImguiSharp.StbTexteditRow.__Internal*)__Instance)->baseline_y_delta = value;
            }
        }

        public float Ymin
        {
            get
            {
                return ((global::DearImguiSharp.StbTexteditRow.__Internal*) __Instance)->ymin;
            }

            set
            {
                ((global::DearImguiSharp.StbTexteditRow.__Internal*)__Instance)->ymin = value;
            }
        }

        public float Ymax
        {
            get
            {
                return ((global::DearImguiSharp.StbTexteditRow.__Internal*) __Instance)->ymax;
            }

            set
            {
                ((global::DearImguiSharp.StbTexteditRow.__Internal*)__Instance)->ymax = value;
            }
        }

        public int NumChars
        {
            get
            {
                return ((global::DearImguiSharp.StbTexteditRow.__Internal*) __Instance)->num_chars;
            }

            set
            {
                ((global::DearImguiSharp.StbTexteditRow.__Internal*)__Instance)->num_chars = value;
            }
        }
    }

    public unsafe partial class ImVec2 : IDisposable
    {
        public partial struct __Internal
        {
            internal float x;

            internal float y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVec2@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec2ih_ImVec2ihVec2")]
            internal static extern global::System.IntPtr IhImVec2ihVec2(global::System.IntPtr __instance);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVec2> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVec2>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVec2 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVec2(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVec2 __CreateInstance(global::DearImguiSharp.ImVec2.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVec2(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVec2.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec2.__Internal));
            *(global::DearImguiSharp.ImVec2.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVec2(global::DearImguiSharp.ImVec2.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVec2(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVec2()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec2.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVec2(global::DearImguiSharp.ImVec2 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec2.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVec2.__Internal*) __Instance) = *((global::DearImguiSharp.ImVec2.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVec2 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X
        {
            get
            {
                return ((global::DearImguiSharp.ImVec2.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::DearImguiSharp.ImVec2.__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((global::DearImguiSharp.ImVec2.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::DearImguiSharp.ImVec2.__Internal*)__Instance)->y = value;
            }
        }

        public global::DearImguiSharp.ImVec2ih IhImVec2ihVec2
        {
            get
            {
                var __ret = __Internal.IhImVec2ihVec2(__Instance);
                global::DearImguiSharp.ImVec2ih __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImVec2ih.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::DearImguiSharp.ImVec2ih) global::DearImguiSharp.ImVec2ih.NativeToManagedMap[__ret];
                else __result0 = global::DearImguiSharp.ImVec2ih.__CreateInstance(__ret);
                return __result0;
            }
        }
    }

    public unsafe partial class ImVec4 : IDisposable
    {
        public partial struct __Internal
        {
            internal float x;

            internal float y;

            internal float z;

            internal float w;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVec4@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVec4> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVec4>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVec4 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVec4(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVec4 __CreateInstance(global::DearImguiSharp.ImVec4.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVec4(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVec4.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec4.__Internal));
            *(global::DearImguiSharp.ImVec4.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVec4(global::DearImguiSharp.ImVec4.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVec4(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVec4()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec4.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVec4(global::DearImguiSharp.ImVec4 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec4.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVec4.__Internal*) __Instance) = *((global::DearImguiSharp.ImVec4.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVec4 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X
        {
            get
            {
                return ((global::DearImguiSharp.ImVec4.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::DearImguiSharp.ImVec4.__Internal*)__Instance)->x = value;
            }
        }

        public float Y
        {
            get
            {
                return ((global::DearImguiSharp.ImVec4.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::DearImguiSharp.ImVec4.__Internal*)__Instance)->y = value;
            }
        }

        public float Z
        {
            get
            {
                return ((global::DearImguiSharp.ImVec4.__Internal*) __Instance)->z;
            }

            set
            {
                ((global::DearImguiSharp.ImVec4.__Internal*)__Instance)->z = value;
            }
        }

        public float W
        {
            get
            {
                return ((global::DearImguiSharp.ImVec4.__Internal*) __Instance)->w;
            }

            set
            {
                ((global::DearImguiSharp.ImVec4.__Internal*)__Instance)->w = value;
            }
        }
    }

    public unsafe partial class ImGuiStyle : IDisposable
    {
        public partial struct __Internal
        {
            internal float Alpha;

            internal global::DearImguiSharp.ImVec2.__Internal WindowPadding;

            internal float WindowRounding;

            internal float WindowBorderSize;

            internal global::DearImguiSharp.ImVec2.__Internal WindowMinSize;

            internal global::DearImguiSharp.ImVec2.__Internal WindowTitleAlign;

            internal int WindowMenuButtonPosition;

            internal float ChildRounding;

            internal float ChildBorderSize;

            internal float PopupRounding;

            internal float PopupBorderSize;

            internal global::DearImguiSharp.ImVec2.__Internal FramePadding;

            internal float FrameRounding;

            internal float FrameBorderSize;

            internal global::DearImguiSharp.ImVec2.__Internal ItemSpacing;

            internal global::DearImguiSharp.ImVec2.__Internal ItemInnerSpacing;

            internal global::DearImguiSharp.ImVec2.__Internal TouchExtraPadding;

            internal float IndentSpacing;

            internal float ColumnsMinSpacing;

            internal float ScrollbarSize;

            internal float ScrollbarRounding;

            internal float GrabMinSize;

            internal float GrabRounding;

            internal float TabRounding;

            internal float TabBorderSize;

            internal int ColorButtonPosition;

            internal global::DearImguiSharp.ImVec2.__Internal ButtonTextAlign;

            internal global::DearImguiSharp.ImVec2.__Internal SelectableTextAlign;

            internal global::DearImguiSharp.ImVec2.__Internal DisplayWindowPadding;

            internal global::DearImguiSharp.ImVec2.__Internal DisplaySafeAreaPadding;

            internal float MouseCursorScale;

            internal byte AntiAliasedLines;

            internal byte AntiAliasedFill;

            internal float CurveTessellationTol;

            internal float CircleSegmentMaxError;

            internal fixed byte Colors[768];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiStyle@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiStyle> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiStyle>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiStyle __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiStyle(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiStyle __CreateInstance(global::DearImguiSharp.ImGuiStyle.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiStyle(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiStyle.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStyle.__Internal));
            *(global::DearImguiSharp.ImGuiStyle.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiStyle(global::DearImguiSharp.ImGuiStyle.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiStyle(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiStyle()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStyle.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiStyle(global::DearImguiSharp.ImGuiStyle _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStyle.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiStyle.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiStyle __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float Alpha
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->Alpha;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->Alpha = value;
            }
        }

        public global::DearImguiSharp.ImVec2 WindowPadding
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->WindowPadding));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->WindowPadding = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public float WindowRounding
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->WindowRounding;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->WindowRounding = value;
            }
        }

        public float WindowBorderSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->WindowBorderSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->WindowBorderSize = value;
            }
        }

        public global::DearImguiSharp.ImVec2 WindowMinSize
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->WindowMinSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->WindowMinSize = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 WindowTitleAlign
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->WindowTitleAlign));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->WindowTitleAlign = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public int WindowMenuButtonPosition
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->WindowMenuButtonPosition;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->WindowMenuButtonPosition = value;
            }
        }

        public float ChildRounding
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->ChildRounding;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->ChildRounding = value;
            }
        }

        public float ChildBorderSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->ChildBorderSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->ChildBorderSize = value;
            }
        }

        public float PopupRounding
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->PopupRounding;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->PopupRounding = value;
            }
        }

        public float PopupBorderSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->PopupBorderSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->PopupBorderSize = value;
            }
        }

        public global::DearImguiSharp.ImVec2 FramePadding
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->FramePadding));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->FramePadding = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public float FrameRounding
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->FrameRounding;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->FrameRounding = value;
            }
        }

        public float FrameBorderSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->FrameBorderSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->FrameBorderSize = value;
            }
        }

        public global::DearImguiSharp.ImVec2 ItemSpacing
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->ItemSpacing));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->ItemSpacing = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 ItemInnerSpacing
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->ItemInnerSpacing));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->ItemInnerSpacing = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 TouchExtraPadding
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->TouchExtraPadding));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->TouchExtraPadding = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public float IndentSpacing
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->IndentSpacing;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->IndentSpacing = value;
            }
        }

        public float ColumnsMinSpacing
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->ColumnsMinSpacing;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->ColumnsMinSpacing = value;
            }
        }

        public float ScrollbarSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->ScrollbarSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->ScrollbarSize = value;
            }
        }

        public float ScrollbarRounding
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->ScrollbarRounding;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->ScrollbarRounding = value;
            }
        }

        public float GrabMinSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->GrabMinSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->GrabMinSize = value;
            }
        }

        public float GrabRounding
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->GrabRounding;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->GrabRounding = value;
            }
        }

        public float TabRounding
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->TabRounding;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->TabRounding = value;
            }
        }

        public float TabBorderSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->TabBorderSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->TabBorderSize = value;
            }
        }

        public int ColorButtonPosition
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->ColorButtonPosition;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->ColorButtonPosition = value;
            }
        }

        public global::DearImguiSharp.ImVec2 ButtonTextAlign
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->ButtonTextAlign));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->ButtonTextAlign = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 SelectableTextAlign
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->SelectableTextAlign));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->SelectableTextAlign = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 DisplayWindowPadding
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->DisplayWindowPadding));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->DisplayWindowPadding = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 DisplaySafeAreaPadding
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->DisplaySafeAreaPadding));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->DisplaySafeAreaPadding = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public float MouseCursorScale
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->MouseCursorScale;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->MouseCursorScale = value;
            }
        }

        public bool AntiAliasedLines
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->AntiAliasedLines != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->AntiAliasedLines = (byte) (value ? 1 : 0);
            }
        }

        public bool AntiAliasedFill
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->AntiAliasedFill != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->AntiAliasedFill = (byte) (value ? 1 : 0);
            }
        }

        public float CurveTessellationTol
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->CurveTessellationTol;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->CurveTessellationTol = value;
            }
        }

        public float CircleSegmentMaxError
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->CircleSegmentMaxError;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->CircleSegmentMaxError = value;
            }
        }

        public global::DearImguiSharp.ImVec4[] Colors
        {
            get
            {
                global::DearImguiSharp.ImVec4[] __value = null;
                if (((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->Colors != null)
                {
                    __value = new global::DearImguiSharp.ImVec4[48];
                    for (int i = 0; i < 48; i++)
                        __value[i] = global::DearImguiSharp.ImVec4.__CreateInstance(*((global::DearImguiSharp.ImVec4.__Internal*)&(((global::DearImguiSharp.ImGuiStyle.__Internal*) __Instance)->Colors[i * sizeof(global::DearImguiSharp.ImVec4.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 48)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 48; i++)
                        *(global::DearImguiSharp.ImVec4.__Internal*) &((global::DearImguiSharp.ImGuiStyle.__Internal*)__Instance)->Colors[i * sizeof(global::DearImguiSharp.ImVec4.__Internal)] = *(global::DearImguiSharp.ImVec4.__Internal*)value[i].__Instance;
                }
            }
        }
    }

    public unsafe partial class ImGuiIO : IDisposable
    {
        public partial struct __Internal
        {
            internal int ConfigFlags;

            internal int BackendFlags;

            internal global::DearImguiSharp.ImVec2.__Internal DisplaySize;

            internal float DeltaTime;

            internal float IniSavingRate;

            internal global::System.IntPtr IniFilename;

            internal global::System.IntPtr LogFilename;

            internal float MouseDoubleClickTime;

            internal float MouseDoubleClickMaxDist;

            internal float MouseDragThreshold;

            internal fixed int KeyMap[22];

            internal float KeyRepeatDelay;

            internal float KeyRepeatRate;

            internal global::System.IntPtr UserData;

            internal global::System.IntPtr Fonts;

            internal float FontGlobalScale;

            internal byte FontAllowUserScaling;

            internal global::System.IntPtr FontDefault;

            internal global::DearImguiSharp.ImVec2.__Internal DisplayFramebufferScale;

            internal byte MouseDrawCursor;

            internal byte ConfigMacOSXBehaviors;

            internal byte ConfigInputTextCursorBlink;

            internal byte ConfigWindowsResizeFromEdges;

            internal byte ConfigWindowsMoveFromTitleBarOnly;

            internal float ConfigWindowsMemoryCompactTimer;

            internal global::System.IntPtr BackendPlatformName;

            internal global::System.IntPtr BackendRendererName;

            internal global::System.IntPtr BackendPlatformUserData;

            internal global::System.IntPtr BackendRendererUserData;

            internal global::System.IntPtr BackendLanguageUserData;

            internal global::System.IntPtr GetClipboardTextFn;

            internal global::System.IntPtr SetClipboardTextFn;

            internal global::System.IntPtr ClipboardUserData;

            internal global::System.IntPtr ImeSetInputScreenPosFn;

            internal global::System.IntPtr ImeWindowHandle;

            internal global::System.IntPtr RenderDrawListsFnUnused;

            internal global::DearImguiSharp.ImVec2.__Internal MousePos;

            internal fixed byte MouseDown[5];

            internal float MouseWheel;

            internal float MouseWheelH;

            internal byte KeyCtrl;

            internal byte KeyShift;

            internal byte KeyAlt;

            internal byte KeySuper;

            internal fixed byte KeysDown[512];

            internal fixed float NavInputs[21];

            internal byte WantCaptureMouse;

            internal byte WantCaptureKeyboard;

            internal byte WantTextInput;

            internal byte WantSetMousePos;

            internal byte WantSaveIniSettings;

            internal byte NavActive;

            internal byte NavVisible;

            internal float Framerate;

            internal int MetricsRenderVertices;

            internal int MetricsRenderIndices;

            internal int MetricsRenderWindows;

            internal int MetricsActiveWindows;

            internal int MetricsActiveAllocations;

            internal global::DearImguiSharp.ImVec2.__Internal MouseDelta;

            internal global::DearImguiSharp.ImVec2.__Internal MousePosPrev;

            internal fixed byte MouseClickedPos[40];

            internal fixed double MouseClickedTime[5];

            internal fixed byte MouseClicked[5];

            internal fixed byte MouseDoubleClicked[5];

            internal fixed byte MouseReleased[5];

            internal fixed byte MouseDownOwned[5];

            internal fixed byte MouseDownWasDoubleClick[5];

            internal fixed float MouseDownDuration[5];

            internal fixed float MouseDownDurationPrev[5];

            internal fixed byte MouseDragMaxDistanceAbs[40];

            internal fixed float MouseDragMaxDistanceSqr[5];

            internal fixed float KeysDownDuration[512];

            internal fixed float KeysDownDurationPrev[512];

            internal fixed float NavInputsDownDuration[21];

            internal fixed float NavInputsDownDurationPrev[21];

            internal global::DearImguiSharp.ImVectorImWchar.__Internal InputQueueCharacters;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiIO@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiIO> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiIO>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiIO __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiIO(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiIO __CreateInstance(global::DearImguiSharp.ImGuiIO.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiIO(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiIO.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiIO.__Internal));
            *(global::DearImguiSharp.ImGuiIO.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiIO(global::DearImguiSharp.ImGuiIO.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiIO(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiIO()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiIO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiIO(global::DearImguiSharp.ImGuiIO _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiIO.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiIO.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiIO __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int ConfigFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->ConfigFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->ConfigFlags = value;
            }
        }

        public int BackendFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->BackendFlags = value;
            }
        }

        public global::DearImguiSharp.ImVec2 DisplaySize
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->DisplaySize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->DisplaySize = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public float DeltaTime
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->DeltaTime;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->DeltaTime = value;
            }
        }

        public float IniSavingRate
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->IniSavingRate;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->IniSavingRate = value;
            }
        }

        public string IniFilename
        {
            get
            {
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->IniFilename == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->IniFilename;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->IniFilename, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->IniFilename = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public string LogFilename
        {
            get
            {
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->LogFilename == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->LogFilename;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->LogFilename, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->LogFilename = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public float MouseDoubleClickTime
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDoubleClickTime;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDoubleClickTime = value;
            }
        }

        public float MouseDoubleClickMaxDist
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDoubleClickMaxDist;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDoubleClickMaxDist = value;
            }
        }

        public float MouseDragThreshold
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDragThreshold;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDragThreshold = value;
            }
        }

        public int[] KeyMap
        {
            get
            {
                int[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeyMap != null)
                {
                    __value = new int[22];
                    for (int i = 0; i < 22; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeyMap[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 22; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeyMap[i] = value[i];
                }
            }
        }

        public float KeyRepeatDelay
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeyRepeatDelay;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeyRepeatDelay = value;
            }
        }

        public float KeyRepeatRate
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeyRepeatRate;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeyRepeatRate = value;
            }
        }

        public global::System.IntPtr UserData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->UserData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->UserData = (global::System.IntPtr) value;
            }
        }

        public global::DearImguiSharp.ImFontAtlas Fonts
        {
            get
            {
                global::DearImguiSharp.ImFontAtlas __result0;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->Fonts == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFontAtlas.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->Fonts))
                    __result0 = (global::DearImguiSharp.ImFontAtlas) global::DearImguiSharp.ImFontAtlas.NativeToManagedMap[((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->Fonts];
                else __result0 = global::DearImguiSharp.ImFontAtlas.__CreateInstance(((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->Fonts);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->Fonts = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public float FontGlobalScale
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->FontGlobalScale;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->FontGlobalScale = value;
            }
        }

        public bool FontAllowUserScaling
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->FontAllowUserScaling != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->FontAllowUserScaling = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImFont FontDefault
        {
            get
            {
                global::DearImguiSharp.ImFont __result0;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->FontDefault == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->FontDefault))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->FontDefault];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->FontDefault);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->FontDefault = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 DisplayFramebufferScale
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->DisplayFramebufferScale));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->DisplayFramebufferScale = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public bool MouseDrawCursor
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDrawCursor != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDrawCursor = (byte) (value ? 1 : 0);
            }
        }

        public bool ConfigMacOSXBehaviors
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->ConfigMacOSXBehaviors != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->ConfigMacOSXBehaviors = (byte) (value ? 1 : 0);
            }
        }

        public bool ConfigInputTextCursorBlink
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->ConfigInputTextCursorBlink != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->ConfigInputTextCursorBlink = (byte) (value ? 1 : 0);
            }
        }

        public bool ConfigWindowsResizeFromEdges
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->ConfigWindowsResizeFromEdges != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->ConfigWindowsResizeFromEdges = (byte) (value ? 1 : 0);
            }
        }

        public bool ConfigWindowsMoveFromTitleBarOnly
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->ConfigWindowsMoveFromTitleBarOnly != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->ConfigWindowsMoveFromTitleBarOnly = (byte) (value ? 1 : 0);
            }
        }

        public float ConfigWindowsMemoryCompactTimer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->ConfigWindowsMemoryCompactTimer;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->ConfigWindowsMemoryCompactTimer = value;
            }
        }

        public string BackendPlatformName
        {
            get
            {
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendPlatformName == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendPlatformName;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendPlatformName, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->BackendPlatformName = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public string BackendRendererName
        {
            get
            {
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendRendererName == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendRendererName;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendRendererName, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->BackendRendererName = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public global::System.IntPtr BackendPlatformUserData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendPlatformUserData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->BackendPlatformUserData = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr BackendRendererUserData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendRendererUserData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->BackendRendererUserData = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr BackendLanguageUserData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->BackendLanguageUserData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->BackendLanguageUserData = (global::System.IntPtr) value;
            }
        }

        public global::DearImguiSharp.Delegates.Func_IntPtr_IntPtr GetClipboardTextFn
        {
            get
            {
                var __ptr0 = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->GetClipboardTextFn;
                return __ptr0 == IntPtr.Zero? null : (global::DearImguiSharp.Delegates.Func_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::DearImguiSharp.Delegates.Func_IntPtr_IntPtr));
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->GetClipboardTextFn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::DearImguiSharp.Delegates.Action_IntPtr_string SetClipboardTextFn
        {
            get
            {
                var __ptr0 = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->SetClipboardTextFn;
                return __ptr0 == IntPtr.Zero? null : (global::DearImguiSharp.Delegates.Action_IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::DearImguiSharp.Delegates.Action_IntPtr_string));
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->SetClipboardTextFn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr ClipboardUserData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->ClipboardUserData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->ClipboardUserData = (global::System.IntPtr) value;
            }
        }

        public global::DearImguiSharp.Delegates.Action_int_int ImeSetInputScreenPosFn
        {
            get
            {
                var __ptr0 = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->ImeSetInputScreenPosFn;
                return __ptr0 == IntPtr.Zero? null : (global::DearImguiSharp.Delegates.Action_int_int) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::DearImguiSharp.Delegates.Action_int_int));
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->ImeSetInputScreenPosFn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr ImeWindowHandle
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->ImeWindowHandle;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->ImeWindowHandle = (global::System.IntPtr) value;
            }
        }

        public global::System.IntPtr RenderDrawListsFnUnused
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->RenderDrawListsFnUnused;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->RenderDrawListsFnUnused = (global::System.IntPtr) value;
            }
        }

        public global::DearImguiSharp.ImVec2 MousePos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MousePos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MousePos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public bool[] MouseDown
        {
            get
            {
                bool[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDown != null)
                {
                    __value = new bool[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDown[i] != 0;
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDown[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        public float MouseWheel
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseWheel;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseWheel = value;
            }
        }

        public float MouseWheelH
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseWheelH;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseWheelH = value;
            }
        }

        public bool KeyCtrl
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeyCtrl != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeyCtrl = (byte) (value ? 1 : 0);
            }
        }

        public bool KeyShift
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeyShift != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeyShift = (byte) (value ? 1 : 0);
            }
        }

        public bool KeyAlt
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeyAlt != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeyAlt = (byte) (value ? 1 : 0);
            }
        }

        public bool KeySuper
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeySuper != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeySuper = (byte) (value ? 1 : 0);
            }
        }

        public bool[] KeysDown
        {
            get
            {
                bool[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeysDown != null)
                {
                    __value = new bool[512];
                    for (int i = 0; i < 512; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeysDown[i] != 0;
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeysDown[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        public float[] NavInputs
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->NavInputs != null)
                {
                    __value = new float[21];
                    for (int i = 0; i < 21; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->NavInputs[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 21; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->NavInputs[i] = value[i];
                }
            }
        }

        public bool WantCaptureMouse
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->WantCaptureMouse != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->WantCaptureMouse = (byte) (value ? 1 : 0);
            }
        }

        public bool WantCaptureKeyboard
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->WantCaptureKeyboard != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->WantCaptureKeyboard = (byte) (value ? 1 : 0);
            }
        }

        public bool WantTextInput
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->WantTextInput != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->WantTextInput = (byte) (value ? 1 : 0);
            }
        }

        public bool WantSetMousePos
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->WantSetMousePos != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->WantSetMousePos = (byte) (value ? 1 : 0);
            }
        }

        public bool WantSaveIniSettings
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->WantSaveIniSettings != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->WantSaveIniSettings = (byte) (value ? 1 : 0);
            }
        }

        public bool NavActive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->NavActive != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->NavActive = (byte) (value ? 1 : 0);
            }
        }

        public bool NavVisible
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->NavVisible != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->NavVisible = (byte) (value ? 1 : 0);
            }
        }

        public float Framerate
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->Framerate;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->Framerate = value;
            }
        }

        public int MetricsRenderVertices
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MetricsRenderVertices;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MetricsRenderVertices = value;
            }
        }

        public int MetricsRenderIndices
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MetricsRenderIndices;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MetricsRenderIndices = value;
            }
        }

        public int MetricsRenderWindows
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MetricsRenderWindows;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MetricsRenderWindows = value;
            }
        }

        public int MetricsActiveWindows
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MetricsActiveWindows;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MetricsActiveWindows = value;
            }
        }

        public int MetricsActiveAllocations
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MetricsActiveAllocations;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MetricsActiveAllocations = value;
            }
        }

        public global::DearImguiSharp.ImVec2 MouseDelta
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDelta));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDelta = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 MousePosPrev
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MousePosPrev));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MousePosPrev = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2[] MouseClickedPos
        {
            get
            {
                global::DearImguiSharp.ImVec2[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseClickedPos != null)
                {
                    __value = new global::DearImguiSharp.ImVec2[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = global::DearImguiSharp.ImVec2.__CreateInstance(*((global::DearImguiSharp.ImVec2.__Internal*)&(((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseClickedPos[i * sizeof(global::DearImguiSharp.ImVec2.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 5)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 5; i++)
                        *(global::DearImguiSharp.ImVec2.__Internal*) &((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseClickedPos[i * sizeof(global::DearImguiSharp.ImVec2.__Internal)] = *(global::DearImguiSharp.ImVec2.__Internal*)value[i].__Instance;
                }
            }
        }

        public double[] MouseClickedTime
        {
            get
            {
                double[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseClickedTime != null)
                {
                    __value = new double[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseClickedTime[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseClickedTime[i] = value[i];
                }
            }
        }

        public bool[] MouseClicked
        {
            get
            {
                bool[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseClicked != null)
                {
                    __value = new bool[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseClicked[i] != 0;
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseClicked[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        public bool[] MouseDoubleClicked
        {
            get
            {
                bool[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDoubleClicked != null)
                {
                    __value = new bool[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDoubleClicked[i] != 0;
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDoubleClicked[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        public bool[] MouseReleased
        {
            get
            {
                bool[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseReleased != null)
                {
                    __value = new bool[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseReleased[i] != 0;
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseReleased[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        public bool[] MouseDownOwned
        {
            get
            {
                bool[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDownOwned != null)
                {
                    __value = new bool[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDownOwned[i] != 0;
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDownOwned[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        public bool[] MouseDownWasDoubleClick
        {
            get
            {
                bool[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDownWasDoubleClick != null)
                {
                    __value = new bool[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDownWasDoubleClick[i] != 0;
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDownWasDoubleClick[i] = (byte)(value[i] ? 1 : 0);
                }
            }
        }

        public float[] MouseDownDuration
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDownDuration != null)
                {
                    __value = new float[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDownDuration[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDownDuration[i] = value[i];
                }
            }
        }

        public float[] MouseDownDurationPrev
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDownDurationPrev != null)
                {
                    __value = new float[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDownDurationPrev[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDownDurationPrev[i] = value[i];
                }
            }
        }

        public global::DearImguiSharp.ImVec2[] MouseDragMaxDistanceAbs
        {
            get
            {
                global::DearImguiSharp.ImVec2[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDragMaxDistanceAbs != null)
                {
                    __value = new global::DearImguiSharp.ImVec2[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = global::DearImguiSharp.ImVec2.__CreateInstance(*((global::DearImguiSharp.ImVec2.__Internal*)&(((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDragMaxDistanceAbs[i * sizeof(global::DearImguiSharp.ImVec2.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 5)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 5; i++)
                        *(global::DearImguiSharp.ImVec2.__Internal*) &((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDragMaxDistanceAbs[i * sizeof(global::DearImguiSharp.ImVec2.__Internal)] = *(global::DearImguiSharp.ImVec2.__Internal*)value[i].__Instance;
                }
            }
        }

        public float[] MouseDragMaxDistanceSqr
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDragMaxDistanceSqr != null)
                {
                    __value = new float[5];
                    for (int i = 0; i < 5; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->MouseDragMaxDistanceSqr[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 5; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->MouseDragMaxDistanceSqr[i] = value[i];
                }
            }
        }

        public float[] KeysDownDuration
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeysDownDuration != null)
                {
                    __value = new float[512];
                    for (int i = 0; i < 512; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeysDownDuration[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeysDownDuration[i] = value[i];
                }
            }
        }

        public float[] KeysDownDurationPrev
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeysDownDurationPrev != null)
                {
                    __value = new float[512];
                    for (int i = 0; i < 512; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->KeysDownDurationPrev[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 512; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->KeysDownDurationPrev[i] = value[i];
                }
            }
        }

        public float[] NavInputsDownDuration
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->NavInputsDownDuration != null)
                {
                    __value = new float[21];
                    for (int i = 0; i < 21; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->NavInputsDownDuration[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 21; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->NavInputsDownDuration[i] = value[i];
                }
            }
        }

        public float[] NavInputsDownDurationPrev
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->NavInputsDownDurationPrev != null)
                {
                    __value = new float[21];
                    for (int i = 0; i < 21; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->NavInputsDownDurationPrev[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 21; i++)
                        ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->NavInputsDownDurationPrev[i] = value[i];
                }
            }
        }

        public global::DearImguiSharp.ImVectorImWchar InputQueueCharacters
        {
            get
            {
                return global::DearImguiSharp.ImVectorImWchar.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiIO.__Internal*) __Instance)->InputQueueCharacters));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiIO.__Internal*)__Instance)->InputQueueCharacters = *(global::DearImguiSharp.ImVectorImWchar.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiInputTextCallbackData : IDisposable
    {
        public partial struct __Internal
        {
            internal int EventFlag;

            internal int Flags;

            internal global::System.IntPtr UserData;

            internal ushort EventChar;

            internal int EventKey;

            internal global::System.IntPtr Buf;

            internal int BufTextLen;

            internal int BufSize;

            internal byte BufDirty;

            internal int CursorPos;

            internal int SelectionStart;

            internal int SelectionEnd;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiInputTextCallbackData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiInputTextCallbackData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiInputTextCallbackData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiInputTextCallbackData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiInputTextCallbackData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiInputTextCallbackData __CreateInstance(global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiInputTextCallbackData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal));
            *(global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiInputTextCallbackData(global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiInputTextCallbackData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiInputTextCallbackData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiInputTextCallbackData(global::DearImguiSharp.ImGuiInputTextCallbackData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiInputTextCallbackData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int EventFlag
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->EventFlag;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->EventFlag = value;
            }
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->Flags = value;
            }
        }

        public global::System.IntPtr UserData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->UserData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->UserData = (global::System.IntPtr) value;
            }
        }

        public ushort EventChar
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->EventChar;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->EventChar = value;
            }
        }

        public int EventKey
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->EventKey;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->EventKey = value;
            }
        }

        public sbyte* Buf
        {
            get
            {
                return (sbyte*) ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->Buf;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->Buf = (global::System.IntPtr) value;
            }
        }

        public int BufTextLen
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->BufTextLen;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->BufTextLen = value;
            }
        }

        public int BufSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->BufSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->BufSize = value;
            }
        }

        public bool BufDirty
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->BufDirty != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->BufDirty = (byte) (value ? 1 : 0);
            }
        }

        public int CursorPos
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->CursorPos;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->CursorPos = value;
            }
        }

        public int SelectionStart
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->SelectionStart;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->SelectionStart = value;
            }
        }

        public int SelectionEnd
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*) __Instance)->SelectionEnd;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextCallbackData.__Internal*)__Instance)->SelectionEnd = value;
            }
        }
    }

    public unsafe partial class ImGuiSizeCallbackData : IDisposable
    {
        public partial struct __Internal
        {
            internal global::System.IntPtr UserData;

            internal global::DearImguiSharp.ImVec2.__Internal Pos;

            internal global::DearImguiSharp.ImVec2.__Internal CurrentSize;

            internal global::DearImguiSharp.ImVec2.__Internal DesiredSize;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiSizeCallbackData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiSizeCallbackData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiSizeCallbackData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiSizeCallbackData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiSizeCallbackData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiSizeCallbackData __CreateInstance(global::DearImguiSharp.ImGuiSizeCallbackData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiSizeCallbackData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiSizeCallbackData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiSizeCallbackData.__Internal));
            *(global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiSizeCallbackData(global::DearImguiSharp.ImGuiSizeCallbackData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiSizeCallbackData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiSizeCallbackData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiSizeCallbackData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiSizeCallbackData(global::DearImguiSharp.ImGuiSizeCallbackData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiSizeCallbackData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiSizeCallbackData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr UserData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*) __Instance)->UserData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*)__Instance)->UserData = (global::System.IntPtr) value;
            }
        }

        public global::DearImguiSharp.ImVec2 Pos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*) __Instance)->Pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*)__Instance)->Pos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 CurrentSize
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*) __Instance)->CurrentSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*)__Instance)->CurrentSize = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 DesiredSize
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*) __Instance)->DesiredSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiSizeCallbackData.__Internal*)__Instance)->DesiredSize = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiPayload : IDisposable
    {
        public partial struct __Internal
        {
            internal global::System.IntPtr Data;

            internal int DataSize;

            internal uint SourceId;

            internal uint SourceParentId;

            internal int DataFrameCount;

            internal fixed sbyte DataType[33];

            internal byte Preview;

            internal byte Delivery;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiPayload@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiPayload> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiPayload>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiPayload __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiPayload(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiPayload __CreateInstance(global::DearImguiSharp.ImGuiPayload.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiPayload(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiPayload.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiPayload.__Internal));
            *(global::DearImguiSharp.ImGuiPayload.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiPayload(global::DearImguiSharp.ImGuiPayload.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiPayload(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiPayload()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiPayload.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiPayload(global::DearImguiSharp.ImGuiPayload _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiPayload.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiPayload.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiPayload __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr Data
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance)->Data;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPayload.__Internal*)__Instance)->Data = (global::System.IntPtr) value;
            }
        }

        public int DataSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance)->DataSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPayload.__Internal*)__Instance)->DataSize = value;
            }
        }

        public uint SourceId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance)->SourceId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPayload.__Internal*)__Instance)->SourceId = value;
            }
        }

        public uint SourceParentId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance)->SourceParentId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPayload.__Internal*)__Instance)->SourceParentId = value;
            }
        }

        public int DataFrameCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance)->DataFrameCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPayload.__Internal*)__Instance)->DataFrameCount = value;
            }
        }

        public sbyte[] DataType
        {
            get
            {
                sbyte[] __value = null;
                if (((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance)->DataType != null)
                {
                    __value = new sbyte[33];
                    for (int i = 0; i < 33; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance)->DataType[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 33; i++)
                        ((global::DearImguiSharp.ImGuiPayload.__Internal*)__Instance)->DataType[i] = value[i];
                }
            }
        }

        public bool Preview
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance)->Preview != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPayload.__Internal*)__Instance)->Preview = (byte) (value ? 1 : 0);
            }
        }

        public bool Delivery
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPayload.__Internal*) __Instance)->Delivery != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPayload.__Internal*)__Instance)->Delivery = (byte) (value ? 1 : 0);
            }
        }
    }

    public unsafe partial class ImGuiOnceUponAFrame : IDisposable
    {
        public partial struct __Internal
        {
            internal int RefFrame;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiOnceUponAFrame@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiOnceUponAFrame> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiOnceUponAFrame>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiOnceUponAFrame __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiOnceUponAFrame(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiOnceUponAFrame __CreateInstance(global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiOnceUponAFrame(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal));
            *(global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiOnceUponAFrame(global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiOnceUponAFrame(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiOnceUponAFrame()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiOnceUponAFrame(global::DearImguiSharp.ImGuiOnceUponAFrame _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiOnceUponAFrame __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int RefFrame
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal*) __Instance)->RefFrame;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiOnceUponAFrame.__Internal*)__Instance)->RefFrame = value;
            }
        }
    }

    public unsafe partial class ImGuiTextFilter : IDisposable
    {
        public partial struct __Internal
        {
            internal fixed sbyte InputBuf[256];

            internal global::DearImguiSharp.ImVectorImGuiTextRange.__Internal Filters;

            internal int CountGrep;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiTextFilter@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTextFilter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTextFilter>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiTextFilter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTextFilter(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiTextFilter __CreateInstance(global::DearImguiSharp.ImGuiTextFilter.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTextFilter(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiTextFilter.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTextFilter.__Internal));
            *(global::DearImguiSharp.ImGuiTextFilter.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiTextFilter(global::DearImguiSharp.ImGuiTextFilter.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiTextFilter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiTextFilter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTextFilter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiTextFilter(global::DearImguiSharp.ImGuiTextFilter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTextFilter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiTextFilter.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiTextFilter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiTextFilter __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte[] InputBuf
        {
            get
            {
                sbyte[] __value = null;
                if (((global::DearImguiSharp.ImGuiTextFilter.__Internal*) __Instance)->InputBuf != null)
                {
                    __value = new sbyte[256];
                    for (int i = 0; i < 256; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiTextFilter.__Internal*) __Instance)->InputBuf[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 256; i++)
                        ((global::DearImguiSharp.ImGuiTextFilter.__Internal*)__Instance)->InputBuf[i] = value[i];
                }
            }
        }

        public global::DearImguiSharp.ImVectorImGuiTextRange Filters
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiTextRange.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiTextFilter.__Internal*) __Instance)->Filters));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiTextFilter.__Internal*)__Instance)->Filters = *(global::DearImguiSharp.ImVectorImGuiTextRange.__Internal*) value.__Instance;
            }
        }

        public int CountGrep
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTextFilter.__Internal*) __Instance)->CountGrep;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTextFilter.__Internal*)__Instance)->CountGrep = value;
            }
        }
    }

    public unsafe partial class ImGuiTextBuffer : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVector_char.__Internal Buf;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiTextBuffer@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_appendf")]
            internal static extern void Appendf(global::System.IntPtr __instance, [MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTextBuffer> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTextBuffer>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiTextBuffer __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTextBuffer(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiTextBuffer __CreateInstance(global::DearImguiSharp.ImGuiTextBuffer.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTextBuffer(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiTextBuffer.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTextBuffer.__Internal));
            *(global::DearImguiSharp.ImGuiTextBuffer.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiTextBuffer(global::DearImguiSharp.ImGuiTextBuffer.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiTextBuffer(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiTextBuffer()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTextBuffer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiTextBuffer(global::DearImguiSharp.ImGuiTextBuffer _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTextBuffer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiTextBuffer.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiTextBuffer.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiTextBuffer __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public void Appendf(string fmt)
        {
            __Internal.Appendf(__Instance, fmt);
        }

        public global::DearImguiSharp.ImVector_char Buf
        {
            get
            {
                return global::DearImguiSharp.ImVector_char.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiTextBuffer.__Internal*) __Instance)->Buf));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiTextBuffer.__Internal*)__Instance)->Buf = *(global::DearImguiSharp.ImVector_char.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiStorage : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiStorage@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiStorage> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiStorage>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiStorage __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiStorage(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiStorage __CreateInstance(global::DearImguiSharp.ImGuiStorage.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiStorage(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiStorage.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStorage.__Internal));
            *(global::DearImguiSharp.ImGuiStorage.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiStorage(global::DearImguiSharp.ImGuiStorage.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiStorage(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiStorage()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStorage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiStorage(global::DearImguiSharp.ImGuiStorage _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStorage.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiStorage.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiStorage.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiStorage __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVectorImGuiStoragePair Data
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiStoragePair.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiStorage.__Internal*) __Instance)->Data));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiStorage.__Internal*)__Instance)->Data = *(global::DearImguiSharp.ImVectorImGuiStoragePair.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImVectorImGuiTabBar : IDisposable
    {
        public partial struct __Internal
        {
            internal int Size;

            internal int Capacity;

            internal global::System.IntPtr Data;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVector_ImGuiTabBar@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiTabBar> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVectorImGuiTabBar>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVectorImGuiTabBar __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiTabBar(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVectorImGuiTabBar __CreateInstance(global::DearImguiSharp.ImVectorImGuiTabBar.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVectorImGuiTabBar(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVectorImGuiTabBar.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiTabBar.__Internal));
            *(global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVectorImGuiTabBar(global::DearImguiSharp.ImVectorImGuiTabBar.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVectorImGuiTabBar(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVectorImGuiTabBar()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiTabBar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVectorImGuiTabBar(global::DearImguiSharp.ImVectorImGuiTabBar _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVectorImGuiTabBar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) __Instance) = *((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVectorImGuiTabBar __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Size
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*)__Instance)->Size = value;
            }
        }

        public int Capacity
        {
            get
            {
                return ((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) __Instance)->Capacity;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*)__Instance)->Capacity = value;
            }
        }

        public global::DearImguiSharp.ImGuiTabBar Data
        {
            get
            {
                global::DearImguiSharp.ImGuiTabBar __result0;
                if (((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) __Instance)->Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiTabBar.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) __Instance)->Data))
                    __result0 = (global::DearImguiSharp.ImGuiTabBar) global::DearImguiSharp.ImGuiTabBar.NativeToManagedMap[((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) __Instance)->Data];
                else __result0 = global::DearImguiSharp.ImGuiTabBar.__CreateInstance(((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) __Instance)->Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*)__Instance)->Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImPoolImGuiTabBar : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVectorImGuiTabBar.__Internal Buf;

            internal global::DearImguiSharp.ImGuiStorage.__Internal Map;

            internal int FreeIdx;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImPool_ImGuiTabBar@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImPoolImGuiTabBar> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImPoolImGuiTabBar>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImPoolImGuiTabBar __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImPoolImGuiTabBar(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImPoolImGuiTabBar __CreateInstance(global::DearImguiSharp.ImPoolImGuiTabBar.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImPoolImGuiTabBar(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImPoolImGuiTabBar.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImPoolImGuiTabBar.__Internal));
            *(global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImPoolImGuiTabBar(global::DearImguiSharp.ImPoolImGuiTabBar.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImPoolImGuiTabBar(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImPoolImGuiTabBar()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImPoolImGuiTabBar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImPoolImGuiTabBar(global::DearImguiSharp.ImPoolImGuiTabBar _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImPoolImGuiTabBar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*) __Instance) = *((global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImPoolImGuiTabBar __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVectorImGuiTabBar Buf
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiTabBar.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*) __Instance)->Buf));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*)__Instance)->Buf = *(global::DearImguiSharp.ImVectorImGuiTabBar.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiStorage Map
        {
            get
            {
                return global::DearImguiSharp.ImGuiStorage.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*) __Instance)->Map));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*)__Instance)->Map = *(global::DearImguiSharp.ImGuiStorage.__Internal*) value.__Instance;
            }
        }

        public int FreeIdx
        {
            get
            {
                return ((global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*) __Instance)->FreeIdx;
            }

            set
            {
                ((global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*)__Instance)->FreeIdx = value;
            }
        }
    }

    public unsafe partial class ImGuiListClipper : IDisposable
    {
        public partial struct __Internal
        {
            internal int DisplayStart;

            internal int DisplayEnd;

            internal int ItemsCount;

            internal int StepNo;

            internal float ItemsHeight;

            internal float StartPosY;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiListClipper@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiListClipper> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiListClipper>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiListClipper __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiListClipper(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiListClipper __CreateInstance(global::DearImguiSharp.ImGuiListClipper.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiListClipper(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiListClipper.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiListClipper.__Internal));
            *(global::DearImguiSharp.ImGuiListClipper.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiListClipper(global::DearImguiSharp.ImGuiListClipper.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiListClipper(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiListClipper()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiListClipper.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiListClipper(global::DearImguiSharp.ImGuiListClipper _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiListClipper.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiListClipper.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiListClipper.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiListClipper __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int DisplayStart
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiListClipper.__Internal*) __Instance)->DisplayStart;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiListClipper.__Internal*)__Instance)->DisplayStart = value;
            }
        }

        public int DisplayEnd
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiListClipper.__Internal*) __Instance)->DisplayEnd;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiListClipper.__Internal*)__Instance)->DisplayEnd = value;
            }
        }

        public int ItemsCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiListClipper.__Internal*) __Instance)->ItemsCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiListClipper.__Internal*)__Instance)->ItemsCount = value;
            }
        }

        public int StepNo
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiListClipper.__Internal*) __Instance)->StepNo;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiListClipper.__Internal*)__Instance)->StepNo = value;
            }
        }

        public float ItemsHeight
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiListClipper.__Internal*) __Instance)->ItemsHeight;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiListClipper.__Internal*)__Instance)->ItemsHeight = value;
            }
        }

        public float StartPosY
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiListClipper.__Internal*) __Instance)->StartPosY;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiListClipper.__Internal*)__Instance)->StartPosY = value;
            }
        }
    }

    public unsafe partial class ImColor : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVec4.__Internal Value;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImColor@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImColor> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImColor>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImColor __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImColor(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImColor __CreateInstance(global::DearImguiSharp.ImColor.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImColor(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImColor.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImColor.__Internal));
            *(global::DearImguiSharp.ImColor.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImColor(global::DearImguiSharp.ImColor.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImColor(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImColor()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImColor.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImColor(global::DearImguiSharp.ImColor _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImColor.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImColor.__Internal*) __Instance) = *((global::DearImguiSharp.ImColor.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImColor __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVec4 Value
        {
            get
            {
                return global::DearImguiSharp.ImVec4.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImColor.__Internal*) __Instance)->Value));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImColor.__Internal*)__Instance)->Value = *(global::DearImguiSharp.ImVec4.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImDrawCmd : IDisposable
    {
        public partial struct __Internal
        {
            internal uint ElemCount;

            internal global::DearImguiSharp.ImVec4.__Internal ClipRect;

            internal global::System.IntPtr TextureId;

            internal uint VtxOffset;

            internal uint IdxOffset;

            internal global::System.IntPtr UserCallback;

            internal global::System.IntPtr UserCallbackData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImDrawCmd@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawCmd> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawCmd>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImDrawCmd __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawCmd(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImDrawCmd __CreateInstance(global::DearImguiSharp.ImDrawCmd.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawCmd(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImDrawCmd.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawCmd.__Internal));
            *(global::DearImguiSharp.ImDrawCmd.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImDrawCmd(global::DearImguiSharp.ImDrawCmd.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImDrawCmd(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImDrawCmd()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawCmd.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImDrawCmd(global::DearImguiSharp.ImDrawCmd _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawCmd.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImDrawCmd.__Internal*) __Instance) = *((global::DearImguiSharp.ImDrawCmd.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImDrawCmd __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ElemCount
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawCmd.__Internal*) __Instance)->ElemCount;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawCmd.__Internal*)__Instance)->ElemCount = value;
            }
        }

        public global::DearImguiSharp.ImVec4 ClipRect
        {
            get
            {
                return global::DearImguiSharp.ImVec4.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawCmd.__Internal*) __Instance)->ClipRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawCmd.__Internal*)__Instance)->ClipRect = *(global::DearImguiSharp.ImVec4.__Internal*) value.__Instance;
            }
        }

        public global::System.IntPtr TextureId
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawCmd.__Internal*) __Instance)->TextureId;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawCmd.__Internal*)__Instance)->TextureId = (global::System.IntPtr) value;
            }
        }

        public uint VtxOffset
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawCmd.__Internal*) __Instance)->VtxOffset;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawCmd.__Internal*)__Instance)->VtxOffset = value;
            }
        }

        public uint IdxOffset
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawCmd.__Internal*) __Instance)->IdxOffset;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawCmd.__Internal*)__Instance)->IdxOffset = value;
            }
        }

        public global::DearImguiSharp.ImDrawCallback UserCallback
        {
            get
            {
                var __ptr0 = ((global::DearImguiSharp.ImDrawCmd.__Internal*) __Instance)->UserCallback;
                return __ptr0 == IntPtr.Zero? null : (global::DearImguiSharp.ImDrawCallback) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::DearImguiSharp.ImDrawCallback));
            }

            set
            {
                ((global::DearImguiSharp.ImDrawCmd.__Internal*)__Instance)->UserCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr UserCallbackData
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawCmd.__Internal*) __Instance)->UserCallbackData;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawCmd.__Internal*)__Instance)->UserCallbackData = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImDrawVert : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVec2.__Internal pos;

            internal global::DearImguiSharp.ImVec2.__Internal uv;

            internal uint col;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImDrawVert@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawVert> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawVert>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImDrawVert __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawVert(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImDrawVert __CreateInstance(global::DearImguiSharp.ImDrawVert.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawVert(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImDrawVert.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawVert.__Internal));
            *(global::DearImguiSharp.ImDrawVert.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImDrawVert(global::DearImguiSharp.ImDrawVert.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImDrawVert(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImDrawVert()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawVert.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImDrawVert(global::DearImguiSharp.ImDrawVert _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawVert.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImDrawVert.__Internal*) __Instance) = *((global::DearImguiSharp.ImDrawVert.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImDrawVert __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVec2 Pos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawVert.__Internal*) __Instance)->pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawVert.__Internal*)__Instance)->pos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 Uv
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawVert.__Internal*) __Instance)->uv));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawVert.__Internal*)__Instance)->uv = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public uint Col
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawVert.__Internal*) __Instance)->col;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawVert.__Internal*)__Instance)->col = value;
            }
        }
    }

    public unsafe partial class ImDrawChannel : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVectorImDrawCmd.__Internal _CmdBuffer;

            internal global::DearImguiSharp.ImVectorImDrawIdx.__Internal _IdxBuffer;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImDrawChannel@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawChannel> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawChannel>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImDrawChannel __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawChannel(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImDrawChannel __CreateInstance(global::DearImguiSharp.ImDrawChannel.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawChannel(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImDrawChannel.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawChannel.__Internal));
            *(global::DearImguiSharp.ImDrawChannel.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImDrawChannel(global::DearImguiSharp.ImDrawChannel.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImDrawChannel(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImDrawChannel()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawChannel.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImDrawChannel(global::DearImguiSharp.ImDrawChannel _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawChannel.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImDrawChannel.__Internal*) __Instance) = *((global::DearImguiSharp.ImDrawChannel.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImDrawChannel __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVectorImDrawCmd CmdBuffer
        {
            get
            {
                return global::DearImguiSharp.ImVectorImDrawCmd.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawChannel.__Internal*) __Instance)->_CmdBuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawChannel.__Internal*)__Instance)->_CmdBuffer = *(global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImDrawIdx IdxBuffer
        {
            get
            {
                return global::DearImguiSharp.ImVectorImDrawIdx.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawChannel.__Internal*) __Instance)->_IdxBuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawChannel.__Internal*)__Instance)->_IdxBuffer = *(global::DearImguiSharp.ImVectorImDrawIdx.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImDrawListSplitter : IDisposable
    {
        public partial struct __Internal
        {
            internal int _Current;

            internal int _Count;

            internal global::DearImguiSharp.ImVectorImDrawChannel.__Internal _Channels;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImDrawListSplitter@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawListSplitter> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawListSplitter>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImDrawListSplitter __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawListSplitter(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImDrawListSplitter __CreateInstance(global::DearImguiSharp.ImDrawListSplitter.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawListSplitter(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImDrawListSplitter.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawListSplitter.__Internal));
            *(global::DearImguiSharp.ImDrawListSplitter.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImDrawListSplitter(global::DearImguiSharp.ImDrawListSplitter.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImDrawListSplitter(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImDrawListSplitter()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawListSplitter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImDrawListSplitter(global::DearImguiSharp.ImDrawListSplitter _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawListSplitter.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImDrawListSplitter.__Internal*) __Instance) = *((global::DearImguiSharp.ImDrawListSplitter.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImDrawListSplitter __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Current
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawListSplitter.__Internal*) __Instance)->_Current;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawListSplitter.__Internal*)__Instance)->_Current = value;
            }
        }

        public int Count
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawListSplitter.__Internal*) __Instance)->_Count;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawListSplitter.__Internal*)__Instance)->_Count = value;
            }
        }

        public global::DearImguiSharp.ImVectorImDrawChannel Channels
        {
            get
            {
                return global::DearImguiSharp.ImVectorImDrawChannel.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawListSplitter.__Internal*) __Instance)->_Channels));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawListSplitter.__Internal*)__Instance)->_Channels = *(global::DearImguiSharp.ImVectorImDrawChannel.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImDrawList : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVectorImDrawCmd.__Internal CmdBuffer;

            internal global::DearImguiSharp.ImVectorImDrawIdx.__Internal IdxBuffer;

            internal global::DearImguiSharp.ImVectorImDrawVert.__Internal VtxBuffer;

            internal int Flags;

            internal global::System.IntPtr _Data;

            internal global::System.IntPtr _OwnerName;

            internal uint _VtxCurrentOffset;

            internal uint _VtxCurrentIdx;

            internal global::System.IntPtr _VtxWritePtr;

            internal global::System.IntPtr _IdxWritePtr;

            internal global::DearImguiSharp.ImVectorImVec4.__Internal _ClipRectStack;

            internal global::DearImguiSharp.ImVectorImTextureID.__Internal _TextureIdStack;

            internal global::DearImguiSharp.ImVectorImVec2.__Internal _Path;

            internal global::DearImguiSharp.ImDrawListSplitter.__Internal _Splitter;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImDrawList@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawList> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawList>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImDrawList __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawList(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImDrawList __CreateInstance(global::DearImguiSharp.ImDrawList.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawList(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImDrawList.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawList.__Internal));
            *(global::DearImguiSharp.ImDrawList.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImDrawList(global::DearImguiSharp.ImDrawList.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImDrawList(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImDrawList()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImDrawList(global::DearImguiSharp.ImDrawList _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawList.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImDrawList.__Internal*) __Instance) = *((global::DearImguiSharp.ImDrawList.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImDrawList __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVectorImDrawCmd CmdBuffer
        {
            get
            {
                return global::DearImguiSharp.ImVectorImDrawCmd.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->CmdBuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->CmdBuffer = *(global::DearImguiSharp.ImVectorImDrawCmd.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImDrawIdx IdxBuffer
        {
            get
            {
                return global::DearImguiSharp.ImVectorImDrawIdx.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->IdxBuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->IdxBuffer = *(global::DearImguiSharp.ImVectorImDrawIdx.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImDrawVert VtxBuffer
        {
            get
            {
                return global::DearImguiSharp.ImVectorImDrawVert.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->VtxBuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->VtxBuffer = *(global::DearImguiSharp.ImVectorImDrawVert.__Internal*) value.__Instance;
            }
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->Flags = value;
            }
        }

        public global::DearImguiSharp.ImDrawListSharedData Data
        {
            get
            {
                global::DearImguiSharp.ImDrawListSharedData __result0;
                if (((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_Data == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImDrawListSharedData.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_Data))
                    __result0 = (global::DearImguiSharp.ImDrawListSharedData) global::DearImguiSharp.ImDrawListSharedData.NativeToManagedMap[((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_Data];
                else __result0 = global::DearImguiSharp.ImDrawListSharedData.__CreateInstance(((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_Data);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_Data = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public string OwnerName
        {
            get
            {
                if (((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_OwnerName == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_OwnerName;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_OwnerName, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_OwnerName = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public uint VtxCurrentOffset
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_VtxCurrentOffset;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_VtxCurrentOffset = value;
            }
        }

        public uint VtxCurrentIdx
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_VtxCurrentIdx;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_VtxCurrentIdx = value;
            }
        }

        public global::DearImguiSharp.ImDrawVert VtxWritePtr
        {
            get
            {
                global::DearImguiSharp.ImDrawVert __result0;
                if (((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_VtxWritePtr == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImDrawVert.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_VtxWritePtr))
                    __result0 = (global::DearImguiSharp.ImDrawVert) global::DearImguiSharp.ImDrawVert.NativeToManagedMap[((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_VtxWritePtr];
                else __result0 = global::DearImguiSharp.ImDrawVert.__CreateInstance(((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_VtxWritePtr);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_VtxWritePtr = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public ushort* IdxWritePtr
        {
            get
            {
                return (ushort*) ((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_IdxWritePtr;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_IdxWritePtr = (global::System.IntPtr) value;
            }
        }

        public global::DearImguiSharp.ImVectorImVec4 ClipRectStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImVec4.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_ClipRectStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_ClipRectStack = *(global::DearImguiSharp.ImVectorImVec4.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImTextureID TextureIdStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImTextureID.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_TextureIdStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_TextureIdStack = *(global::DearImguiSharp.ImVectorImTextureID.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImVec2 Path
        {
            get
            {
                return global::DearImguiSharp.ImVectorImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_Path));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_Path = *(global::DearImguiSharp.ImVectorImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImDrawListSplitter Splitter
        {
            get
            {
                return global::DearImguiSharp.ImDrawListSplitter.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawList.__Internal*) __Instance)->_Splitter));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawList.__Internal*)__Instance)->_Splitter = *(global::DearImguiSharp.ImDrawListSplitter.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImDrawData : IDisposable
    {
        public partial struct __Internal
        {
            internal byte Valid;

            internal global::System.IntPtr CmdLists;

            internal int CmdListsCount;

            internal int TotalIdxCount;

            internal int TotalVtxCount;

            internal global::DearImguiSharp.ImVec2.__Internal DisplayPos;

            internal global::DearImguiSharp.ImVec2.__Internal DisplaySize;

            internal global::DearImguiSharp.ImVec2.__Internal FramebufferScale;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImDrawData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImDrawData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImDrawData __CreateInstance(global::DearImguiSharp.ImDrawData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImDrawData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawData.__Internal));
            *(global::DearImguiSharp.ImDrawData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImDrawData(global::DearImguiSharp.ImDrawData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImDrawData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImDrawData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImDrawData(global::DearImguiSharp.ImDrawData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImDrawData.__Internal*) __Instance) = *((global::DearImguiSharp.ImDrawData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImDrawData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool Valid
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->Valid != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawData.__Internal*)__Instance)->Valid = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImDrawList CmdLists
        {
            get
            {
                global::DearImguiSharp.ImDrawList __result0;
                if (((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->CmdLists == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImDrawList.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->CmdLists))
                    __result0 = (global::DearImguiSharp.ImDrawList) global::DearImguiSharp.ImDrawList.NativeToManagedMap[((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->CmdLists];
                else __result0 = global::DearImguiSharp.ImDrawList.__CreateInstance(((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->CmdLists);
                return __result0;
            }

            set
            {
                var __value = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
                ((global::DearImguiSharp.ImDrawData.__Internal*)__Instance)->CmdLists = new global::System.IntPtr(&__value);
            }
        }

        public int CmdListsCount
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->CmdListsCount;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawData.__Internal*)__Instance)->CmdListsCount = value;
            }
        }

        public int TotalIdxCount
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->TotalIdxCount;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawData.__Internal*)__Instance)->TotalIdxCount = value;
            }
        }

        public int TotalVtxCount
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->TotalVtxCount;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawData.__Internal*)__Instance)->TotalVtxCount = value;
            }
        }

        public global::DearImguiSharp.ImVec2 DisplayPos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->DisplayPos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawData.__Internal*)__Instance)->DisplayPos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 DisplaySize
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->DisplaySize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawData.__Internal*)__Instance)->DisplaySize = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 FramebufferScale
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawData.__Internal*) __Instance)->FramebufferScale));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawData.__Internal*)__Instance)->FramebufferScale = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImFontConfig : IDisposable
    {
        public partial struct __Internal
        {
            internal global::System.IntPtr FontData;

            internal int FontDataSize;

            internal byte FontDataOwnedByAtlas;

            internal int FontNo;

            internal float SizePixels;

            internal int OversampleH;

            internal int OversampleV;

            internal byte PixelSnapH;

            internal global::DearImguiSharp.ImVec2.__Internal GlyphExtraSpacing;

            internal global::DearImguiSharp.ImVec2.__Internal GlyphOffset;

            internal global::System.IntPtr GlyphRanges;

            internal float GlyphMinAdvanceX;

            internal float GlyphMaxAdvanceX;

            internal byte MergeMode;

            internal uint RasterizerFlags;

            internal float RasterizerMultiply;

            internal ushort EllipsisChar;

            internal fixed sbyte Name[40];

            internal global::System.IntPtr DstFont;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImFontConfig@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontConfig> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontConfig>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImFontConfig __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontConfig(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImFontConfig __CreateInstance(global::DearImguiSharp.ImFontConfig.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontConfig(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImFontConfig.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontConfig.__Internal));
            *(global::DearImguiSharp.ImFontConfig.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImFontConfig(global::DearImguiSharp.ImFontConfig.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImFontConfig(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImFontConfig()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontConfig.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImFontConfig(global::DearImguiSharp.ImFontConfig _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontConfig.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance) = *((global::DearImguiSharp.ImFontConfig.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImFontConfig __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr FontData
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->FontData;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->FontData = (global::System.IntPtr) value;
            }
        }

        public int FontDataSize
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->FontDataSize;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->FontDataSize = value;
            }
        }

        public bool FontDataOwnedByAtlas
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->FontDataOwnedByAtlas != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->FontDataOwnedByAtlas = (byte) (value ? 1 : 0);
            }
        }

        public int FontNo
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->FontNo;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->FontNo = value;
            }
        }

        public float SizePixels
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->SizePixels;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->SizePixels = value;
            }
        }

        public int OversampleH
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->OversampleH;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->OversampleH = value;
            }
        }

        public int OversampleV
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->OversampleV;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->OversampleV = value;
            }
        }

        public bool PixelSnapH
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->PixelSnapH != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->PixelSnapH = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImVec2 GlyphExtraSpacing
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->GlyphExtraSpacing));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->GlyphExtraSpacing = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 GlyphOffset
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->GlyphOffset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->GlyphOffset = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public ushort* GlyphRanges
        {
            get
            {
                return (ushort*) ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->GlyphRanges;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->GlyphRanges = (global::System.IntPtr) value;
            }
        }

        public float GlyphMinAdvanceX
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->GlyphMinAdvanceX;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->GlyphMinAdvanceX = value;
            }
        }

        public float GlyphMaxAdvanceX
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->GlyphMaxAdvanceX;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->GlyphMaxAdvanceX = value;
            }
        }

        public bool MergeMode
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->MergeMode != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->MergeMode = (byte) (value ? 1 : 0);
            }
        }

        public uint RasterizerFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->RasterizerFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->RasterizerFlags = value;
            }
        }

        public float RasterizerMultiply
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->RasterizerMultiply;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->RasterizerMultiply = value;
            }
        }

        public ushort EllipsisChar
        {
            get
            {
                return ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->EllipsisChar;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->EllipsisChar = value;
            }
        }

        public sbyte[] Name
        {
            get
            {
                sbyte[] __value = null;
                if (((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->Name != null)
                {
                    __value = new sbyte[40];
                    for (int i = 0; i < 40; i++)
                        __value[i] = ((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->Name[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 40; i++)
                        ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->Name[i] = value[i];
                }
            }
        }

        public global::DearImguiSharp.ImFont DstFont
        {
            get
            {
                global::DearImguiSharp.ImFont __result0;
                if (((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->DstFont == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->DstFont))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->DstFont];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(((global::DearImguiSharp.ImFontConfig.__Internal*) __Instance)->DstFont);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontConfig.__Internal*)__Instance)->DstFont = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImFontGlyph : IDisposable
    {
        public partial struct __Internal
        {
            internal ushort Codepoint;

            internal float AdvanceX;

            internal float X0;

            internal float Y0;

            internal float X1;

            internal float Y1;

            internal float U0;

            internal float V0;

            internal float U1;

            internal float V1;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImFontGlyph@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontGlyph> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontGlyph>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImFontGlyph __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontGlyph(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImFontGlyph __CreateInstance(global::DearImguiSharp.ImFontGlyph.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontGlyph(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImFontGlyph.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontGlyph.__Internal));
            *(global::DearImguiSharp.ImFontGlyph.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImFontGlyph(global::DearImguiSharp.ImFontGlyph.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImFontGlyph(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImFontGlyph()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontGlyph.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImFontGlyph(global::DearImguiSharp.ImFontGlyph _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontGlyph.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance) = *((global::DearImguiSharp.ImFontGlyph.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImFontGlyph __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ushort Codepoint
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->Codepoint;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->Codepoint = value;
            }
        }

        public float AdvanceX
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->AdvanceX;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->AdvanceX = value;
            }
        }

        public float X0
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->X0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->X0 = value;
            }
        }

        public float Y0
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->Y0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->Y0 = value;
            }
        }

        public float X1
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->X1;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->X1 = value;
            }
        }

        public float Y1
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->Y1;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->Y1 = value;
            }
        }

        public float U0
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->U0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->U0 = value;
            }
        }

        public float V0
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->V0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->V0 = value;
            }
        }

        public float U1
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->U1;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->U1 = value;
            }
        }

        public float V1
        {
            get
            {
                return ((global::DearImguiSharp.ImFontGlyph.__Internal*) __Instance)->V1;
            }

            set
            {
                ((global::DearImguiSharp.ImFontGlyph.__Internal*)__Instance)->V1 = value;
            }
        }
    }

    public unsafe partial class ImFontGlyphRangesBuilder : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVectorImU32.__Internal UsedChars;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImFontGlyphRangesBuilder@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontGlyphRangesBuilder> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontGlyphRangesBuilder>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImFontGlyphRangesBuilder __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontGlyphRangesBuilder(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImFontGlyphRangesBuilder __CreateInstance(global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontGlyphRangesBuilder(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal));
            *(global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImFontGlyphRangesBuilder(global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImFontGlyphRangesBuilder(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImFontGlyphRangesBuilder()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImFontGlyphRangesBuilder(global::DearImguiSharp.ImFontGlyphRangesBuilder _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal*) __Instance) = *((global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImFontGlyphRangesBuilder __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVectorImU32 UsedChars
        {
            get
            {
                return global::DearImguiSharp.ImVectorImU32.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal*) __Instance)->UsedChars));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFontGlyphRangesBuilder.__Internal*)__Instance)->UsedChars = *(global::DearImguiSharp.ImVectorImU32.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImFontAtlasCustomRect : IDisposable
    {
        public partial struct __Internal
        {
            internal uint ID;

            internal ushort Width;

            internal ushort Height;

            internal ushort X;

            internal ushort Y;

            internal float GlyphAdvanceX;

            internal global::DearImguiSharp.ImVec2.__Internal GlyphOffset;

            internal global::System.IntPtr Font;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImFontAtlasCustomRect@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontAtlasCustomRect> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontAtlasCustomRect>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImFontAtlasCustomRect __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontAtlasCustomRect(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImFontAtlasCustomRect __CreateInstance(global::DearImguiSharp.ImFontAtlasCustomRect.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontAtlasCustomRect(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImFontAtlasCustomRect.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontAtlasCustomRect.__Internal));
            *(global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImFontAtlasCustomRect(global::DearImguiSharp.ImFontAtlasCustomRect.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImFontAtlasCustomRect(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImFontAtlasCustomRect()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontAtlasCustomRect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImFontAtlasCustomRect(global::DearImguiSharp.ImFontAtlasCustomRect _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontAtlasCustomRect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance) = *((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImFontAtlasCustomRect __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ID
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->ID;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*)__Instance)->ID = value;
            }
        }

        public ushort Width
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->Width;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*)__Instance)->Width = value;
            }
        }

        public ushort Height
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->Height;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*)__Instance)->Height = value;
            }
        }

        public ushort X
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->X;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*)__Instance)->X = value;
            }
        }

        public ushort Y
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->Y;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*)__Instance)->Y = value;
            }
        }

        public float GlyphAdvanceX
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->GlyphAdvanceX;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*)__Instance)->GlyphAdvanceX = value;
            }
        }

        public global::DearImguiSharp.ImVec2 GlyphOffset
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->GlyphOffset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*)__Instance)->GlyphOffset = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImFont Font
        {
            get
            {
                global::DearImguiSharp.ImFont __result0;
                if (((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->Font == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->Font))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->Font];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*) __Instance)->Font);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlasCustomRect.__Internal*)__Instance)->Font = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }
    }

    public unsafe partial class ImFontAtlas : IDisposable
    {
        public partial struct __Internal
        {
            internal byte Locked;

            internal int Flags;

            internal global::System.IntPtr TexID;

            internal int TexDesiredWidth;

            internal int TexGlyphPadding;

            internal global::System.IntPtr TexPixelsAlpha8;

            internal global::System.IntPtr TexPixelsRGBA32;

            internal int TexWidth;

            internal int TexHeight;

            internal global::DearImguiSharp.ImVec2.__Internal TexUvScale;

            internal global::DearImguiSharp.ImVec2.__Internal TexUvWhitePixel;

            internal global::DearImguiSharp.ImVectorImFontPtr.__Internal Fonts;

            internal global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal CustomRects;

            internal global::DearImguiSharp.ImVectorImFontConfig.__Internal ConfigData;

            internal fixed int CustomRectIds[1];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImFontAtlas@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontAtlas> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFontAtlas>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImFontAtlas __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontAtlas(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImFontAtlas __CreateInstance(global::DearImguiSharp.ImFontAtlas.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFontAtlas(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImFontAtlas.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontAtlas.__Internal));
            *(global::DearImguiSharp.ImFontAtlas.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImFontAtlas(global::DearImguiSharp.ImFontAtlas.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImFontAtlas(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImFontAtlas()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontAtlas.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImFontAtlas(global::DearImguiSharp.ImFontAtlas _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFontAtlas.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance) = *((global::DearImguiSharp.ImFontAtlas.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImFontAtlas __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool Locked
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->Locked != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->Locked = (byte) (value ? 1 : 0);
            }
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->Flags = value;
            }
        }

        public global::System.IntPtr TexID
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->TexID;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->TexID = (global::System.IntPtr) value;
            }
        }

        public int TexDesiredWidth
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->TexDesiredWidth;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->TexDesiredWidth = value;
            }
        }

        public int TexGlyphPadding
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->TexGlyphPadding;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->TexGlyphPadding = value;
            }
        }

        public byte* TexPixelsAlpha8
        {
            get
            {
                return (byte*) ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->TexPixelsAlpha8;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->TexPixelsAlpha8 = (global::System.IntPtr) value;
            }
        }

        public uint* TexPixelsRGBA32
        {
            get
            {
                return (uint*) ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->TexPixelsRGBA32;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->TexPixelsRGBA32 = (global::System.IntPtr) value;
            }
        }

        public int TexWidth
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->TexWidth;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->TexWidth = value;
            }
        }

        public int TexHeight
        {
            get
            {
                return ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->TexHeight;
            }

            set
            {
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->TexHeight = value;
            }
        }

        public global::DearImguiSharp.ImVec2 TexUvScale
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->TexUvScale));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->TexUvScale = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 TexUvWhitePixel
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->TexUvWhitePixel));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->TexUvWhitePixel = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImFontPtr Fonts
        {
            get
            {
                return global::DearImguiSharp.ImVectorImFontPtr.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->Fonts));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->Fonts = *(global::DearImguiSharp.ImVectorImFontPtr.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImFontAtlasCustomRect CustomRects
        {
            get
            {
                return global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->CustomRects));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->CustomRects = *(global::DearImguiSharp.ImVectorImFontAtlasCustomRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImFontConfig ConfigData
        {
            get
            {
                return global::DearImguiSharp.ImVectorImFontConfig.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->ConfigData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->ConfigData = *(global::DearImguiSharp.ImVectorImFontConfig.__Internal*) value.__Instance;
            }
        }

        public int[] CustomRectIds
        {
            get
            {
                int[] __value = null;
                if (((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->CustomRectIds != null)
                {
                    __value = new int[1];
                    for (int i = 0; i < 1; i++)
                        __value[i] = ((global::DearImguiSharp.ImFontAtlas.__Internal*) __Instance)->CustomRectIds[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 1; i++)
                        ((global::DearImguiSharp.ImFontAtlas.__Internal*)__Instance)->CustomRectIds[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class ImFont : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVector_float.__Internal IndexAdvanceX;

            internal float FallbackAdvanceX;

            internal float FontSize;

            internal global::DearImguiSharp.ImVectorImWchar.__Internal IndexLookup;

            internal global::DearImguiSharp.ImVectorImFontGlyph.__Internal Glyphs;

            internal global::System.IntPtr FallbackGlyph;

            internal global::DearImguiSharp.ImVec2.__Internal DisplayOffset;

            internal global::System.IntPtr ContainerAtlas;

            internal global::System.IntPtr ConfigData;

            internal short ConfigDataCount;

            internal ushort FallbackChar;

            internal ushort EllipsisChar;

            internal byte DirtyLookupTables;

            internal float Scale;

            internal float Ascent;

            internal float Descent;

            internal int MetricsTotalSurface;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImFont@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFont> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImFont>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImFont __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFont(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImFont __CreateInstance(global::DearImguiSharp.ImFont.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImFont(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImFont.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFont.__Internal));
            *(global::DearImguiSharp.ImFont.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImFont(global::DearImguiSharp.ImFont.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImFont(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImFont()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFont.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImFont(global::DearImguiSharp.ImFont _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImFont.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImFont.__Internal*) __Instance) = *((global::DearImguiSharp.ImFont.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImFont __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVector_float IndexAdvanceX
        {
            get
            {
                return global::DearImguiSharp.ImVector_float.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFont.__Internal*) __Instance)->IndexAdvanceX));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->IndexAdvanceX = *(global::DearImguiSharp.ImVector_float.__Internal*) value.__Instance;
            }
        }

        public float FallbackAdvanceX
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->FallbackAdvanceX;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->FallbackAdvanceX = value;
            }
        }

        public float FontSize
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->FontSize;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->FontSize = value;
            }
        }

        public global::DearImguiSharp.ImVectorImWchar IndexLookup
        {
            get
            {
                return global::DearImguiSharp.ImVectorImWchar.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFont.__Internal*) __Instance)->IndexLookup));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->IndexLookup = *(global::DearImguiSharp.ImVectorImWchar.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImFontGlyph Glyphs
        {
            get
            {
                return global::DearImguiSharp.ImVectorImFontGlyph.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFont.__Internal*) __Instance)->Glyphs));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->Glyphs = *(global::DearImguiSharp.ImVectorImFontGlyph.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImFontGlyph FallbackGlyph
        {
            get
            {
                global::DearImguiSharp.ImFontGlyph __result0;
                if (((global::DearImguiSharp.ImFont.__Internal*) __Instance)->FallbackGlyph == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFontGlyph.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImFont.__Internal*) __Instance)->FallbackGlyph))
                    __result0 = (global::DearImguiSharp.ImFontGlyph) global::DearImguiSharp.ImFontGlyph.NativeToManagedMap[((global::DearImguiSharp.ImFont.__Internal*) __Instance)->FallbackGlyph];
                else __result0 = global::DearImguiSharp.ImFontGlyph.__CreateInstance(((global::DearImguiSharp.ImFont.__Internal*) __Instance)->FallbackGlyph);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->FallbackGlyph = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 DisplayOffset
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImFont.__Internal*) __Instance)->DisplayOffset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->DisplayOffset = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImFontAtlas ContainerAtlas
        {
            get
            {
                global::DearImguiSharp.ImFontAtlas __result0;
                if (((global::DearImguiSharp.ImFont.__Internal*) __Instance)->ContainerAtlas == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFontAtlas.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImFont.__Internal*) __Instance)->ContainerAtlas))
                    __result0 = (global::DearImguiSharp.ImFontAtlas) global::DearImguiSharp.ImFontAtlas.NativeToManagedMap[((global::DearImguiSharp.ImFont.__Internal*) __Instance)->ContainerAtlas];
                else __result0 = global::DearImguiSharp.ImFontAtlas.__CreateInstance(((global::DearImguiSharp.ImFont.__Internal*) __Instance)->ContainerAtlas);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->ContainerAtlas = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImFontConfig ConfigData
        {
            get
            {
                global::DearImguiSharp.ImFontConfig __result0;
                if (((global::DearImguiSharp.ImFont.__Internal*) __Instance)->ConfigData == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFontConfig.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImFont.__Internal*) __Instance)->ConfigData))
                    __result0 = (global::DearImguiSharp.ImFontConfig) global::DearImguiSharp.ImFontConfig.NativeToManagedMap[((global::DearImguiSharp.ImFont.__Internal*) __Instance)->ConfigData];
                else __result0 = global::DearImguiSharp.ImFontConfig.__CreateInstance(((global::DearImguiSharp.ImFont.__Internal*) __Instance)->ConfigData);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->ConfigData = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public short ConfigDataCount
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->ConfigDataCount;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->ConfigDataCount = value;
            }
        }

        public ushort FallbackChar
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->FallbackChar;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->FallbackChar = value;
            }
        }

        public ushort EllipsisChar
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->EllipsisChar;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->EllipsisChar = value;
            }
        }

        public bool DirtyLookupTables
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->DirtyLookupTables != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->DirtyLookupTables = (byte) (value ? 1 : 0);
            }
        }

        public float Scale
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->Scale;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->Scale = value;
            }
        }

        public float Ascent
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->Ascent;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->Ascent = value;
            }
        }

        public float Descent
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->Descent;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->Descent = value;
            }
        }

        public int MetricsTotalSurface
        {
            get
            {
                return ((global::DearImguiSharp.ImFont.__Internal*) __Instance)->MetricsTotalSurface;
            }

            set
            {
                ((global::DearImguiSharp.ImFont.__Internal*)__Instance)->MetricsTotalSurface = value;
            }
        }
    }

    public unsafe partial class ImBoolVector : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVector_int.__Internal Storage;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImBoolVector@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImBoolVector> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImBoolVector>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImBoolVector __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImBoolVector(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImBoolVector __CreateInstance(global::DearImguiSharp.ImBoolVector.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImBoolVector(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImBoolVector.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImBoolVector.__Internal));
            *(global::DearImguiSharp.ImBoolVector.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImBoolVector(global::DearImguiSharp.ImBoolVector.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImBoolVector(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImBoolVector()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImBoolVector.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImBoolVector(global::DearImguiSharp.ImBoolVector _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImBoolVector.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImBoolVector.__Internal*) __Instance) = *((global::DearImguiSharp.ImBoolVector.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImBoolVector __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVector_int Storage
        {
            get
            {
                return global::DearImguiSharp.ImVector_int.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImBoolVector.__Internal*) __Instance)->Storage));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImBoolVector.__Internal*)__Instance)->Storage = *(global::DearImguiSharp.ImVector_int.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImVec1 : IDisposable
    {
        public partial struct __Internal
        {
            internal float x;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVec1@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVec1> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVec1>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVec1 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVec1(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVec1 __CreateInstance(global::DearImguiSharp.ImVec1.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVec1(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVec1.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec1.__Internal));
            *(global::DearImguiSharp.ImVec1.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVec1(global::DearImguiSharp.ImVec1.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVec1(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVec1()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec1.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVec1(global::DearImguiSharp.ImVec1 _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec1.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVec1.__Internal*) __Instance) = *((global::DearImguiSharp.ImVec1.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVec1 __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float X
        {
            get
            {
                return ((global::DearImguiSharp.ImVec1.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::DearImguiSharp.ImVec1.__Internal*)__Instance)->x = value;
            }
        }
    }

    public unsafe partial class ImVec2ih : IDisposable
    {
        public partial struct __Internal
        {
            internal short x;

            internal short y;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImVec2ih@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVec2ih> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImVec2ih>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImVec2ih __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVec2ih(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImVec2ih __CreateInstance(global::DearImguiSharp.ImVec2ih.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImVec2ih(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImVec2ih.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec2ih.__Internal));
            *(global::DearImguiSharp.ImVec2ih.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImVec2ih(global::DearImguiSharp.ImVec2ih.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImVec2ih(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImVec2ih()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec2ih.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImVec2ih(global::DearImguiSharp.ImVec2ih _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImVec2ih.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImVec2ih.__Internal*) __Instance) = *((global::DearImguiSharp.ImVec2ih.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImVec2ih __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public short X
        {
            get
            {
                return ((global::DearImguiSharp.ImVec2ih.__Internal*) __Instance)->x;
            }

            set
            {
                ((global::DearImguiSharp.ImVec2ih.__Internal*)__Instance)->x = value;
            }
        }

        public short Y
        {
            get
            {
                return ((global::DearImguiSharp.ImVec2ih.__Internal*) __Instance)->y;
            }

            set
            {
                ((global::DearImguiSharp.ImVec2ih.__Internal*)__Instance)->y = value;
            }
        }
    }

    public unsafe partial class ImRect : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVec2.__Internal Min;

            internal global::DearImguiSharp.ImVec2.__Internal Max;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImRect@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImRect> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImRect>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImRect __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImRect(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImRect __CreateInstance(global::DearImguiSharp.ImRect.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImRect(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImRect.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImRect.__Internal));
            *(global::DearImguiSharp.ImRect.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImRect(global::DearImguiSharp.ImRect.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImRect(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImRect()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImRect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImRect(global::DearImguiSharp.ImRect _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImRect.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImRect.__Internal*) __Instance) = *((global::DearImguiSharp.ImRect.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImRect __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVec2 Min
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImRect.__Internal*) __Instance)->Min));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImRect.__Internal*)__Instance)->Min = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 Max
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImRect.__Internal*) __Instance)->Max));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImRect.__Internal*)__Instance)->Max = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiDataTypeInfo : IDisposable
    {
        public partial struct __Internal
        {
            internal ulong Size;

            internal global::System.IntPtr PrintFmt;

            internal global::System.IntPtr ScanFmt;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiDataTypeInfo@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiDataTypeInfo> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiDataTypeInfo>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiDataTypeInfo __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiDataTypeInfo(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiDataTypeInfo __CreateInstance(global::DearImguiSharp.ImGuiDataTypeInfo.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiDataTypeInfo(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiDataTypeInfo.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiDataTypeInfo.__Internal));
            *(global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiDataTypeInfo(global::DearImguiSharp.ImGuiDataTypeInfo.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiDataTypeInfo(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiDataTypeInfo()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiDataTypeInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiDataTypeInfo(global::DearImguiSharp.ImGuiDataTypeInfo _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiDataTypeInfo.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiDataTypeInfo __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public ulong Size
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) __Instance)->Size;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*)__Instance)->Size = value;
            }
        }

        public string PrintFmt
        {
            get
            {
                if (((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) __Instance)->PrintFmt == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) __Instance)->PrintFmt;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) __Instance)->PrintFmt, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*)__Instance)->PrintFmt = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public string ScanFmt
        {
            get
            {
                if (((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) __Instance)->ScanFmt == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) __Instance)->ScanFmt;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*) __Instance)->ScanFmt, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImGuiDataTypeInfo.__Internal*)__Instance)->ScanFmt = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }
    }

    public unsafe partial class ImGuiColorMod : IDisposable
    {
        public partial struct __Internal
        {
            internal int Col;

            internal global::DearImguiSharp.ImVec4.__Internal BackupValue;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiColorMod@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiColorMod> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiColorMod>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiColorMod __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiColorMod(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiColorMod __CreateInstance(global::DearImguiSharp.ImGuiColorMod.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiColorMod(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiColorMod.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiColorMod.__Internal));
            *(global::DearImguiSharp.ImGuiColorMod.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiColorMod(global::DearImguiSharp.ImGuiColorMod.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiColorMod(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiColorMod()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiColorMod.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiColorMod(global::DearImguiSharp.ImGuiColorMod _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiColorMod.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiColorMod.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiColorMod.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiColorMod __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Col
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColorMod.__Internal*) __Instance)->Col;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColorMod.__Internal*)__Instance)->Col = value;
            }
        }

        public global::DearImguiSharp.ImVec4 BackupValue
        {
            get
            {
                return global::DearImguiSharp.ImVec4.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiColorMod.__Internal*) __Instance)->BackupValue));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiColorMod.__Internal*)__Instance)->BackupValue = *(global::DearImguiSharp.ImVec4.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiStyleMod : IDisposable
    {
        public partial struct __Internal
        {
            internal int VarIdx;

            internal fixed int BackupInt[2];

            internal fixed float BackupFloat[2];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiStyleMod@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiStyleMod> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiStyleMod>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiStyleMod __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiStyleMod(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiStyleMod __CreateInstance(global::DearImguiSharp.ImGuiStyleMod.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiStyleMod(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiStyleMod.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStyleMod.__Internal));
            *(global::DearImguiSharp.ImGuiStyleMod.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiStyleMod(global::DearImguiSharp.ImGuiStyleMod.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiStyleMod(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiStyleMod()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStyleMod.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiStyleMod(global::DearImguiSharp.ImGuiStyleMod _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStyleMod.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiStyleMod.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiStyleMod.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiStyleMod __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int VarIdx
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStyleMod.__Internal*) __Instance)->VarIdx;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStyleMod.__Internal*)__Instance)->VarIdx = value;
            }
        }

        public int[] BackupInt
        {
            get
            {
                int[] __value = null;
                if (((global::DearImguiSharp.ImGuiStyleMod.__Internal*) __Instance)->BackupInt != null)
                {
                    __value = new int[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiStyleMod.__Internal*) __Instance)->BackupInt[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((global::DearImguiSharp.ImGuiStyleMod.__Internal*)__Instance)->BackupInt[i] = value[i];
                }
            }
        }

        public float[] BackupFloat
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiStyleMod.__Internal*) __Instance)->BackupFloat != null)
                {
                    __value = new float[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiStyleMod.__Internal*) __Instance)->BackupFloat[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((global::DearImguiSharp.ImGuiStyleMod.__Internal*)__Instance)->BackupFloat[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class ImGuiGroupData : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVec2.__Internal BackupCursorPos;

            internal global::DearImguiSharp.ImVec2.__Internal BackupCursorMaxPos;

            internal global::DearImguiSharp.ImVec1.__Internal BackupIndent;

            internal global::DearImguiSharp.ImVec1.__Internal BackupGroupOffset;

            internal global::DearImguiSharp.ImVec2.__Internal BackupCurrLineSize;

            internal float BackupCurrLineTextBaseOffset;

            internal uint BackupActiveIdIsAlive;

            internal byte BackupActiveIdPreviousFrameIsAlive;

            internal byte EmitItem;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiGroupData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiGroupData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiGroupData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiGroupData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiGroupData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiGroupData __CreateInstance(global::DearImguiSharp.ImGuiGroupData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiGroupData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiGroupData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiGroupData.__Internal));
            *(global::DearImguiSharp.ImGuiGroupData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiGroupData(global::DearImguiSharp.ImGuiGroupData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiGroupData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiGroupData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiGroupData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiGroupData(global::DearImguiSharp.ImGuiGroupData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiGroupData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiGroupData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiGroupData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVec2 BackupCursorPos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance)->BackupCursorPos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiGroupData.__Internal*)__Instance)->BackupCursorPos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 BackupCursorMaxPos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance)->BackupCursorMaxPos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiGroupData.__Internal*)__Instance)->BackupCursorMaxPos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec1 BackupIndent
        {
            get
            {
                return global::DearImguiSharp.ImVec1.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance)->BackupIndent));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiGroupData.__Internal*)__Instance)->BackupIndent = *(global::DearImguiSharp.ImVec1.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec1 BackupGroupOffset
        {
            get
            {
                return global::DearImguiSharp.ImVec1.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance)->BackupGroupOffset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiGroupData.__Internal*)__Instance)->BackupGroupOffset = *(global::DearImguiSharp.ImVec1.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 BackupCurrLineSize
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance)->BackupCurrLineSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiGroupData.__Internal*)__Instance)->BackupCurrLineSize = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public float BackupCurrLineTextBaseOffset
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance)->BackupCurrLineTextBaseOffset;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiGroupData.__Internal*)__Instance)->BackupCurrLineTextBaseOffset = value;
            }
        }

        public uint BackupActiveIdIsAlive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance)->BackupActiveIdIsAlive;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiGroupData.__Internal*)__Instance)->BackupActiveIdIsAlive = value;
            }
        }

        public bool BackupActiveIdPreviousFrameIsAlive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance)->BackupActiveIdPreviousFrameIsAlive != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiGroupData.__Internal*)__Instance)->BackupActiveIdPreviousFrameIsAlive = (byte) (value ? 1 : 0);
            }
        }

        public bool EmitItem
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiGroupData.__Internal*) __Instance)->EmitItem != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiGroupData.__Internal*)__Instance)->EmitItem = (byte) (value ? 1 : 0);
            }
        }
    }

    public unsafe partial class ImGuiMenuColumns : IDisposable
    {
        public partial struct __Internal
        {
            internal float Spacing;

            internal float Width;

            internal float NextWidth;

            internal fixed float Pos[3];

            internal fixed float NextWidths[3];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiMenuColumns@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiMenuColumns> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiMenuColumns>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiMenuColumns __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiMenuColumns(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiMenuColumns __CreateInstance(global::DearImguiSharp.ImGuiMenuColumns.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiMenuColumns(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiMenuColumns.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiMenuColumns.__Internal));
            *(global::DearImguiSharp.ImGuiMenuColumns.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiMenuColumns(global::DearImguiSharp.ImGuiMenuColumns.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiMenuColumns(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiMenuColumns()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiMenuColumns.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiMenuColumns(global::DearImguiSharp.ImGuiMenuColumns _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiMenuColumns.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiMenuColumns.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiMenuColumns.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiMenuColumns __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float Spacing
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*) __Instance)->Spacing;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*)__Instance)->Spacing = value;
            }
        }

        public float Width
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*) __Instance)->Width;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*)__Instance)->Width = value;
            }
        }

        public float NextWidth
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*) __Instance)->NextWidth;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*)__Instance)->NextWidth = value;
            }
        }

        public float[] Pos
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiMenuColumns.__Internal*) __Instance)->Pos != null)
                {
                    __value = new float[3];
                    for (int i = 0; i < 3; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*) __Instance)->Pos[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*)__Instance)->Pos[i] = value[i];
                }
            }
        }

        public float[] NextWidths
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiMenuColumns.__Internal*) __Instance)->NextWidths != null)
                {
                    __value = new float[3];
                    for (int i = 0; i < 3; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*) __Instance)->NextWidths[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((global::DearImguiSharp.ImGuiMenuColumns.__Internal*)__Instance)->NextWidths[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class ImGuiInputTextState : IDisposable
    {
        public partial struct __Internal
        {
            internal uint ID;

            internal int CurLenW;

            internal int CurLenA;

            internal global::DearImguiSharp.ImVectorImWchar.__Internal TextW;

            internal global::DearImguiSharp.ImVector_char.__Internal TextA;

            internal global::DearImguiSharp.ImVector_char.__Internal InitialTextA;

            internal byte TextAIsValid;

            internal int BufCapacityA;

            internal float ScrollX;

            internal global::DearImguiSharp.STB_TexteditState.__Internal Stb;

            internal float CursorAnim;

            internal byte CursorFollow;

            internal byte SelectedAllMouseLock;

            internal int UserFlags;

            internal global::System.IntPtr UserCallback;

            internal global::System.IntPtr UserCallbackData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiInputTextState@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiInputTextState> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiInputTextState>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiInputTextState __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiInputTextState(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiInputTextState __CreateInstance(global::DearImguiSharp.ImGuiInputTextState.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiInputTextState(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiInputTextState.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiInputTextState.__Internal));
            *(global::DearImguiSharp.ImGuiInputTextState.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiInputTextState(global::DearImguiSharp.ImGuiInputTextState.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiInputTextState(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiInputTextState()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiInputTextState.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiInputTextState(global::DearImguiSharp.ImGuiInputTextState _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiInputTextState.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiInputTextState.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiInputTextState __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ID
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->ID;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->ID = value;
            }
        }

        public int CurLenW
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->CurLenW;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->CurLenW = value;
            }
        }

        public int CurLenA
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->CurLenA;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->CurLenA = value;
            }
        }

        public global::DearImguiSharp.ImVectorImWchar TextW
        {
            get
            {
                return global::DearImguiSharp.ImVectorImWchar.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->TextW));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->TextW = *(global::DearImguiSharp.ImVectorImWchar.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVector_char TextA
        {
            get
            {
                return global::DearImguiSharp.ImVector_char.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->TextA));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->TextA = *(global::DearImguiSharp.ImVector_char.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVector_char InitialTextA
        {
            get
            {
                return global::DearImguiSharp.ImVector_char.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->InitialTextA));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->InitialTextA = *(global::DearImguiSharp.ImVector_char.__Internal*) value.__Instance;
            }
        }

        public bool TextAIsValid
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->TextAIsValid != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->TextAIsValid = (byte) (value ? 1 : 0);
            }
        }

        public int BufCapacityA
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->BufCapacityA;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->BufCapacityA = value;
            }
        }

        public float ScrollX
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->ScrollX;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->ScrollX = value;
            }
        }

        public global::DearImguiSharp.STB_TexteditState Stb
        {
            get
            {
                return global::DearImguiSharp.STB_TexteditState.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->Stb));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->Stb = *(global::DearImguiSharp.STB_TexteditState.__Internal*) value.__Instance;
            }
        }

        public float CursorAnim
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->CursorAnim;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->CursorAnim = value;
            }
        }

        public bool CursorFollow
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->CursorFollow != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->CursorFollow = (byte) (value ? 1 : 0);
            }
        }

        public bool SelectedAllMouseLock
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->SelectedAllMouseLock != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->SelectedAllMouseLock = (byte) (value ? 1 : 0);
            }
        }

        public int UserFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->UserFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->UserFlags = value;
            }
        }

        public global::DearImguiSharp.ImGuiInputTextCallback UserCallback
        {
            get
            {
                var __ptr0 = ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->UserCallback;
                return __ptr0 == IntPtr.Zero? null : (global::DearImguiSharp.ImGuiInputTextCallback) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::DearImguiSharp.ImGuiInputTextCallback));
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->UserCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr UserCallbackData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiInputTextState.__Internal*) __Instance)->UserCallbackData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiInputTextState.__Internal*)__Instance)->UserCallbackData = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImGuiWindowSettings : IDisposable
    {
        public partial struct __Internal
        {
            internal uint ID;

            internal global::DearImguiSharp.ImVec2ih.__Internal Pos;

            internal global::DearImguiSharp.ImVec2ih.__Internal Size;

            internal byte Collapsed;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiWindowSettings@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiWindowSettings> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiWindowSettings>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiWindowSettings __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiWindowSettings(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiWindowSettings __CreateInstance(global::DearImguiSharp.ImGuiWindowSettings.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiWindowSettings(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiWindowSettings.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiWindowSettings.__Internal));
            *(global::DearImguiSharp.ImGuiWindowSettings.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiWindowSettings(global::DearImguiSharp.ImGuiWindowSettings.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiWindowSettings(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiWindowSettings()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiWindowSettings.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiWindowSettings(global::DearImguiSharp.ImGuiWindowSettings _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiWindowSettings.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiWindowSettings.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiWindowSettings.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiWindowSettings __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ID
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowSettings.__Internal*) __Instance)->ID;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowSettings.__Internal*)__Instance)->ID = value;
            }
        }

        public global::DearImguiSharp.ImVec2ih Pos
        {
            get
            {
                return global::DearImguiSharp.ImVec2ih.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowSettings.__Internal*) __Instance)->Pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowSettings.__Internal*)__Instance)->Pos = *(global::DearImguiSharp.ImVec2ih.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2ih Size
        {
            get
            {
                return global::DearImguiSharp.ImVec2ih.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowSettings.__Internal*) __Instance)->Size));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowSettings.__Internal*)__Instance)->Size = *(global::DearImguiSharp.ImVec2ih.__Internal*) value.__Instance;
            }
        }

        public bool Collapsed
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowSettings.__Internal*) __Instance)->Collapsed != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowSettings.__Internal*)__Instance)->Collapsed = (byte) (value ? 1 : 0);
            }
        }
    }

    public unsafe partial class ImGuiSettingsHandler : IDisposable
    {
        public partial struct __Internal
        {
            internal global::System.IntPtr TypeName;

            internal uint TypeHash;

            internal global::System.IntPtr ReadOpenFn;

            internal global::System.IntPtr ReadLineFn;

            internal global::System.IntPtr WriteAllFn;

            internal global::System.IntPtr UserData;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiSettingsHandler@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiSettingsHandler> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiSettingsHandler>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiSettingsHandler __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiSettingsHandler(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiSettingsHandler __CreateInstance(global::DearImguiSharp.ImGuiSettingsHandler.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiSettingsHandler(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiSettingsHandler.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiSettingsHandler.__Internal));
            *(global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiSettingsHandler(global::DearImguiSharp.ImGuiSettingsHandler.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiSettingsHandler(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiSettingsHandler()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiSettingsHandler.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiSettingsHandler(global::DearImguiSharp.ImGuiSettingsHandler _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiSettingsHandler.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiSettingsHandler __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string TypeName
        {
            get
            {
                if (((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) __Instance)->TypeName == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) __Instance)->TypeName;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) __Instance)->TypeName, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*)__Instance)->TypeName = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public uint TypeHash
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) __Instance)->TypeHash;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*)__Instance)->TypeHash = value;
            }
        }

        public global::DearImguiSharp.Delegates.Func_IntPtr_IntPtr_IntPtr_string ReadOpenFn
        {
            get
            {
                var __ptr0 = ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) __Instance)->ReadOpenFn;
                return __ptr0 == IntPtr.Zero? null : (global::DearImguiSharp.Delegates.Func_IntPtr_IntPtr_IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::DearImguiSharp.Delegates.Func_IntPtr_IntPtr_IntPtr_string));
            }

            set
            {
                ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*)__Instance)->ReadOpenFn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::DearImguiSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_string ReadLineFn
        {
            get
            {
                var __ptr0 = ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) __Instance)->ReadLineFn;
                return __ptr0 == IntPtr.Zero? null : (global::DearImguiSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_string) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::DearImguiSharp.Delegates.Action_IntPtr_IntPtr_IntPtr_string));
            }

            set
            {
                ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*)__Instance)->ReadLineFn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::DearImguiSharp.Delegates.Action_IntPtr_IntPtr_IntPtr WriteAllFn
        {
            get
            {
                var __ptr0 = ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) __Instance)->WriteAllFn;
                return __ptr0 == IntPtr.Zero? null : (global::DearImguiSharp.Delegates.Action_IntPtr_IntPtr_IntPtr) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::DearImguiSharp.Delegates.Action_IntPtr_IntPtr_IntPtr));
            }

            set
            {
                ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*)__Instance)->WriteAllFn = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr UserData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*) __Instance)->UserData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiSettingsHandler.__Internal*)__Instance)->UserData = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImGuiPopupData : IDisposable
    {
        public partial struct __Internal
        {
            internal uint PopupId;

            internal global::System.IntPtr Window;

            internal global::System.IntPtr SourceWindow;

            internal int OpenFrameCount;

            internal uint OpenParentId;

            internal global::DearImguiSharp.ImVec2.__Internal OpenPopupPos;

            internal global::DearImguiSharp.ImVec2.__Internal OpenMousePos;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiPopupData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiPopupData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiPopupData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiPopupData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiPopupData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiPopupData __CreateInstance(global::DearImguiSharp.ImGuiPopupData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiPopupData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiPopupData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiPopupData.__Internal));
            *(global::DearImguiSharp.ImGuiPopupData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiPopupData(global::DearImguiSharp.ImGuiPopupData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiPopupData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiPopupData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiPopupData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiPopupData(global::DearImguiSharp.ImGuiPopupData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiPopupData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiPopupData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiPopupData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint PopupId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->PopupId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPopupData.__Internal*)__Instance)->PopupId = value;
            }
        }

        public global::DearImguiSharp.ImGuiWindow Window
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->Window == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->Window))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->Window];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->Window);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPopupData.__Internal*)__Instance)->Window = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow SourceWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->SourceWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->SourceWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->SourceWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->SourceWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPopupData.__Internal*)__Instance)->SourceWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int OpenFrameCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->OpenFrameCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPopupData.__Internal*)__Instance)->OpenFrameCount = value;
            }
        }

        public uint OpenParentId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->OpenParentId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPopupData.__Internal*)__Instance)->OpenParentId = value;
            }
        }

        public global::DearImguiSharp.ImVec2 OpenPopupPos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->OpenPopupPos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiPopupData.__Internal*)__Instance)->OpenPopupPos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 OpenMousePos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiPopupData.__Internal*) __Instance)->OpenMousePos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiPopupData.__Internal*)__Instance)->OpenMousePos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiColumnData : IDisposable
    {
        public partial struct __Internal
        {
            internal float OffsetNorm;

            internal float OffsetNormBeforeResize;

            internal int Flags;

            internal global::DearImguiSharp.ImRect.__Internal ClipRect;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiColumnData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiColumnData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiColumnData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiColumnData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiColumnData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiColumnData __CreateInstance(global::DearImguiSharp.ImGuiColumnData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiColumnData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiColumnData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiColumnData.__Internal));
            *(global::DearImguiSharp.ImGuiColumnData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiColumnData(global::DearImguiSharp.ImGuiColumnData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiColumnData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiColumnData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiColumnData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiColumnData(global::DearImguiSharp.ImGuiColumnData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiColumnData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiColumnData.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiColumnData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiColumnData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public float OffsetNorm
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumnData.__Internal*) __Instance)->OffsetNorm;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumnData.__Internal*)__Instance)->OffsetNorm = value;
            }
        }

        public float OffsetNormBeforeResize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumnData.__Internal*) __Instance)->OffsetNormBeforeResize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumnData.__Internal*)__Instance)->OffsetNormBeforeResize = value;
            }
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumnData.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumnData.__Internal*)__Instance)->Flags = value;
            }
        }

        public global::DearImguiSharp.ImRect ClipRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiColumnData.__Internal*) __Instance)->ClipRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiColumnData.__Internal*)__Instance)->ClipRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiColumns : IDisposable
    {
        public partial struct __Internal
        {
            internal uint ID;

            internal int Flags;

            internal byte IsFirstFrame;

            internal byte IsBeingResized;

            internal int Current;

            internal int Count;

            internal float OffMinX;

            internal float OffMaxX;

            internal float LineMinY;

            internal float LineMaxY;

            internal float HostCursorPosY;

            internal float HostCursorMaxPosX;

            internal global::DearImguiSharp.ImRect.__Internal HostClipRect;

            internal global::DearImguiSharp.ImRect.__Internal HostWorkRect;

            internal global::DearImguiSharp.ImVectorImGuiColumnData.__Internal Columns;

            internal global::DearImguiSharp.ImDrawListSplitter.__Internal Splitter;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiColumns@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiColumns> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiColumns>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiColumns __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiColumns(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiColumns __CreateInstance(global::DearImguiSharp.ImGuiColumns.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiColumns(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiColumns.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiColumns.__Internal));
            *(global::DearImguiSharp.ImGuiColumns.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiColumns(global::DearImguiSharp.ImGuiColumns.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiColumns(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiColumns()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiColumns.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiColumns(global::DearImguiSharp.ImGuiColumns _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiColumns.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiColumns.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiColumns __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ID
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->ID;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->ID = value;
            }
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->Flags = value;
            }
        }

        public bool IsFirstFrame
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->IsFirstFrame != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->IsFirstFrame = (byte) (value ? 1 : 0);
            }
        }

        public bool IsBeingResized
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->IsBeingResized != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->IsBeingResized = (byte) (value ? 1 : 0);
            }
        }

        public int Current
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->Current;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->Current = value;
            }
        }

        public int Count
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->Count;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->Count = value;
            }
        }

        public float OffMinX
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->OffMinX;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->OffMinX = value;
            }
        }

        public float OffMaxX
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->OffMaxX;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->OffMaxX = value;
            }
        }

        public float LineMinY
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->LineMinY;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->LineMinY = value;
            }
        }

        public float LineMaxY
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->LineMaxY;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->LineMaxY = value;
            }
        }

        public float HostCursorPosY
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->HostCursorPosY;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->HostCursorPosY = value;
            }
        }

        public float HostCursorMaxPosX
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->HostCursorMaxPosX;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->HostCursorMaxPosX = value;
            }
        }

        public global::DearImguiSharp.ImRect HostClipRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->HostClipRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->HostClipRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect HostWorkRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->HostWorkRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->HostWorkRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiColumnData Columns
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiColumnData.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->Columns));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->Columns = *(global::DearImguiSharp.ImVectorImGuiColumnData.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImDrawListSplitter Splitter
        {
            get
            {
                return global::DearImguiSharp.ImDrawListSplitter.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiColumns.__Internal*) __Instance)->Splitter));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiColumns.__Internal*)__Instance)->Splitter = *(global::DearImguiSharp.ImDrawListSplitter.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImDrawListSharedData : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVec2.__Internal TexUvWhitePixel;

            internal global::System.IntPtr Font;

            internal float FontSize;

            internal float CurveTessellationTol;

            internal float CircleSegmentMaxError;

            internal global::DearImguiSharp.ImVec4.__Internal ClipRectFullscreen;

            internal int InitialFlags;

            internal fixed byte CircleVtx12[96];

            internal fixed byte CircleSegmentCounts[64];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImDrawListSharedData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawListSharedData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawListSharedData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImDrawListSharedData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawListSharedData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImDrawListSharedData __CreateInstance(global::DearImguiSharp.ImDrawListSharedData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawListSharedData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImDrawListSharedData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawListSharedData.__Internal));
            *(global::DearImguiSharp.ImDrawListSharedData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImDrawListSharedData(global::DearImguiSharp.ImDrawListSharedData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImDrawListSharedData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImDrawListSharedData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawListSharedData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImDrawListSharedData(global::DearImguiSharp.ImDrawListSharedData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawListSharedData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance) = *((global::DearImguiSharp.ImDrawListSharedData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImDrawListSharedData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVec2 TexUvWhitePixel
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->TexUvWhitePixel));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawListSharedData.__Internal*)__Instance)->TexUvWhitePixel = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImFont Font
        {
            get
            {
                global::DearImguiSharp.ImFont __result0;
                if (((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->Font == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->Font))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->Font];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->Font);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawListSharedData.__Internal*)__Instance)->Font = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public float FontSize
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->FontSize;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawListSharedData.__Internal*)__Instance)->FontSize = value;
            }
        }

        public float CurveTessellationTol
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->CurveTessellationTol;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawListSharedData.__Internal*)__Instance)->CurveTessellationTol = value;
            }
        }

        public float CircleSegmentMaxError
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->CircleSegmentMaxError;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawListSharedData.__Internal*)__Instance)->CircleSegmentMaxError = value;
            }
        }

        public global::DearImguiSharp.ImVec4 ClipRectFullscreen
        {
            get
            {
                return global::DearImguiSharp.ImVec4.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->ClipRectFullscreen));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImDrawListSharedData.__Internal*)__Instance)->ClipRectFullscreen = *(global::DearImguiSharp.ImVec4.__Internal*) value.__Instance;
            }
        }

        public int InitialFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->InitialFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImDrawListSharedData.__Internal*)__Instance)->InitialFlags = value;
            }
        }

        public global::DearImguiSharp.ImVec2[] CircleVtx12
        {
            get
            {
                global::DearImguiSharp.ImVec2[] __value = null;
                if (((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->CircleVtx12 != null)
                {
                    __value = new global::DearImguiSharp.ImVec2[12];
                    for (int i = 0; i < 12; i++)
                        __value[i] = global::DearImguiSharp.ImVec2.__CreateInstance(*((global::DearImguiSharp.ImVec2.__Internal*)&(((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->CircleVtx12[i * sizeof(global::DearImguiSharp.ImVec2.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 12)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 12; i++)
                        *(global::DearImguiSharp.ImVec2.__Internal*) &((global::DearImguiSharp.ImDrawListSharedData.__Internal*)__Instance)->CircleVtx12[i * sizeof(global::DearImguiSharp.ImVec2.__Internal)] = *(global::DearImguiSharp.ImVec2.__Internal*)value[i].__Instance;
                }
            }
        }

        public byte[] CircleSegmentCounts
        {
            get
            {
                byte[] __value = null;
                if (((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->CircleSegmentCounts != null)
                {
                    __value = new byte[64];
                    for (int i = 0; i < 64; i++)
                        __value[i] = ((global::DearImguiSharp.ImDrawListSharedData.__Internal*) __Instance)->CircleSegmentCounts[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 64; i++)
                        ((global::DearImguiSharp.ImDrawListSharedData.__Internal*)__Instance)->CircleSegmentCounts[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class ImDrawDataBuilder : IDisposable
    {
        public partial struct __Internal
        {
            internal fixed byte Layers[32];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImDrawDataBuilder@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawDataBuilder> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImDrawDataBuilder>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImDrawDataBuilder __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawDataBuilder(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImDrawDataBuilder __CreateInstance(global::DearImguiSharp.ImDrawDataBuilder.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImDrawDataBuilder(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImDrawDataBuilder.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawDataBuilder.__Internal));
            *(global::DearImguiSharp.ImDrawDataBuilder.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImDrawDataBuilder(global::DearImguiSharp.ImDrawDataBuilder.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImDrawDataBuilder(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImDrawDataBuilder()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawDataBuilder.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImDrawDataBuilder(global::DearImguiSharp.ImDrawDataBuilder _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImDrawDataBuilder.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImDrawDataBuilder.__Internal*) __Instance) = *((global::DearImguiSharp.ImDrawDataBuilder.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImDrawDataBuilder __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVectorImDrawListPtr[] Layers
        {
            get
            {
                global::DearImguiSharp.ImVectorImDrawListPtr[] __value = null;
                if (((global::DearImguiSharp.ImDrawDataBuilder.__Internal*) __Instance)->Layers != null)
                {
                    __value = new global::DearImguiSharp.ImVectorImDrawListPtr[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::DearImguiSharp.ImVectorImDrawListPtr.__CreateInstance(*((global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*)&(((global::DearImguiSharp.ImDrawDataBuilder.__Internal*) __Instance)->Layers[i * sizeof(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        *(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*) &((global::DearImguiSharp.ImDrawDataBuilder.__Internal*)__Instance)->Layers[i * sizeof(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal)] = *(global::DearImguiSharp.ImVectorImDrawListPtr.__Internal*)value[i].__Instance;
                }
            }
        }
    }

    public unsafe partial class ImGuiNavMoveResult : IDisposable
    {
        public partial struct __Internal
        {
            internal global::System.IntPtr Window;

            internal uint ID;

            internal uint FocusScopeId;

            internal float DistBox;

            internal float DistCenter;

            internal float DistAxial;

            internal global::DearImguiSharp.ImRect.__Internal RectRel;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiNavMoveResult@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiNavMoveResult> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiNavMoveResult>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiNavMoveResult __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiNavMoveResult(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiNavMoveResult __CreateInstance(global::DearImguiSharp.ImGuiNavMoveResult.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiNavMoveResult(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiNavMoveResult.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiNavMoveResult.__Internal));
            *(global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiNavMoveResult(global::DearImguiSharp.ImGuiNavMoveResult.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiNavMoveResult(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiNavMoveResult()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiNavMoveResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiNavMoveResult(global::DearImguiSharp.ImGuiNavMoveResult _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiNavMoveResult.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiNavMoveResult __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImGuiWindow Window
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->Window == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->Window))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->Window];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->Window);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*)__Instance)->Window = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint ID
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->ID;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*)__Instance)->ID = value;
            }
        }

        public uint FocusScopeId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->FocusScopeId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*)__Instance)->FocusScopeId = value;
            }
        }

        public float DistBox
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->DistBox;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*)__Instance)->DistBox = value;
            }
        }

        public float DistCenter
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->DistCenter;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*)__Instance)->DistCenter = value;
            }
        }

        public float DistAxial
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->DistAxial;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*)__Instance)->DistAxial = value;
            }
        }

        public global::DearImguiSharp.ImRect RectRel
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) __Instance)->RectRel));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiNavMoveResult.__Internal*)__Instance)->RectRel = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiNextWindowData : IDisposable
    {
        public partial struct __Internal
        {
            internal int Flags;

            internal int PosCond;

            internal int SizeCond;

            internal int CollapsedCond;

            internal global::DearImguiSharp.ImVec2.__Internal PosVal;

            internal global::DearImguiSharp.ImVec2.__Internal PosPivotVal;

            internal global::DearImguiSharp.ImVec2.__Internal SizeVal;

            internal global::DearImguiSharp.ImVec2.__Internal ContentSizeVal;

            internal byte CollapsedVal;

            internal global::DearImguiSharp.ImRect.__Internal SizeConstraintRect;

            internal global::System.IntPtr SizeCallback;

            internal global::System.IntPtr SizeCallbackUserData;

            internal float BgAlphaVal;

            internal global::DearImguiSharp.ImVec2.__Internal MenuBarOffsetMinVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiNextWindowData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiNextWindowData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiNextWindowData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiNextWindowData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiNextWindowData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiNextWindowData __CreateInstance(global::DearImguiSharp.ImGuiNextWindowData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiNextWindowData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiNextWindowData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiNextWindowData.__Internal));
            *(global::DearImguiSharp.ImGuiNextWindowData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiNextWindowData(global::DearImguiSharp.ImGuiNextWindowData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiNextWindowData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiNextWindowData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiNextWindowData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiNextWindowData(global::DearImguiSharp.ImGuiNextWindowData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiNextWindowData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiNextWindowData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->Flags = value;
            }
        }

        public int PosCond
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->PosCond;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->PosCond = value;
            }
        }

        public int SizeCond
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->SizeCond;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->SizeCond = value;
            }
        }

        public int CollapsedCond
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->CollapsedCond;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->CollapsedCond = value;
            }
        }

        public global::DearImguiSharp.ImVec2 PosVal
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->PosVal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->PosVal = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 PosPivotVal
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->PosPivotVal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->PosPivotVal = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 SizeVal
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->SizeVal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->SizeVal = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 ContentSizeVal
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->ContentSizeVal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->ContentSizeVal = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public bool CollapsedVal
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->CollapsedVal != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->CollapsedVal = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImRect SizeConstraintRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->SizeConstraintRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->SizeConstraintRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiSizeCallback SizeCallback
        {
            get
            {
                var __ptr0 = ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->SizeCallback;
                return __ptr0 == IntPtr.Zero? null : (global::DearImguiSharp.ImGuiSizeCallback) Marshal.GetDelegateForFunctionPointer(__ptr0, typeof(global::DearImguiSharp.ImGuiSizeCallback));
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->SizeCallback = value == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(value);
            }
        }

        public global::System.IntPtr SizeCallbackUserData
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->SizeCallbackUserData;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->SizeCallbackUserData = (global::System.IntPtr) value;
            }
        }

        public float BgAlphaVal
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->BgAlphaVal;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->BgAlphaVal = value;
            }
        }

        public global::DearImguiSharp.ImVec2 MenuBarOffsetMinVal
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiNextWindowData.__Internal*) __Instance)->MenuBarOffsetMinVal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiNextWindowData.__Internal*)__Instance)->MenuBarOffsetMinVal = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiNextItemData : IDisposable
    {
        public partial struct __Internal
        {
            internal int Flags;

            internal float Width;

            internal uint FocusScopeId;

            internal int OpenCond;

            internal byte OpenVal;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiNextItemData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiNextItemData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiNextItemData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiNextItemData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiNextItemData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiNextItemData __CreateInstance(global::DearImguiSharp.ImGuiNextItemData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiNextItemData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiNextItemData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiNextItemData.__Internal));
            *(global::DearImguiSharp.ImGuiNextItemData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiNextItemData(global::DearImguiSharp.ImGuiNextItemData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiNextItemData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiNextItemData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiNextItemData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiNextItemData(global::DearImguiSharp.ImGuiNextItemData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiNextItemData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiNextItemData.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiNextItemData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiNextItemData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextItemData.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextItemData.__Internal*)__Instance)->Flags = value;
            }
        }

        public float Width
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextItemData.__Internal*) __Instance)->Width;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextItemData.__Internal*)__Instance)->Width = value;
            }
        }

        public uint FocusScopeId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextItemData.__Internal*) __Instance)->FocusScopeId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextItemData.__Internal*)__Instance)->FocusScopeId = value;
            }
        }

        public int OpenCond
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextItemData.__Internal*) __Instance)->OpenCond;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextItemData.__Internal*)__Instance)->OpenCond = value;
            }
        }

        public bool OpenVal
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiNextItemData.__Internal*) __Instance)->OpenVal != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiNextItemData.__Internal*)__Instance)->OpenVal = (byte) (value ? 1 : 0);
            }
        }
    }

    public unsafe partial class ImGuiShrinkWidthItem : IDisposable
    {
        public partial struct __Internal
        {
            internal int Index;

            internal float Width;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiShrinkWidthItem@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiShrinkWidthItem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiShrinkWidthItem>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiShrinkWidthItem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiShrinkWidthItem(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiShrinkWidthItem __CreateInstance(global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiShrinkWidthItem(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal));
            *(global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiShrinkWidthItem(global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiShrinkWidthItem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiShrinkWidthItem()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiShrinkWidthItem(global::DearImguiSharp.ImGuiShrinkWidthItem _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiShrinkWidthItem __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public int Index
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal*) __Instance)->Index;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal*)__Instance)->Index = value;
            }
        }

        public float Width
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal*) __Instance)->Width;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiShrinkWidthItem.__Internal*)__Instance)->Width = value;
            }
        }
    }

    public unsafe partial class ImGuiPtrOrIndex : IDisposable
    {
        public partial struct __Internal
        {
            internal global::System.IntPtr Ptr;

            internal int Index;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiPtrOrIndex@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiPtrOrIndex> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiPtrOrIndex>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiPtrOrIndex __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiPtrOrIndex(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiPtrOrIndex __CreateInstance(global::DearImguiSharp.ImGuiPtrOrIndex.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiPtrOrIndex(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiPtrOrIndex.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiPtrOrIndex.__Internal));
            *(global::DearImguiSharp.ImGuiPtrOrIndex.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiPtrOrIndex(global::DearImguiSharp.ImGuiPtrOrIndex.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiPtrOrIndex(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiPtrOrIndex()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiPtrOrIndex.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiPtrOrIndex(global::DearImguiSharp.ImGuiPtrOrIndex _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiPtrOrIndex.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiPtrOrIndex.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiPtrOrIndex.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiPtrOrIndex __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::System.IntPtr Ptr
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPtrOrIndex.__Internal*) __Instance)->Ptr;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPtrOrIndex.__Internal*)__Instance)->Ptr = (global::System.IntPtr) value;
            }
        }

        public int Index
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiPtrOrIndex.__Internal*) __Instance)->Index;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiPtrOrIndex.__Internal*)__Instance)->Index = value;
            }
        }
    }

    public unsafe partial class ImGuiContext : IDisposable
    {
        public partial struct __Internal
        {
            internal byte Initialized;

            internal byte FontAtlasOwnedByContext;

            internal global::DearImguiSharp.ImGuiIO.__Internal IO;

            internal global::DearImguiSharp.ImGuiStyle.__Internal Style;

            internal global::System.IntPtr Font;

            internal float FontSize;

            internal float FontBaseSize;

            internal global::DearImguiSharp.ImDrawListSharedData.__Internal DrawListSharedData;

            internal double Time;

            internal int FrameCount;

            internal int FrameCountEnded;

            internal int FrameCountRendered;

            internal byte WithinFrameScope;

            internal byte WithinFrameScopeWithImplicitWindow;

            internal byte WithinEndChild;

            internal global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal Windows;

            internal global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal WindowsFocusOrder;

            internal global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal WindowsTempSortBuffer;

            internal global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal CurrentWindowStack;

            internal global::DearImguiSharp.ImGuiStorage.__Internal WindowsById;

            internal int WindowsActiveCount;

            internal global::System.IntPtr CurrentWindow;

            internal global::System.IntPtr HoveredWindow;

            internal global::System.IntPtr HoveredRootWindow;

            internal global::System.IntPtr MovingWindow;

            internal global::System.IntPtr WheelingWindow;

            internal global::DearImguiSharp.ImVec2.__Internal WheelingWindowRefMousePos;

            internal float WheelingWindowTimer;

            internal uint HoveredId;

            internal byte HoveredIdAllowOverlap;

            internal uint HoveredIdPreviousFrame;

            internal float HoveredIdTimer;

            internal float HoveredIdNotActiveTimer;

            internal uint ActiveId;

            internal uint ActiveIdIsAlive;

            internal float ActiveIdTimer;

            internal byte ActiveIdIsJustActivated;

            internal byte ActiveIdAllowOverlap;

            internal byte ActiveIdHasBeenPressedBefore;

            internal byte ActiveIdHasBeenEditedBefore;

            internal byte ActiveIdHasBeenEditedThisFrame;

            internal uint ActiveIdUsingNavDirMask;

            internal uint ActiveIdUsingNavInputMask;

            internal ulong ActiveIdUsingKeyInputMask;

            internal global::DearImguiSharp.ImVec2.__Internal ActiveIdClickOffset;

            internal global::System.IntPtr ActiveIdWindow;

            internal global::DearImguiSharp.ImGuiInputSource ActiveIdSource;

            internal int ActiveIdMouseButton;

            internal uint ActiveIdPreviousFrame;

            internal byte ActiveIdPreviousFrameIsAlive;

            internal byte ActiveIdPreviousFrameHasBeenEditedBefore;

            internal global::System.IntPtr ActiveIdPreviousFrameWindow;

            internal uint LastActiveId;

            internal float LastActiveIdTimer;

            internal global::DearImguiSharp.ImGuiNextWindowData.__Internal NextWindowData;

            internal global::DearImguiSharp.ImGuiNextItemData.__Internal NextItemData;

            internal global::DearImguiSharp.ImVectorImGuiColorMod.__Internal ColorModifiers;

            internal global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal StyleModifiers;

            internal global::DearImguiSharp.ImVectorImFontPtr.__Internal FontStack;

            internal global::DearImguiSharp.ImVectorImGuiPopupData.__Internal OpenPopupStack;

            internal global::DearImguiSharp.ImVectorImGuiPopupData.__Internal BeginPopupStack;

            internal global::System.IntPtr NavWindow;

            internal uint NavId;

            internal uint NavFocusScopeId;

            internal uint NavActivateId;

            internal uint NavActivateDownId;

            internal uint NavActivatePressedId;

            internal uint NavInputId;

            internal uint NavJustTabbedId;

            internal uint NavJustMovedToId;

            internal uint NavJustMovedToFocusScopeId;

            internal uint NavNextActivateId;

            internal global::DearImguiSharp.ImGuiInputSource NavInputSource;

            internal global::DearImguiSharp.ImRect.__Internal NavScoringRectScreen;

            internal int NavScoringCount;

            internal global::DearImguiSharp.ImGuiNavLayer NavLayer;

            internal int NavIdTabCounter;

            internal byte NavIdIsAlive;

            internal byte NavMousePosDirty;

            internal byte NavDisableHighlight;

            internal byte NavDisableMouseHover;

            internal byte NavAnyRequest;

            internal byte NavInitRequest;

            internal byte NavInitRequestFromMove;

            internal uint NavInitResultId;

            internal global::DearImguiSharp.ImRect.__Internal NavInitResultRectRel;

            internal byte NavMoveFromClampedRefRect;

            internal byte NavMoveRequest;

            internal int NavMoveRequestFlags;

            internal global::DearImguiSharp.ImGuiNavForward NavMoveRequestForward;

            internal int NavMoveDir;

            internal int NavMoveDirLast;

            internal int NavMoveClipDir;

            internal global::DearImguiSharp.ImGuiNavMoveResult.__Internal NavMoveResultLocal;

            internal global::DearImguiSharp.ImGuiNavMoveResult.__Internal NavMoveResultLocalVisibleSet;

            internal global::DearImguiSharp.ImGuiNavMoveResult.__Internal NavMoveResultOther;

            internal global::System.IntPtr NavWindowingTarget;

            internal global::System.IntPtr NavWindowingTargetAnim;

            internal global::System.IntPtr NavWindowingList;

            internal float NavWindowingTimer;

            internal float NavWindowingHighlightAlpha;

            internal byte NavWindowingToggleLayer;

            internal global::System.IntPtr FocusRequestCurrWindow;

            internal global::System.IntPtr FocusRequestNextWindow;

            internal int FocusRequestCurrCounterRegular;

            internal int FocusRequestCurrCounterTabStop;

            internal int FocusRequestNextCounterRegular;

            internal int FocusRequestNextCounterTabStop;

            internal byte FocusTabPressed;

            internal global::DearImguiSharp.ImDrawData.__Internal DrawData;

            internal global::DearImguiSharp.ImDrawDataBuilder.__Internal DrawDataBuilder;

            internal float DimBgRatio;

            internal global::DearImguiSharp.ImDrawList.__Internal BackgroundDrawList;

            internal global::DearImguiSharp.ImDrawList.__Internal ForegroundDrawList;

            internal int MouseCursor;

            internal byte DragDropActive;

            internal byte DragDropWithinSourceOrTarget;

            internal int DragDropSourceFlags;

            internal int DragDropSourceFrameCount;

            internal int DragDropMouseButton;

            internal global::DearImguiSharp.ImGuiPayload.__Internal DragDropPayload;

            internal global::DearImguiSharp.ImRect.__Internal DragDropTargetRect;

            internal uint DragDropTargetId;

            internal int DragDropAcceptFlags;

            internal float DragDropAcceptIdCurrRectSurface;

            internal uint DragDropAcceptIdCurr;

            internal uint DragDropAcceptIdPrev;

            internal int DragDropAcceptFrameCount;

            internal global::DearImguiSharp.ImVector_unsigned_char.__Internal DragDropPayloadBufHeap;

            internal fixed byte DragDropPayloadBufLocal[16];

            internal global::System.IntPtr CurrentTabBar;

            internal global::DearImguiSharp.ImPoolImGuiTabBar.__Internal TabBars;

            internal global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal CurrentTabBarStack;

            internal global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal ShrinkWidthBuffer;

            internal global::DearImguiSharp.ImVec2.__Internal LastValidMousePos;

            internal global::DearImguiSharp.ImGuiInputTextState.__Internal InputTextState;

            internal global::DearImguiSharp.ImFont.__Internal InputTextPasswordFont;

            internal uint TempInputTextId;

            internal int ColorEditOptions;

            internal float ColorEditLastHue;

            internal float ColorEditLastSat;

            internal fixed float ColorEditLastColor[3];

            internal global::DearImguiSharp.ImVec4.__Internal ColorPickerRef;

            internal byte DragCurrentAccumDirty;

            internal float DragCurrentAccum;

            internal float DragSpeedDefaultRatio;

            internal float ScrollbarClickDeltaToGrabCenter;

            internal int TooltipOverrideCount;

            internal global::DearImguiSharp.ImVector_char.__Internal PrivateClipboard;

            internal global::DearImguiSharp.ImVec2.__Internal PlatformImePos;

            internal global::DearImguiSharp.ImVec2.__Internal PlatformImeLastPos;

            internal byte SettingsLoaded;

            internal float SettingsDirtyTimer;

            internal global::DearImguiSharp.ImGuiTextBuffer.__Internal SettingsIniData;

            internal global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal SettingsHandlers;

            internal global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal SettingsWindows;

            internal byte LogEnabled;

            internal global::DearImguiSharp.ImGuiLogType LogType;

            internal global::System.IntPtr LogFile;

            internal global::DearImguiSharp.ImGuiTextBuffer.__Internal LogBuffer;

            internal float LogLinePosY;

            internal byte LogLineFirstItem;

            internal int LogDepthRef;

            internal int LogDepthToExpand;

            internal int LogDepthToExpandDefault;

            internal byte DebugItemPickerActive;

            internal uint DebugItemPickerBreakId;

            internal fixed float FramerateSecPerFrame[120];

            internal int FramerateSecPerFrameIdx;

            internal float FramerateSecPerFrameAccum;

            internal int WantCaptureMouseNextFrame;

            internal int WantCaptureKeyboardNextFrame;

            internal int WantTextInputNextFrame;

            internal fixed sbyte TempBuffer[3073];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiContext@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiContext> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiContext>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiContext(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiContext __CreateInstance(global::DearImguiSharp.ImGuiContext.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiContext(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiContext.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiContext.__Internal));
            *(global::DearImguiSharp.ImGuiContext.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiContext(global::DearImguiSharp.ImGuiContext.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiContext(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiContext()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiContext(global::DearImguiSharp.ImGuiContext _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiContext.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiContext.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiContext __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public bool Initialized
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->Initialized != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->Initialized = (byte) (value ? 1 : 0);
            }
        }

        public bool FontAtlasOwnedByContext
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FontAtlasOwnedByContext != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FontAtlasOwnedByContext = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImGuiIO IO
        {
            get
            {
                return global::DearImguiSharp.ImGuiIO.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->IO));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->IO = *(global::DearImguiSharp.ImGuiIO.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiStyle Style
        {
            get
            {
                return global::DearImguiSharp.ImGuiStyle.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->Style));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->Style = *(global::DearImguiSharp.ImGuiStyle.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImFont Font
        {
            get
            {
                global::DearImguiSharp.ImFont __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->Font == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->Font))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->Font];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->Font);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->Font = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public float FontSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FontSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FontSize = value;
            }
        }

        public float FontBaseSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FontBaseSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FontBaseSize = value;
            }
        }

        public global::DearImguiSharp.ImDrawListSharedData DrawListSharedData
        {
            get
            {
                return global::DearImguiSharp.ImDrawListSharedData.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DrawListSharedData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DrawListSharedData = *(global::DearImguiSharp.ImDrawListSharedData.__Internal*) value.__Instance;
            }
        }

        public double Time
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->Time;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->Time = value;
            }
        }

        public int FrameCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FrameCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FrameCount = value;
            }
        }

        public int FrameCountEnded
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FrameCountEnded;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FrameCountEnded = value;
            }
        }

        public int FrameCountRendered
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FrameCountRendered;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FrameCountRendered = value;
            }
        }

        public bool WithinFrameScope
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WithinFrameScope != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WithinFrameScope = (byte) (value ? 1 : 0);
            }
        }

        public bool WithinFrameScopeWithImplicitWindow
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WithinFrameScopeWithImplicitWindow != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WithinFrameScopeWithImplicitWindow = (byte) (value ? 1 : 0);
            }
        }

        public bool WithinEndChild
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WithinEndChild != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WithinEndChild = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImVectorImGuiWindowPtr Windows
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiWindowPtr.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->Windows));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->Windows = *(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiWindowPtr WindowsFocusOrder
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiWindowPtr.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WindowsFocusOrder));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WindowsFocusOrder = *(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiWindowPtr WindowsTempSortBuffer
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiWindowPtr.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WindowsTempSortBuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WindowsTempSortBuffer = *(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiWindowPtr CurrentWindowStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiWindowPtr.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentWindowStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->CurrentWindowStack = *(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiStorage WindowsById
        {
            get
            {
                return global::DearImguiSharp.ImGuiStorage.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WindowsById));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WindowsById = *(global::DearImguiSharp.ImGuiStorage.__Internal*) value.__Instance;
            }
        }

        public int WindowsActiveCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WindowsActiveCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WindowsActiveCount = value;
            }
        }

        public global::DearImguiSharp.ImGuiWindow CurrentWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->CurrentWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow HoveredWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->HoveredWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow HoveredRootWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredRootWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredRootWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredRootWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredRootWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->HoveredRootWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow MovingWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->MovingWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->MovingWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->MovingWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->MovingWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->MovingWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow WheelingWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WheelingWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WheelingWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WheelingWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WheelingWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WheelingWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 WheelingWindowRefMousePos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WheelingWindowRefMousePos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WheelingWindowRefMousePos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public float WheelingWindowTimer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WheelingWindowTimer;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WheelingWindowTimer = value;
            }
        }

        public uint HoveredId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->HoveredId = value;
            }
        }

        public bool HoveredIdAllowOverlap
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredIdAllowOverlap != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->HoveredIdAllowOverlap = (byte) (value ? 1 : 0);
            }
        }

        public uint HoveredIdPreviousFrame
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredIdPreviousFrame;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->HoveredIdPreviousFrame = value;
            }
        }

        public float HoveredIdTimer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredIdTimer;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->HoveredIdTimer = value;
            }
        }

        public float HoveredIdNotActiveTimer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->HoveredIdNotActiveTimer;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->HoveredIdNotActiveTimer = value;
            }
        }

        public uint ActiveId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveId = value;
            }
        }

        public uint ActiveIdIsAlive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdIsAlive;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdIsAlive = value;
            }
        }

        public float ActiveIdTimer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdTimer;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdTimer = value;
            }
        }

        public bool ActiveIdIsJustActivated
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdIsJustActivated != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdIsJustActivated = (byte) (value ? 1 : 0);
            }
        }

        public bool ActiveIdAllowOverlap
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdAllowOverlap != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdAllowOverlap = (byte) (value ? 1 : 0);
            }
        }

        public bool ActiveIdHasBeenPressedBefore
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdHasBeenPressedBefore != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdHasBeenPressedBefore = (byte) (value ? 1 : 0);
            }
        }

        public bool ActiveIdHasBeenEditedBefore
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdHasBeenEditedBefore != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdHasBeenEditedBefore = (byte) (value ? 1 : 0);
            }
        }

        public bool ActiveIdHasBeenEditedThisFrame
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdHasBeenEditedThisFrame != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdHasBeenEditedThisFrame = (byte) (value ? 1 : 0);
            }
        }

        public uint ActiveIdUsingNavDirMask
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdUsingNavDirMask;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdUsingNavDirMask = value;
            }
        }

        public uint ActiveIdUsingNavInputMask
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdUsingNavInputMask;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdUsingNavInputMask = value;
            }
        }

        public ulong ActiveIdUsingKeyInputMask
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdUsingKeyInputMask;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdUsingKeyInputMask = value;
            }
        }

        public global::DearImguiSharp.ImVec2 ActiveIdClickOffset
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdClickOffset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdClickOffset = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow ActiveIdWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiInputSource ActiveIdSource
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdSource;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdSource = value;
            }
        }

        public int ActiveIdMouseButton
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdMouseButton;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdMouseButton = value;
            }
        }

        public uint ActiveIdPreviousFrame
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdPreviousFrame;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdPreviousFrame = value;
            }
        }

        public bool ActiveIdPreviousFrameIsAlive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdPreviousFrameIsAlive != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdPreviousFrameIsAlive = (byte) (value ? 1 : 0);
            }
        }

        public bool ActiveIdPreviousFrameHasBeenEditedBefore
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdPreviousFrameHasBeenEditedBefore != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdPreviousFrameHasBeenEditedBefore = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImGuiWindow ActiveIdPreviousFrameWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdPreviousFrameWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdPreviousFrameWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdPreviousFrameWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ActiveIdPreviousFrameWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ActiveIdPreviousFrameWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint LastActiveId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LastActiveId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LastActiveId = value;
            }
        }

        public float LastActiveIdTimer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LastActiveIdTimer;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LastActiveIdTimer = value;
            }
        }

        public global::DearImguiSharp.ImGuiNextWindowData NextWindowData
        {
            get
            {
                return global::DearImguiSharp.ImGuiNextWindowData.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NextWindowData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NextWindowData = *(global::DearImguiSharp.ImGuiNextWindowData.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiNextItemData NextItemData
        {
            get
            {
                return global::DearImguiSharp.ImGuiNextItemData.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NextItemData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NextItemData = *(global::DearImguiSharp.ImGuiNextItemData.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiColorMod ColorModifiers
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiColorMod.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ColorModifiers));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ColorModifiers = *(global::DearImguiSharp.ImVectorImGuiColorMod.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiStyleMod StyleModifiers
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiStyleMod.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->StyleModifiers));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->StyleModifiers = *(global::DearImguiSharp.ImVectorImGuiStyleMod.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImFontPtr FontStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImFontPtr.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FontStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FontStack = *(global::DearImguiSharp.ImVectorImFontPtr.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiPopupData OpenPopupStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiPopupData.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->OpenPopupStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->OpenPopupStack = *(global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiPopupData BeginPopupStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiPopupData.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->BeginPopupStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->BeginPopupStack = *(global::DearImguiSharp.ImVectorImGuiPopupData.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow NavWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint NavId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavId = value;
            }
        }

        public uint NavFocusScopeId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavFocusScopeId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavFocusScopeId = value;
            }
        }

        public uint NavActivateId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavActivateId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavActivateId = value;
            }
        }

        public uint NavActivateDownId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavActivateDownId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavActivateDownId = value;
            }
        }

        public uint NavActivatePressedId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavActivatePressedId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavActivatePressedId = value;
            }
        }

        public uint NavInputId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavInputId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavInputId = value;
            }
        }

        public uint NavJustTabbedId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavJustTabbedId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavJustTabbedId = value;
            }
        }

        public uint NavJustMovedToId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavJustMovedToId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavJustMovedToId = value;
            }
        }

        public uint NavJustMovedToFocusScopeId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavJustMovedToFocusScopeId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavJustMovedToFocusScopeId = value;
            }
        }

        public uint NavNextActivateId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavNextActivateId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavNextActivateId = value;
            }
        }

        public global::DearImguiSharp.ImGuiInputSource NavInputSource
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavInputSource;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavInputSource = value;
            }
        }

        public global::DearImguiSharp.ImRect NavScoringRectScreen
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavScoringRectScreen));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavScoringRectScreen = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public int NavScoringCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavScoringCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavScoringCount = value;
            }
        }

        public global::DearImguiSharp.ImGuiNavLayer NavLayer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavLayer;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavLayer = value;
            }
        }

        public int NavIdTabCounter
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavIdTabCounter;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavIdTabCounter = value;
            }
        }

        public bool NavIdIsAlive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavIdIsAlive != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavIdIsAlive = (byte) (value ? 1 : 0);
            }
        }

        public bool NavMousePosDirty
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMousePosDirty != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMousePosDirty = (byte) (value ? 1 : 0);
            }
        }

        public bool NavDisableHighlight
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavDisableHighlight != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavDisableHighlight = (byte) (value ? 1 : 0);
            }
        }

        public bool NavDisableMouseHover
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavDisableMouseHover != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavDisableMouseHover = (byte) (value ? 1 : 0);
            }
        }

        public bool NavAnyRequest
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavAnyRequest != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavAnyRequest = (byte) (value ? 1 : 0);
            }
        }

        public bool NavInitRequest
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavInitRequest != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavInitRequest = (byte) (value ? 1 : 0);
            }
        }

        public bool NavInitRequestFromMove
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavInitRequestFromMove != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavInitRequestFromMove = (byte) (value ? 1 : 0);
            }
        }

        public uint NavInitResultId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavInitResultId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavInitResultId = value;
            }
        }

        public global::DearImguiSharp.ImRect NavInitResultRectRel
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavInitResultRectRel));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavInitResultRectRel = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public bool NavMoveFromClampedRefRect
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveFromClampedRefRect != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveFromClampedRefRect = (byte) (value ? 1 : 0);
            }
        }

        public bool NavMoveRequest
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveRequest != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveRequest = (byte) (value ? 1 : 0);
            }
        }

        public int NavMoveRequestFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveRequestFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveRequestFlags = value;
            }
        }

        public global::DearImguiSharp.ImGuiNavForward NavMoveRequestForward
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveRequestForward;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveRequestForward = value;
            }
        }

        public int NavMoveDir
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveDir;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveDir = value;
            }
        }

        public int NavMoveDirLast
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveDirLast;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveDirLast = value;
            }
        }

        public int NavMoveClipDir
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveClipDir;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveClipDir = value;
            }
        }

        public global::DearImguiSharp.ImGuiNavMoveResult NavMoveResultLocal
        {
            get
            {
                return global::DearImguiSharp.ImGuiNavMoveResult.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveResultLocal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveResultLocal = *(global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiNavMoveResult NavMoveResultLocalVisibleSet
        {
            get
            {
                return global::DearImguiSharp.ImGuiNavMoveResult.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveResultLocalVisibleSet));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveResultLocalVisibleSet = *(global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiNavMoveResult NavMoveResultOther
        {
            get
            {
                return global::DearImguiSharp.ImGuiNavMoveResult.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavMoveResultOther));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavMoveResultOther = *(global::DearImguiSharp.ImGuiNavMoveResult.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow NavWindowingTarget
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingTarget == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingTarget))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingTarget];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingTarget);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavWindowingTarget = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow NavWindowingTargetAnim
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingTargetAnim == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingTargetAnim))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingTargetAnim];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingTargetAnim);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavWindowingTargetAnim = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow NavWindowingList
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingList == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingList))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingList];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingList);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavWindowingList = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public float NavWindowingTimer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingTimer;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavWindowingTimer = value;
            }
        }

        public float NavWindowingHighlightAlpha
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingHighlightAlpha;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavWindowingHighlightAlpha = value;
            }
        }

        public bool NavWindowingToggleLayer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->NavWindowingToggleLayer != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->NavWindowingToggleLayer = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImGuiWindow FocusRequestCurrWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestCurrWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestCurrWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestCurrWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestCurrWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FocusRequestCurrWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow FocusRequestNextWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestNextWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestNextWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestNextWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestNextWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FocusRequestNextWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int FocusRequestCurrCounterRegular
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestCurrCounterRegular;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FocusRequestCurrCounterRegular = value;
            }
        }

        public int FocusRequestCurrCounterTabStop
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestCurrCounterTabStop;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FocusRequestCurrCounterTabStop = value;
            }
        }

        public int FocusRequestNextCounterRegular
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestNextCounterRegular;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FocusRequestNextCounterRegular = value;
            }
        }

        public int FocusRequestNextCounterTabStop
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusRequestNextCounterTabStop;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FocusRequestNextCounterTabStop = value;
            }
        }

        public bool FocusTabPressed
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FocusTabPressed != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FocusTabPressed = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImDrawData DrawData
        {
            get
            {
                return global::DearImguiSharp.ImDrawData.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DrawData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DrawData = *(global::DearImguiSharp.ImDrawData.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImDrawDataBuilder DrawDataBuilder
        {
            get
            {
                return global::DearImguiSharp.ImDrawDataBuilder.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DrawDataBuilder));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DrawDataBuilder = *(global::DearImguiSharp.ImDrawDataBuilder.__Internal*) value.__Instance;
            }
        }

        public float DimBgRatio
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DimBgRatio;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DimBgRatio = value;
            }
        }

        public global::DearImguiSharp.ImDrawList BackgroundDrawList
        {
            get
            {
                return global::DearImguiSharp.ImDrawList.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->BackgroundDrawList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->BackgroundDrawList = *(global::DearImguiSharp.ImDrawList.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImDrawList ForegroundDrawList
        {
            get
            {
                return global::DearImguiSharp.ImDrawList.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ForegroundDrawList));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ForegroundDrawList = *(global::DearImguiSharp.ImDrawList.__Internal*) value.__Instance;
            }
        }

        public int MouseCursor
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->MouseCursor;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->MouseCursor = value;
            }
        }

        public bool DragDropActive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropActive != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropActive = (byte) (value ? 1 : 0);
            }
        }

        public bool DragDropWithinSourceOrTarget
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropWithinSourceOrTarget != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropWithinSourceOrTarget = (byte) (value ? 1 : 0);
            }
        }

        public int DragDropSourceFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropSourceFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropSourceFlags = value;
            }
        }

        public int DragDropSourceFrameCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropSourceFrameCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropSourceFrameCount = value;
            }
        }

        public int DragDropMouseButton
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropMouseButton;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropMouseButton = value;
            }
        }

        public global::DearImguiSharp.ImGuiPayload DragDropPayload
        {
            get
            {
                return global::DearImguiSharp.ImGuiPayload.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropPayload));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropPayload = *(global::DearImguiSharp.ImGuiPayload.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect DragDropTargetRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropTargetRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropTargetRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public uint DragDropTargetId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropTargetId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropTargetId = value;
            }
        }

        public int DragDropAcceptFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropAcceptFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropAcceptFlags = value;
            }
        }

        public float DragDropAcceptIdCurrRectSurface
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropAcceptIdCurrRectSurface;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropAcceptIdCurrRectSurface = value;
            }
        }

        public uint DragDropAcceptIdCurr
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropAcceptIdCurr;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropAcceptIdCurr = value;
            }
        }

        public uint DragDropAcceptIdPrev
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropAcceptIdPrev;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropAcceptIdPrev = value;
            }
        }

        public int DragDropAcceptFrameCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropAcceptFrameCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropAcceptFrameCount = value;
            }
        }

        public global::DearImguiSharp.ImVector_unsigned_char DragDropPayloadBufHeap
        {
            get
            {
                return global::DearImguiSharp.ImVector_unsigned_char.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropPayloadBufHeap));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropPayloadBufHeap = *(global::DearImguiSharp.ImVector_unsigned_char.__Internal*) value.__Instance;
            }
        }

        public byte[] DragDropPayloadBufLocal
        {
            get
            {
                byte[] __value = null;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropPayloadBufLocal != null)
                {
                    __value = new byte[16];
                    for (int i = 0; i < 16; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragDropPayloadBufLocal[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 16; i++)
                        ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragDropPayloadBufLocal[i] = value[i];
                }
            }
        }

        public global::DearImguiSharp.ImGuiTabBar CurrentTabBar
        {
            get
            {
                global::DearImguiSharp.ImGuiTabBar __result0;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentTabBar == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiTabBar.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentTabBar))
                    __result0 = (global::DearImguiSharp.ImGuiTabBar) global::DearImguiSharp.ImGuiTabBar.NativeToManagedMap[((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentTabBar];
                else __result0 = global::DearImguiSharp.ImGuiTabBar.__CreateInstance(((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentTabBar);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->CurrentTabBar = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImPoolImGuiTabBar TabBars
        {
            get
            {
                return global::DearImguiSharp.ImPoolImGuiTabBar.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->TabBars));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->TabBars = *(global::DearImguiSharp.ImPoolImGuiTabBar.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiPtrOrIndex CurrentTabBarStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->CurrentTabBarStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->CurrentTabBarStack = *(global::DearImguiSharp.ImVectorImGuiPtrOrIndex.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiShrinkWidthItem ShrinkWidthBuffer
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ShrinkWidthBuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ShrinkWidthBuffer = *(global::DearImguiSharp.ImVectorImGuiShrinkWidthItem.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 LastValidMousePos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LastValidMousePos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LastValidMousePos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiInputTextState InputTextState
        {
            get
            {
                return global::DearImguiSharp.ImGuiInputTextState.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->InputTextState));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->InputTextState = *(global::DearImguiSharp.ImGuiInputTextState.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImFont InputTextPasswordFont
        {
            get
            {
                return global::DearImguiSharp.ImFont.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->InputTextPasswordFont));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->InputTextPasswordFont = *(global::DearImguiSharp.ImFont.__Internal*) value.__Instance;
            }
        }

        public uint TempInputTextId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->TempInputTextId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->TempInputTextId = value;
            }
        }

        public int ColorEditOptions
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ColorEditOptions;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ColorEditOptions = value;
            }
        }

        public float ColorEditLastHue
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ColorEditLastHue;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ColorEditLastHue = value;
            }
        }

        public float ColorEditLastSat
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ColorEditLastSat;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ColorEditLastSat = value;
            }
        }

        public float[] ColorEditLastColor
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ColorEditLastColor != null)
                {
                    __value = new float[3];
                    for (int i = 0; i < 3; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ColorEditLastColor[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3; i++)
                        ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ColorEditLastColor[i] = value[i];
                }
            }
        }

        public global::DearImguiSharp.ImVec4 ColorPickerRef
        {
            get
            {
                return global::DearImguiSharp.ImVec4.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ColorPickerRef));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ColorPickerRef = *(global::DearImguiSharp.ImVec4.__Internal*) value.__Instance;
            }
        }

        public bool DragCurrentAccumDirty
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragCurrentAccumDirty != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragCurrentAccumDirty = (byte) (value ? 1 : 0);
            }
        }

        public float DragCurrentAccum
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragCurrentAccum;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragCurrentAccum = value;
            }
        }

        public float DragSpeedDefaultRatio
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DragSpeedDefaultRatio;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DragSpeedDefaultRatio = value;
            }
        }

        public float ScrollbarClickDeltaToGrabCenter
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->ScrollbarClickDeltaToGrabCenter;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->ScrollbarClickDeltaToGrabCenter = value;
            }
        }

        public int TooltipOverrideCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->TooltipOverrideCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->TooltipOverrideCount = value;
            }
        }

        public global::DearImguiSharp.ImVector_char PrivateClipboard
        {
            get
            {
                return global::DearImguiSharp.ImVector_char.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->PrivateClipboard));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->PrivateClipboard = *(global::DearImguiSharp.ImVector_char.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 PlatformImePos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->PlatformImePos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->PlatformImePos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 PlatformImeLastPos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->PlatformImeLastPos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->PlatformImeLastPos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public bool SettingsLoaded
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->SettingsLoaded != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->SettingsLoaded = (byte) (value ? 1 : 0);
            }
        }

        public float SettingsDirtyTimer
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->SettingsDirtyTimer;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->SettingsDirtyTimer = value;
            }
        }

        public global::DearImguiSharp.ImGuiTextBuffer SettingsIniData
        {
            get
            {
                return global::DearImguiSharp.ImGuiTextBuffer.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->SettingsIniData));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->SettingsIniData = *(global::DearImguiSharp.ImGuiTextBuffer.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiSettingsHandler SettingsHandlers
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiSettingsHandler.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->SettingsHandlers));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->SettingsHandlers = *(global::DearImguiSharp.ImVectorImGuiSettingsHandler.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImChunkStreamImGuiWindowSettings SettingsWindows
        {
            get
            {
                return global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->SettingsWindows));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->SettingsWindows = *(global::DearImguiSharp.ImChunkStreamImGuiWindowSettings.__Internal*) value.__Instance;
            }
        }

        public bool LogEnabled
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LogEnabled != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LogEnabled = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImGuiLogType LogType
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LogType;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LogType = value;
            }
        }

        public global::System.IntPtr LogFile
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LogFile;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LogFile = value;
            }
        }

        public global::DearImguiSharp.ImGuiTextBuffer LogBuffer
        {
            get
            {
                return global::DearImguiSharp.ImGuiTextBuffer.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LogBuffer));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LogBuffer = *(global::DearImguiSharp.ImGuiTextBuffer.__Internal*) value.__Instance;
            }
        }

        public float LogLinePosY
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LogLinePosY;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LogLinePosY = value;
            }
        }

        public bool LogLineFirstItem
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LogLineFirstItem != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LogLineFirstItem = (byte) (value ? 1 : 0);
            }
        }

        public int LogDepthRef
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LogDepthRef;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LogDepthRef = value;
            }
        }

        public int LogDepthToExpand
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LogDepthToExpand;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LogDepthToExpand = value;
            }
        }

        public int LogDepthToExpandDefault
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->LogDepthToExpandDefault;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->LogDepthToExpandDefault = value;
            }
        }

        public bool DebugItemPickerActive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DebugItemPickerActive != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DebugItemPickerActive = (byte) (value ? 1 : 0);
            }
        }

        public uint DebugItemPickerBreakId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->DebugItemPickerBreakId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->DebugItemPickerBreakId = value;
            }
        }

        public float[] FramerateSecPerFrame
        {
            get
            {
                float[] __value = null;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FramerateSecPerFrame != null)
                {
                    __value = new float[120];
                    for (int i = 0; i < 120; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FramerateSecPerFrame[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 120; i++)
                        ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FramerateSecPerFrame[i] = value[i];
                }
            }
        }

        public int FramerateSecPerFrameIdx
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FramerateSecPerFrameIdx;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FramerateSecPerFrameIdx = value;
            }
        }

        public float FramerateSecPerFrameAccum
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->FramerateSecPerFrameAccum;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->FramerateSecPerFrameAccum = value;
            }
        }

        public int WantCaptureMouseNextFrame
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WantCaptureMouseNextFrame;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WantCaptureMouseNextFrame = value;
            }
        }

        public int WantCaptureKeyboardNextFrame
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WantCaptureKeyboardNextFrame;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WantCaptureKeyboardNextFrame = value;
            }
        }

        public int WantTextInputNextFrame
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->WantTextInputNextFrame;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->WantTextInputNextFrame = value;
            }
        }

        public sbyte[] TempBuffer
        {
            get
            {
                sbyte[] __value = null;
                if (((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->TempBuffer != null)
                {
                    __value = new sbyte[3073];
                    for (int i = 0; i < 3073; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiContext.__Internal*) __Instance)->TempBuffer[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 3073; i++)
                        ((global::DearImguiSharp.ImGuiContext.__Internal*)__Instance)->TempBuffer[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class ImGuiWindowTempData : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVec2.__Internal CursorPos;

            internal global::DearImguiSharp.ImVec2.__Internal CursorPosPrevLine;

            internal global::DearImguiSharp.ImVec2.__Internal CursorStartPos;

            internal global::DearImguiSharp.ImVec2.__Internal CursorMaxPos;

            internal global::DearImguiSharp.ImVec2.__Internal CurrLineSize;

            internal global::DearImguiSharp.ImVec2.__Internal PrevLineSize;

            internal float CurrLineTextBaseOffset;

            internal float PrevLineTextBaseOffset;

            internal global::DearImguiSharp.ImVec1.__Internal Indent;

            internal global::DearImguiSharp.ImVec1.__Internal ColumnsOffset;

            internal global::DearImguiSharp.ImVec1.__Internal GroupOffset;

            internal uint LastItemId;

            internal int LastItemStatusFlags;

            internal global::DearImguiSharp.ImRect.__Internal LastItemRect;

            internal global::DearImguiSharp.ImRect.__Internal LastItemDisplayRect;

            internal global::DearImguiSharp.ImGuiNavLayer NavLayerCurrent;

            internal int NavLayerCurrentMask;

            internal int NavLayerActiveMask;

            internal int NavLayerActiveMaskNext;

            internal uint NavFocusScopeIdCurrent;

            internal byte NavHideHighlightOneFrame;

            internal byte NavHasScroll;

            internal byte MenuBarAppending;

            internal global::DearImguiSharp.ImVec2.__Internal MenuBarOffset;

            internal global::DearImguiSharp.ImGuiMenuColumns.__Internal MenuColumns;

            internal int TreeDepth;

            internal uint TreeJumpToParentOnPopMask;

            internal global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal ChildWindows;

            internal global::System.IntPtr StateStorage;

            internal global::System.IntPtr CurrentColumns;

            internal int LayoutType;

            internal int ParentLayoutType;

            internal int FocusCounterRegular;

            internal int FocusCounterTabStop;

            internal int ItemFlags;

            internal float ItemWidth;

            internal float TextWrapPos;

            internal global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal ItemFlagsStack;

            internal global::DearImguiSharp.ImVector_float.__Internal ItemWidthStack;

            internal global::DearImguiSharp.ImVector_float.__Internal TextWrapPosStack;

            internal global::DearImguiSharp.ImVectorImGuiGroupData.__Internal GroupStack;

            internal fixed short StackSizesBackup[6];

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiWindowTempData@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiWindowTempData> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiWindowTempData>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiWindowTempData __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiWindowTempData(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiWindowTempData __CreateInstance(global::DearImguiSharp.ImGuiWindowTempData.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiWindowTempData(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiWindowTempData.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiWindowTempData.__Internal));
            *(global::DearImguiSharp.ImGuiWindowTempData.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiWindowTempData(global::DearImguiSharp.ImGuiWindowTempData.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiWindowTempData(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiWindowTempData()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiWindowTempData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiWindowTempData(global::DearImguiSharp.ImGuiWindowTempData _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiWindowTempData.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiWindowTempData __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVec2 CursorPos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CursorPos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->CursorPos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 CursorPosPrevLine
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CursorPosPrevLine));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->CursorPosPrevLine = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 CursorStartPos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CursorStartPos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->CursorStartPos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 CursorMaxPos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CursorMaxPos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->CursorMaxPos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 CurrLineSize
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CurrLineSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->CurrLineSize = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 PrevLineSize
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->PrevLineSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->PrevLineSize = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public float CurrLineTextBaseOffset
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CurrLineTextBaseOffset;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->CurrLineTextBaseOffset = value;
            }
        }

        public float PrevLineTextBaseOffset
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->PrevLineTextBaseOffset;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->PrevLineTextBaseOffset = value;
            }
        }

        public global::DearImguiSharp.ImVec1 Indent
        {
            get
            {
                return global::DearImguiSharp.ImVec1.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->Indent));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->Indent = *(global::DearImguiSharp.ImVec1.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec1 ColumnsOffset
        {
            get
            {
                return global::DearImguiSharp.ImVec1.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->ColumnsOffset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->ColumnsOffset = *(global::DearImguiSharp.ImVec1.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec1 GroupOffset
        {
            get
            {
                return global::DearImguiSharp.ImVec1.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->GroupOffset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->GroupOffset = *(global::DearImguiSharp.ImVec1.__Internal*) value.__Instance;
            }
        }

        public uint LastItemId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->LastItemId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->LastItemId = value;
            }
        }

        public int LastItemStatusFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->LastItemStatusFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->LastItemStatusFlags = value;
            }
        }

        public global::DearImguiSharp.ImRect LastItemRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->LastItemRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->LastItemRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect LastItemDisplayRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->LastItemDisplayRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->LastItemDisplayRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiNavLayer NavLayerCurrent
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->NavLayerCurrent;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->NavLayerCurrent = value;
            }
        }

        public int NavLayerCurrentMask
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->NavLayerCurrentMask;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->NavLayerCurrentMask = value;
            }
        }

        public int NavLayerActiveMask
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->NavLayerActiveMask;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->NavLayerActiveMask = value;
            }
        }

        public int NavLayerActiveMaskNext
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->NavLayerActiveMaskNext;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->NavLayerActiveMaskNext = value;
            }
        }

        public uint NavFocusScopeIdCurrent
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->NavFocusScopeIdCurrent;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->NavFocusScopeIdCurrent = value;
            }
        }

        public bool NavHideHighlightOneFrame
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->NavHideHighlightOneFrame != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->NavHideHighlightOneFrame = (byte) (value ? 1 : 0);
            }
        }

        public bool NavHasScroll
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->NavHasScroll != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->NavHasScroll = (byte) (value ? 1 : 0);
            }
        }

        public bool MenuBarAppending
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->MenuBarAppending != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->MenuBarAppending = (byte) (value ? 1 : 0);
            }
        }

        public global::DearImguiSharp.ImVec2 MenuBarOffset
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->MenuBarOffset));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->MenuBarOffset = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiMenuColumns MenuColumns
        {
            get
            {
                return global::DearImguiSharp.ImGuiMenuColumns.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->MenuColumns));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->MenuColumns = *(global::DearImguiSharp.ImGuiMenuColumns.__Internal*) value.__Instance;
            }
        }

        public int TreeDepth
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->TreeDepth;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->TreeDepth = value;
            }
        }

        public uint TreeJumpToParentOnPopMask
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->TreeJumpToParentOnPopMask;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->TreeJumpToParentOnPopMask = value;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiWindowPtr ChildWindows
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiWindowPtr.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->ChildWindows));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->ChildWindows = *(global::DearImguiSharp.ImVectorImGuiWindowPtr.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiStorage StateStorage
        {
            get
            {
                global::DearImguiSharp.ImGuiStorage __result0;
                if (((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->StateStorage == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiStorage.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->StateStorage))
                    __result0 = (global::DearImguiSharp.ImGuiStorage) global::DearImguiSharp.ImGuiStorage.NativeToManagedMap[((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->StateStorage];
                else __result0 = global::DearImguiSharp.ImGuiStorage.__CreateInstance(((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->StateStorage);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->StateStorage = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiColumns CurrentColumns
        {
            get
            {
                global::DearImguiSharp.ImGuiColumns __result0;
                if (((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CurrentColumns == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiColumns.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CurrentColumns))
                    __result0 = (global::DearImguiSharp.ImGuiColumns) global::DearImguiSharp.ImGuiColumns.NativeToManagedMap[((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CurrentColumns];
                else __result0 = global::DearImguiSharp.ImGuiColumns.__CreateInstance(((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->CurrentColumns);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->CurrentColumns = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public int LayoutType
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->LayoutType;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->LayoutType = value;
            }
        }

        public int ParentLayoutType
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->ParentLayoutType;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->ParentLayoutType = value;
            }
        }

        public int FocusCounterRegular
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->FocusCounterRegular;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->FocusCounterRegular = value;
            }
        }

        public int FocusCounterTabStop
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->FocusCounterTabStop;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->FocusCounterTabStop = value;
            }
        }

        public int ItemFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->ItemFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->ItemFlags = value;
            }
        }

        public float ItemWidth
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->ItemWidth;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->ItemWidth = value;
            }
        }

        public float TextWrapPos
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->TextWrapPos;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->TextWrapPos = value;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiItemFlags ItemFlagsStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiItemFlags.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->ItemFlagsStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->ItemFlagsStack = *(global::DearImguiSharp.ImVectorImGuiItemFlags.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVector_float ItemWidthStack
        {
            get
            {
                return global::DearImguiSharp.ImVector_float.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->ItemWidthStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->ItemWidthStack = *(global::DearImguiSharp.ImVector_float.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVector_float TextWrapPosStack
        {
            get
            {
                return global::DearImguiSharp.ImVector_float.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->TextWrapPosStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->TextWrapPosStack = *(global::DearImguiSharp.ImVector_float.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiGroupData GroupStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiGroupData.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->GroupStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->GroupStack = *(global::DearImguiSharp.ImVectorImGuiGroupData.__Internal*) value.__Instance;
            }
        }

        public short[] StackSizesBackup
        {
            get
            {
                short[] __value = null;
                if (((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->StackSizesBackup != null)
                {
                    __value = new short[6];
                    for (int i = 0; i < 6; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*) __Instance)->StackSizesBackup[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 6; i++)
                        ((global::DearImguiSharp.ImGuiWindowTempData.__Internal*)__Instance)->StackSizesBackup[i] = value[i];
                }
            }
        }
    }

    public unsafe partial class ImGuiWindow : IDisposable
    {
        public partial struct __Internal
        {
            internal global::System.IntPtr Name;

            internal uint ID;

            internal int Flags;

            internal global::DearImguiSharp.ImVec2.__Internal Pos;

            internal global::DearImguiSharp.ImVec2.__Internal Size;

            internal global::DearImguiSharp.ImVec2.__Internal SizeFull;

            internal global::DearImguiSharp.ImVec2.__Internal ContentSize;

            internal global::DearImguiSharp.ImVec2.__Internal ContentSizeExplicit;

            internal global::DearImguiSharp.ImVec2.__Internal WindowPadding;

            internal float WindowRounding;

            internal float WindowBorderSize;

            internal int NameBufLen;

            internal uint MoveId;

            internal uint ChildId;

            internal global::DearImguiSharp.ImVec2.__Internal Scroll;

            internal global::DearImguiSharp.ImVec2.__Internal ScrollMax;

            internal global::DearImguiSharp.ImVec2.__Internal ScrollTarget;

            internal global::DearImguiSharp.ImVec2.__Internal ScrollTargetCenterRatio;

            internal global::DearImguiSharp.ImVec2.__Internal ScrollbarSizes;

            internal byte ScrollbarX;

            internal byte ScrollbarY;

            internal byte Active;

            internal byte WasActive;

            internal byte WriteAccessed;

            internal byte Collapsed;

            internal byte WantCollapseToggle;

            internal byte SkipItems;

            internal byte Appearing;

            internal byte Hidden;

            internal byte IsFallbackWindow;

            internal byte HasCloseButton;

            internal sbyte ResizeBorderHeld;

            internal short BeginCount;

            internal short BeginOrderWithinParent;

            internal short BeginOrderWithinContext;

            internal uint PopupId;

            internal sbyte AutoFitFramesX;

            internal sbyte AutoFitFramesY;

            internal sbyte AutoFitChildAxises;

            internal byte AutoFitOnlyGrows;

            internal int AutoPosLastDirection;

            internal int HiddenFramesCanSkipItems;

            internal int HiddenFramesCannotSkipItems;

            internal int SetWindowPosAllowFlags;

            internal int SetWindowSizeAllowFlags;

            internal int SetWindowCollapsedAllowFlags;

            internal global::DearImguiSharp.ImVec2.__Internal SetWindowPosVal;

            internal global::DearImguiSharp.ImVec2.__Internal SetWindowPosPivot;

            internal global::DearImguiSharp.ImVectorImGuiID.__Internal IDStack;

            internal global::DearImguiSharp.ImGuiWindowTempData.__Internal DC;

            internal global::DearImguiSharp.ImRect.__Internal OuterRectClipped;

            internal global::DearImguiSharp.ImRect.__Internal InnerRect;

            internal global::DearImguiSharp.ImRect.__Internal InnerClipRect;

            internal global::DearImguiSharp.ImRect.__Internal WorkRect;

            internal global::DearImguiSharp.ImRect.__Internal ClipRect;

            internal global::DearImguiSharp.ImRect.__Internal ContentRegionRect;

            internal int LastFrameActive;

            internal float LastTimeActive;

            internal float ItemWidthDefault;

            internal global::DearImguiSharp.ImGuiStorage.__Internal StateStorage;

            internal global::DearImguiSharp.ImVectorImGuiColumns.__Internal ColumnsStorage;

            internal float FontWindowScale;

            internal int SettingsOffset;

            internal global::System.IntPtr DrawList;

            internal global::DearImguiSharp.ImDrawList.__Internal DrawListInst;

            internal global::System.IntPtr ParentWindow;

            internal global::System.IntPtr RootWindow;

            internal global::System.IntPtr RootWindowForTitleBarHighlight;

            internal global::System.IntPtr RootWindowForNav;

            internal global::System.IntPtr NavLastChildNavWindow;

            internal fixed uint NavLastIds[2];

            internal fixed byte NavRectRel[32];

            internal byte MemoryCompacted;

            internal int MemoryDrawListIdxCapacity;

            internal int MemoryDrawListVtxCapacity;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiWindow@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiWindow> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiWindow>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiWindow __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiWindow(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiWindow __CreateInstance(global::DearImguiSharp.ImGuiWindow.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiWindow(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiWindow.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiWindow.__Internal));
            *(global::DearImguiSharp.ImGuiWindow.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiWindow(global::DearImguiSharp.ImGuiWindow.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiWindow(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiWindow()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiWindow.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiWindow(global::DearImguiSharp.ImGuiWindow _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiWindow.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiWindow.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiWindow __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public sbyte* Name
        {
            get
            {
                return (sbyte*) ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->Name;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->Name = (global::System.IntPtr) value;
            }
        }

        public uint ID
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ID;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ID = value;
            }
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->Flags = value;
            }
        }

        public global::DearImguiSharp.ImVec2 Pos
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->Pos));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->Pos = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 Size
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->Size));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->Size = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 SizeFull
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->SizeFull));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->SizeFull = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 ContentSize
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ContentSize));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ContentSize = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 ContentSizeExplicit
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ContentSizeExplicit));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ContentSizeExplicit = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 WindowPadding
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->WindowPadding));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->WindowPadding = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public float WindowRounding
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->WindowRounding;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->WindowRounding = value;
            }
        }

        public float WindowBorderSize
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->WindowBorderSize;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->WindowBorderSize = value;
            }
        }

        public int NameBufLen
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->NameBufLen;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->NameBufLen = value;
            }
        }

        public uint MoveId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->MoveId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->MoveId = value;
            }
        }

        public uint ChildId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ChildId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ChildId = value;
            }
        }

        public global::DearImguiSharp.ImVec2 Scroll
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->Scroll));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->Scroll = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 ScrollMax
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ScrollMax));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ScrollMax = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 ScrollTarget
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ScrollTarget));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ScrollTarget = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 ScrollTargetCenterRatio
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ScrollTargetCenterRatio));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ScrollTargetCenterRatio = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 ScrollbarSizes
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ScrollbarSizes));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ScrollbarSizes = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public bool ScrollbarX
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ScrollbarX != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ScrollbarX = (byte) (value ? 1 : 0);
            }
        }

        public bool ScrollbarY
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ScrollbarY != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ScrollbarY = (byte) (value ? 1 : 0);
            }
        }

        public bool Active
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->Active != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->Active = (byte) (value ? 1 : 0);
            }
        }

        public bool WasActive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->WasActive != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->WasActive = (byte) (value ? 1 : 0);
            }
        }

        public bool WriteAccessed
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->WriteAccessed != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->WriteAccessed = (byte) (value ? 1 : 0);
            }
        }

        public bool Collapsed
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->Collapsed != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->Collapsed = (byte) (value ? 1 : 0);
            }
        }

        public bool WantCollapseToggle
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->WantCollapseToggle != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->WantCollapseToggle = (byte) (value ? 1 : 0);
            }
        }

        public bool SkipItems
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->SkipItems != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->SkipItems = (byte) (value ? 1 : 0);
            }
        }

        public bool Appearing
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->Appearing != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->Appearing = (byte) (value ? 1 : 0);
            }
        }

        public bool Hidden
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->Hidden != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->Hidden = (byte) (value ? 1 : 0);
            }
        }

        public bool IsFallbackWindow
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->IsFallbackWindow != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->IsFallbackWindow = (byte) (value ? 1 : 0);
            }
        }

        public bool HasCloseButton
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->HasCloseButton != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->HasCloseButton = (byte) (value ? 1 : 0);
            }
        }

        public sbyte ResizeBorderHeld
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ResizeBorderHeld;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ResizeBorderHeld = value;
            }
        }

        public short BeginCount
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->BeginCount;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->BeginCount = value;
            }
        }

        public short BeginOrderWithinParent
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->BeginOrderWithinParent;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->BeginOrderWithinParent = value;
            }
        }

        public short BeginOrderWithinContext
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->BeginOrderWithinContext;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->BeginOrderWithinContext = value;
            }
        }

        public uint PopupId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->PopupId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->PopupId = value;
            }
        }

        public sbyte AutoFitFramesX
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->AutoFitFramesX;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->AutoFitFramesX = value;
            }
        }

        public sbyte AutoFitFramesY
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->AutoFitFramesY;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->AutoFitFramesY = value;
            }
        }

        public sbyte AutoFitChildAxises
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->AutoFitChildAxises;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->AutoFitChildAxises = value;
            }
        }

        public bool AutoFitOnlyGrows
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->AutoFitOnlyGrows != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->AutoFitOnlyGrows = (byte) (value ? 1 : 0);
            }
        }

        public int AutoPosLastDirection
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->AutoPosLastDirection;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->AutoPosLastDirection = value;
            }
        }

        public int HiddenFramesCanSkipItems
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->HiddenFramesCanSkipItems;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->HiddenFramesCanSkipItems = value;
            }
        }

        public int HiddenFramesCannotSkipItems
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->HiddenFramesCannotSkipItems;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->HiddenFramesCannotSkipItems = value;
            }
        }

        public int SetWindowPosAllowFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->SetWindowPosAllowFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->SetWindowPosAllowFlags = value;
            }
        }

        public int SetWindowSizeAllowFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->SetWindowSizeAllowFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->SetWindowSizeAllowFlags = value;
            }
        }

        public int SetWindowCollapsedAllowFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->SetWindowCollapsedAllowFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->SetWindowCollapsedAllowFlags = value;
            }
        }

        public global::DearImguiSharp.ImVec2 SetWindowPosVal
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->SetWindowPosVal));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->SetWindowPosVal = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVec2 SetWindowPosPivot
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->SetWindowPosPivot));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->SetWindowPosPivot = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiID IDStack
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiID.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->IDStack));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->IDStack = *(global::DearImguiSharp.ImVectorImGuiID.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindowTempData DC
        {
            get
            {
                return global::DearImguiSharp.ImGuiWindowTempData.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->DC));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->DC = *(global::DearImguiSharp.ImGuiWindowTempData.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect OuterRectClipped
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->OuterRectClipped));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->OuterRectClipped = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect InnerRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->InnerRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->InnerRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect InnerClipRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->InnerClipRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->InnerClipRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect WorkRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->WorkRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->WorkRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect ClipRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ClipRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ClipRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect ContentRegionRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ContentRegionRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ContentRegionRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public int LastFrameActive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->LastFrameActive;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->LastFrameActive = value;
            }
        }

        public float LastTimeActive
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->LastTimeActive;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->LastTimeActive = value;
            }
        }

        public float ItemWidthDefault
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ItemWidthDefault;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ItemWidthDefault = value;
            }
        }

        public global::DearImguiSharp.ImGuiStorage StateStorage
        {
            get
            {
                return global::DearImguiSharp.ImGuiStorage.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->StateStorage));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->StateStorage = *(global::DearImguiSharp.ImGuiStorage.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImVectorImGuiColumns ColumnsStorage
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiColumns.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ColumnsStorage));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ColumnsStorage = *(global::DearImguiSharp.ImVectorImGuiColumns.__Internal*) value.__Instance;
            }
        }

        public float FontWindowScale
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->FontWindowScale;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->FontWindowScale = value;
            }
        }

        public int SettingsOffset
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->SettingsOffset;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->SettingsOffset = value;
            }
        }

        public global::DearImguiSharp.ImDrawList DrawList
        {
            get
            {
                global::DearImguiSharp.ImDrawList __result0;
                if (((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->DrawList == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImDrawList.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->DrawList))
                    __result0 = (global::DearImguiSharp.ImDrawList) global::DearImguiSharp.ImDrawList.NativeToManagedMap[((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->DrawList];
                else __result0 = global::DearImguiSharp.ImDrawList.__CreateInstance(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->DrawList);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->DrawList = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImDrawList DrawListInst
        {
            get
            {
                return global::DearImguiSharp.ImDrawList.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->DrawListInst));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->DrawListInst = *(global::DearImguiSharp.ImDrawList.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow ParentWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ParentWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ParentWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ParentWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->ParentWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->ParentWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow RootWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->RootWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow RootWindowForTitleBarHighlight
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindowForTitleBarHighlight == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindowForTitleBarHighlight))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindowForTitleBarHighlight];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindowForTitleBarHighlight);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->RootWindowForTitleBarHighlight = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow RootWindowForNav
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindowForNav == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindowForNav))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindowForNav];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->RootWindowForNav);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->RootWindowForNav = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiWindow NavLastChildNavWindow
        {
            get
            {
                global::DearImguiSharp.ImGuiWindow __result0;
                if (((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->NavLastChildNavWindow == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->NavLastChildNavWindow))
                    __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->NavLastChildNavWindow];
                else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->NavLastChildNavWindow);
                return __result0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->NavLastChildNavWindow = ReferenceEquals(value, null) ? global::System.IntPtr.Zero : value.__Instance;
            }
        }

        public uint[] NavLastIds
        {
            get
            {
                uint[] __value = null;
                if (((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->NavLastIds != null)
                {
                    __value = new uint[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->NavLastIds[i];
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    for (int i = 0; i < 2; i++)
                        ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->NavLastIds[i] = value[i];
                }
            }
        }

        public global::DearImguiSharp.ImRect[] NavRectRel
        {
            get
            {
                global::DearImguiSharp.ImRect[] __value = null;
                if (((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->NavRectRel != null)
                {
                    __value = new global::DearImguiSharp.ImRect[2];
                    for (int i = 0; i < 2; i++)
                        __value[i] = global::DearImguiSharp.ImRect.__CreateInstance(*((global::DearImguiSharp.ImRect.__Internal*)&(((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->NavRectRel[i * sizeof(global::DearImguiSharp.ImRect.__Internal)])));
                }
                return __value;
            }

            set
            {
                if (value != null)
                {
                    if (value.Length != 2)
                        throw new ArgumentOutOfRangeException("value", "The dimensions of the provided array don't match the required size.");
                    for (int i = 0; i < 2; i++)
                        *(global::DearImguiSharp.ImRect.__Internal*) &((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->NavRectRel[i * sizeof(global::DearImguiSharp.ImRect.__Internal)] = *(global::DearImguiSharp.ImRect.__Internal*)value[i].__Instance;
                }
            }
        }

        public bool MemoryCompacted
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->MemoryCompacted != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->MemoryCompacted = (byte) (value ? 1 : 0);
            }
        }

        public int MemoryDrawListIdxCapacity
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->MemoryDrawListIdxCapacity;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->MemoryDrawListIdxCapacity = value;
            }
        }

        public int MemoryDrawListVtxCapacity
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiWindow.__Internal*) __Instance)->MemoryDrawListVtxCapacity;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiWindow.__Internal*)__Instance)->MemoryDrawListVtxCapacity = value;
            }
        }
    }

    public unsafe partial class ImGuiItemHoveredDataBackup : IDisposable
    {
        public partial struct __Internal
        {
            internal uint LastItemId;

            internal int LastItemStatusFlags;

            internal global::DearImguiSharp.ImRect.__Internal LastItemRect;

            internal global::DearImguiSharp.ImRect.__Internal LastItemDisplayRect;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiItemHoveredDataBackup@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiItemHoveredDataBackup> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiItemHoveredDataBackup>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiItemHoveredDataBackup __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiItemHoveredDataBackup(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiItemHoveredDataBackup __CreateInstance(global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiItemHoveredDataBackup(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal));
            *(global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiItemHoveredDataBackup(global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiItemHoveredDataBackup(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiItemHoveredDataBackup()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiItemHoveredDataBackup(global::DearImguiSharp.ImGuiItemHoveredDataBackup _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiItemHoveredDataBackup __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint LastItemId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*) __Instance)->LastItemId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*)__Instance)->LastItemId = value;
            }
        }

        public int LastItemStatusFlags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*) __Instance)->LastItemStatusFlags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*)__Instance)->LastItemStatusFlags = value;
            }
        }

        public global::DearImguiSharp.ImRect LastItemRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*) __Instance)->LastItemRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*)__Instance)->LastItemRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImRect LastItemDisplayRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*) __Instance)->LastItemDisplayRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiItemHoveredDataBackup.__Internal*)__Instance)->LastItemDisplayRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiTabItem : IDisposable
    {
        public partial struct __Internal
        {
            internal uint ID;

            internal int Flags;

            internal int LastFrameVisible;

            internal int LastFrameSelected;

            internal int NameOffset;

            internal float Offset;

            internal float Width;

            internal float ContentWidth;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiTabItem@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTabItem> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTabItem>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiTabItem __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTabItem(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiTabItem __CreateInstance(global::DearImguiSharp.ImGuiTabItem.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTabItem(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiTabItem.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTabItem.__Internal));
            *(global::DearImguiSharp.ImGuiTabItem.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiTabItem(global::DearImguiSharp.ImGuiTabItem.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiTabItem(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiTabItem()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTabItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiTabItem(global::DearImguiSharp.ImGuiTabItem _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTabItem.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiTabItem.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiTabItem.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiTabItem __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint ID
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabItem.__Internal*) __Instance)->ID;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabItem.__Internal*)__Instance)->ID = value;
            }
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabItem.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabItem.__Internal*)__Instance)->Flags = value;
            }
        }

        public int LastFrameVisible
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabItem.__Internal*) __Instance)->LastFrameVisible;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabItem.__Internal*)__Instance)->LastFrameVisible = value;
            }
        }

        public int LastFrameSelected
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabItem.__Internal*) __Instance)->LastFrameSelected;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabItem.__Internal*)__Instance)->LastFrameSelected = value;
            }
        }

        public int NameOffset
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabItem.__Internal*) __Instance)->NameOffset;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabItem.__Internal*)__Instance)->NameOffset = value;
            }
        }

        public float Offset
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabItem.__Internal*) __Instance)->Offset;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabItem.__Internal*)__Instance)->Offset = value;
            }
        }

        public float Width
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabItem.__Internal*) __Instance)->Width;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabItem.__Internal*)__Instance)->Width = value;
            }
        }

        public float ContentWidth
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabItem.__Internal*) __Instance)->ContentWidth;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabItem.__Internal*)__Instance)->ContentWidth = value;
            }
        }
    }

    public unsafe partial class ImGuiTabBar : IDisposable
    {
        public partial struct __Internal
        {
            internal global::DearImguiSharp.ImVectorImGuiTabItem.__Internal Tabs;

            internal uint ID;

            internal uint SelectedTabId;

            internal uint NextSelectedTabId;

            internal uint VisibleTabId;

            internal int CurrFrameVisible;

            internal int PrevFrameVisible;

            internal global::DearImguiSharp.ImRect.__Internal BarRect;

            internal float LastTabContentHeight;

            internal float OffsetMax;

            internal float OffsetMaxIdeal;

            internal float OffsetNextTab;

            internal float ScrollingAnim;

            internal float ScrollingTarget;

            internal float ScrollingTargetDistToVisibility;

            internal float ScrollingSpeed;

            internal int Flags;

            internal uint ReorderRequestTabId;

            internal sbyte ReorderRequestDir;

            internal byte WantLayout;

            internal byte VisibleTabWasSubmitted;

            internal short LastTabItemIdx;

            internal global::DearImguiSharp.ImVec2.__Internal FramePadding;

            internal global::DearImguiSharp.ImGuiTextBuffer.__Internal TabsNames;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiTabBar@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTabBar> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTabBar>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiTabBar __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTabBar(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiTabBar __CreateInstance(global::DearImguiSharp.ImGuiTabBar.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTabBar(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiTabBar.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTabBar.__Internal));
            *(global::DearImguiSharp.ImGuiTabBar.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiTabBar(global::DearImguiSharp.ImGuiTabBar.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiTabBar(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiTabBar()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTabBar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiTabBar(global::DearImguiSharp.ImGuiTabBar _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTabBar.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiTabBar.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiTabBar __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public global::DearImguiSharp.ImVectorImGuiTabItem Tabs
        {
            get
            {
                return global::DearImguiSharp.ImVectorImGuiTabItem.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->Tabs));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->Tabs = *(global::DearImguiSharp.ImVectorImGuiTabItem.__Internal*) value.__Instance;
            }
        }

        public uint ID
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->ID;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->ID = value;
            }
        }

        public uint SelectedTabId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->SelectedTabId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->SelectedTabId = value;
            }
        }

        public uint NextSelectedTabId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->NextSelectedTabId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->NextSelectedTabId = value;
            }
        }

        public uint VisibleTabId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->VisibleTabId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->VisibleTabId = value;
            }
        }

        public int CurrFrameVisible
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->CurrFrameVisible;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->CurrFrameVisible = value;
            }
        }

        public int PrevFrameVisible
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->PrevFrameVisible;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->PrevFrameVisible = value;
            }
        }

        public global::DearImguiSharp.ImRect BarRect
        {
            get
            {
                return global::DearImguiSharp.ImRect.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->BarRect));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->BarRect = *(global::DearImguiSharp.ImRect.__Internal*) value.__Instance;
            }
        }

        public float LastTabContentHeight
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->LastTabContentHeight;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->LastTabContentHeight = value;
            }
        }

        public float OffsetMax
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->OffsetMax;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->OffsetMax = value;
            }
        }

        public float OffsetMaxIdeal
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->OffsetMaxIdeal;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->OffsetMaxIdeal = value;
            }
        }

        public float OffsetNextTab
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->OffsetNextTab;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->OffsetNextTab = value;
            }
        }

        public float ScrollingAnim
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->ScrollingAnim;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->ScrollingAnim = value;
            }
        }

        public float ScrollingTarget
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->ScrollingTarget;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->ScrollingTarget = value;
            }
        }

        public float ScrollingTargetDistToVisibility
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->ScrollingTargetDistToVisibility;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->ScrollingTargetDistToVisibility = value;
            }
        }

        public float ScrollingSpeed
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->ScrollingSpeed;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->ScrollingSpeed = value;
            }
        }

        public int Flags
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->Flags;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->Flags = value;
            }
        }

        public uint ReorderRequestTabId
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->ReorderRequestTabId;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->ReorderRequestTabId = value;
            }
        }

        public sbyte ReorderRequestDir
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->ReorderRequestDir;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->ReorderRequestDir = value;
            }
        }

        public bool WantLayout
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->WantLayout != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->WantLayout = (byte) (value ? 1 : 0);
            }
        }

        public bool VisibleTabWasSubmitted
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->VisibleTabWasSubmitted != 0;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->VisibleTabWasSubmitted = (byte) (value ? 1 : 0);
            }
        }

        public short LastTabItemIdx
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->LastTabItemIdx;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->LastTabItemIdx = value;
            }
        }

        public global::DearImguiSharp.ImVec2 FramePadding
        {
            get
            {
                return global::DearImguiSharp.ImVec2.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->FramePadding));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->FramePadding = *(global::DearImguiSharp.ImVec2.__Internal*) value.__Instance;
            }
        }

        public global::DearImguiSharp.ImGuiTextBuffer TabsNames
        {
            get
            {
                return global::DearImguiSharp.ImGuiTextBuffer.__CreateInstance(new global::System.IntPtr(&((global::DearImguiSharp.ImGuiTabBar.__Internal*) __Instance)->TabsNames));
            }

            set
            {
                if (ReferenceEquals(value, null))
                    throw new global::System.ArgumentNullException("value", "Cannot be null because it is passed by value.");
                ((global::DearImguiSharp.ImGuiTabBar.__Internal*)__Instance)->TabsNames = *(global::DearImguiSharp.ImGuiTextBuffer.__Internal*) value.__Instance;
            }
        }
    }

    public unsafe partial class ImGuiTextRange : IDisposable
    {
        public partial struct __Internal
        {
            internal global::System.IntPtr b;

            internal global::System.IntPtr e;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiTextRange@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTextRange> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiTextRange>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiTextRange __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTextRange(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiTextRange __CreateInstance(global::DearImguiSharp.ImGuiTextRange.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiTextRange(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiTextRange.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTextRange.__Internal));
            *(global::DearImguiSharp.ImGuiTextRange.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiTextRange(global::DearImguiSharp.ImGuiTextRange.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiTextRange(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiTextRange()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTextRange.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiTextRange(global::DearImguiSharp.ImGuiTextRange _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiTextRange.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiTextRange.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiTextRange.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiTextRange __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public string B
        {
            get
            {
                if (((global::DearImguiSharp.ImGuiTextRange.__Internal*) __Instance)->b == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImGuiTextRange.__Internal*) __Instance)->b;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImGuiTextRange.__Internal*) __Instance)->b, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImGuiTextRange.__Internal*)__Instance)->b = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }

        public string E
        {
            get
            {
                if (((global::DearImguiSharp.ImGuiTextRange.__Internal*) __Instance)->e == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) ((global::DearImguiSharp.ImGuiTextRange.__Internal*) __Instance)->e;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) ((global::DearImguiSharp.ImGuiTextRange.__Internal*) __Instance)->e, __length);
            }

            set
            {
                byte[] __bytes0 = global::System.Text.Encoding.UTF8.GetBytes(value);
                fixed (byte* __bytePtr0 = __bytes0)
                {
                    ((global::DearImguiSharp.ImGuiTextRange.__Internal*)__Instance)->e = (global::System.IntPtr) new global::System.IntPtr(__bytePtr0);
                }
            }
        }
    }

    public unsafe partial class ImGuiStoragePair : IDisposable
    {
        public partial struct __Internal
        {
            internal uint key;

            internal int val_i;

            internal float val_f;

            internal global::System.IntPtr val_p;

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="??0ImGuiStoragePair@@QEAA@AEBU0@@Z")]
            internal static extern global::System.IntPtr cctor(global::System.IntPtr __instance, global::System.IntPtr _0);
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiStoragePair> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ImGuiStoragePair>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ImGuiStoragePair __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiStoragePair(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ImGuiStoragePair __CreateInstance(global::DearImguiSharp.ImGuiStoragePair.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ImGuiStoragePair(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ImGuiStoragePair.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStoragePair.__Internal));
            *(global::DearImguiSharp.ImGuiStoragePair.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ImGuiStoragePair(global::DearImguiSharp.ImGuiStoragePair.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ImGuiStoragePair(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }

        public ImGuiStoragePair()
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStoragePair.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        public ImGuiStoragePair(global::DearImguiSharp.ImGuiStoragePair _0)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ImGuiStoragePair.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            *((global::DearImguiSharp.ImGuiStoragePair.__Internal*) __Instance) = *((global::DearImguiSharp.ImGuiStoragePair.__Internal*) _0.__Instance);
        }

        public void Dispose()
        {
            Dispose(disposing: true);
        }

        public virtual void Dispose(bool disposing)
        {
            if (__Instance == IntPtr.Zero)
                return;
            global::DearImguiSharp.ImGuiStoragePair __dummy;
            NativeToManagedMap.TryRemove(__Instance, out __dummy);
            if (__ownsNativeInstance)
                Marshal.FreeHGlobal(__Instance);
            __Instance = IntPtr.Zero;
        }

        public uint Key
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStoragePair.__Internal*) __Instance)->key;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStoragePair.__Internal*)__Instance)->key = value;
            }
        }

        public int ValI
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStoragePair.__Internal*) __Instance)->val_i;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStoragePair.__Internal*)__Instance)->val_i = value;
            }
        }

        public float ValF
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStoragePair.__Internal*) __Instance)->val_f;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStoragePair.__Internal*)__Instance)->val_f = value;
            }
        }

        public global::System.IntPtr ValP
        {
            get
            {
                return ((global::DearImguiSharp.ImGuiStoragePair.__Internal*) __Instance)->val_p;
            }

            set
            {
                ((global::DearImguiSharp.ImGuiStoragePair.__Internal*)__Instance)->val_p = (global::System.IntPtr) value;
            }
        }
    }

    public unsafe partial class ImGui
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec2_ImVec2Nil")]
            internal static extern global::System.IntPtr ImVec2ImVec2Nil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec2_destroy")]
            internal static extern void ImVec2_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec2_ImVec2Float")]
            internal static extern global::System.IntPtr ImVec2ImVec2Float(float _x, float _y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec4_ImVec4Nil")]
            internal static extern global::System.IntPtr ImVec4ImVec4Nil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec4_destroy")]
            internal static extern void ImVec4_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec4_ImVec4Float")]
            internal static extern global::System.IntPtr ImVec4ImVec4Float(float _x, float _y, float _z, float _w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCreateContext")]
            internal static extern global::System.IntPtr CreateContext(global::System.IntPtr shared_font_atlas);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDestroyContext")]
            internal static extern void DestroyContext(global::System.IntPtr ctx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetCurrentContext")]
            internal static extern global::System.IntPtr GetCurrentContext();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetCurrentContext")]
            internal static extern void SetCurrentContext(global::System.IntPtr ctx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDebugCheckVersionAndDataLayout")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DebugCheckVersionAndDataLayout([MarshalAs(UnmanagedType.LPUTF8Str)] string version_str, ulong sz_io, ulong sz_style, ulong sz_vec2, ulong sz_vec4, ulong sz_drawvert, ulong sz_drawidx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetIO")]
            internal static extern global::System.IntPtr GetIO();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetStyle")]
            internal static extern global::System.IntPtr GetStyle();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igNewFrame")]
            internal static extern void NewFrame();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndFrame")]
            internal static extern void EndFrame();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRender")]
            internal static extern void Render();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetDrawData")]
            internal static extern global::System.IntPtr GetDrawData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShowDemoWindow")]
            internal static extern void ShowDemoWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShowAboutWindow")]
            internal static extern void ShowAboutWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShowMetricsWindow")]
            internal static extern void ShowMetricsWindow(bool* p_open);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShowStyleEditor")]
            internal static extern void ShowStyleEditor(global::System.IntPtr @ref);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShowStyleSelector")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ShowStyleSelector([MarshalAs(UnmanagedType.LPUTF8Str)] string label);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShowFontSelector")]
            internal static extern void ShowFontSelector([MarshalAs(UnmanagedType.LPUTF8Str)] string label);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShowUserGuide")]
            internal static extern void ShowUserGuide();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetVersion")]
            internal static extern global::System.IntPtr GetVersion();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igStyleColorsDark")]
            internal static extern void StyleColorsDark(global::System.IntPtr dst);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igStyleColorsClassic")]
            internal static extern void StyleColorsClassic(global::System.IntPtr dst);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igStyleColorsLight")]
            internal static extern void StyleColorsLight(global::System.IntPtr dst);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBegin")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Begin([MarshalAs(UnmanagedType.LPUTF8Str)] string name, bool* p_open, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEnd")]
            internal static extern void End();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginChildStr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChildStr([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, global::DearImguiSharp.ImVec2.__Internal size, bool border, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginChildID")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChildID(uint id, global::DearImguiSharp.ImVec2.__Internal size, bool border, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndChild")]
            internal static extern void EndChild();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsWindowAppearing")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowAppearing();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsWindowCollapsed")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowCollapsed();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsWindowFocused")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowFocused(int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsWindowHovered")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowHovered(int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowDrawList")]
            internal static extern global::System.IntPtr GetWindowDrawList();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowPos")]
            internal static extern void GetWindowPos(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowSize")]
            internal static extern void GetWindowSize(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowWidth")]
            internal static extern float GetWindowWidth();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowHeight")]
            internal static extern float GetWindowHeight();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNextWindowPos")]
            internal static extern void SetNextWindowPos(global::DearImguiSharp.ImVec2.__Internal pos, int cond, global::DearImguiSharp.ImVec2.__Internal pivot);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNextWindowSize")]
            internal static extern void SetNextWindowSize(global::DearImguiSharp.ImVec2.__Internal size, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNextWindowSizeConstraints")]
            internal static extern void SetNextWindowSizeConstraints(global::DearImguiSharp.ImVec2.__Internal size_min, global::DearImguiSharp.ImVec2.__Internal size_max, global::System.IntPtr custom_callback, global::System.IntPtr custom_callback_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNextWindowContentSize")]
            internal static extern void SetNextWindowContentSize(global::DearImguiSharp.ImVec2.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNextWindowCollapsed")]
            internal static extern void SetNextWindowCollapsed(bool collapsed, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNextWindowFocus")]
            internal static extern void SetNextWindowFocus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNextWindowBgAlpha")]
            internal static extern void SetNextWindowBgAlpha(float alpha);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowPosVec2")]
            internal static extern void SetWindowPosVec2(global::DearImguiSharp.ImVec2.__Internal pos, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowSizeVec2")]
            internal static extern void SetWindowSizeVec2(global::DearImguiSharp.ImVec2.__Internal size, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowCollapsedBool")]
            internal static extern void SetWindowCollapsedBool(bool collapsed, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowFocusNil")]
            internal static extern void SetWindowFocusNil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowFontScale")]
            internal static extern void SetWindowFontScale(float scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowPosStr")]
            internal static extern void SetWindowPosStr([MarshalAs(UnmanagedType.LPUTF8Str)] string name, global::DearImguiSharp.ImVec2.__Internal pos, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowSizeStr")]
            internal static extern void SetWindowSizeStr([MarshalAs(UnmanagedType.LPUTF8Str)] string name, global::DearImguiSharp.ImVec2.__Internal size, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowCollapsedStr")]
            internal static extern void SetWindowCollapsedStr([MarshalAs(UnmanagedType.LPUTF8Str)] string name, bool collapsed, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowFocusStr")]
            internal static extern void SetWindowFocusStr([MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetContentRegionMax")]
            internal static extern void GetContentRegionMax(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetContentRegionAvail")]
            internal static extern void GetContentRegionAvail(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowContentRegionMin")]
            internal static extern void GetWindowContentRegionMin(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowContentRegionMax")]
            internal static extern void GetWindowContentRegionMax(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowContentRegionWidth")]
            internal static extern float GetWindowContentRegionWidth();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetScrollX")]
            internal static extern float GetScrollX();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetScrollY")]
            internal static extern float GetScrollY();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetScrollMaxX")]
            internal static extern float GetScrollMaxX();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetScrollMaxY")]
            internal static extern float GetScrollMaxY();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollXFloat")]
            internal static extern void SetScrollXFloat(float scroll_x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollYFloat")]
            internal static extern void SetScrollYFloat(float scroll_y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollHereX")]
            internal static extern void SetScrollHereX(float center_x_ratio);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollHereY")]
            internal static extern void SetScrollHereY(float center_y_ratio);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollFromPosXFloat")]
            internal static extern void SetScrollFromPosXFloat(float local_x, float center_x_ratio);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollFromPosYFloat")]
            internal static extern void SetScrollFromPosYFloat(float local_y, float center_y_ratio);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushFont")]
            internal static extern void PushFont(global::System.IntPtr font);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopFont")]
            internal static extern void PopFont();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushStyleColorU32")]
            internal static extern void PushStyleColorU32(int idx, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushStyleColorVec4")]
            internal static extern void PushStyleColorVec4(int idx, global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopStyleColor")]
            internal static extern void PopStyleColor(int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushStyleVarFloat")]
            internal static extern void PushStyleVarFloat(int idx, float val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushStyleVarVec2")]
            internal static extern void PushStyleVarVec2(int idx, global::DearImguiSharp.ImVec2.__Internal val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopStyleVar")]
            internal static extern void PopStyleVar(int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetStyleColorVec4")]
            internal static extern global::System.IntPtr GetStyleColorVec4(int idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetFont")]
            internal static extern global::System.IntPtr GetFont();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetFontSize")]
            internal static extern float GetFontSize();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetFontTexUvWhitePixel")]
            internal static extern void GetFontTexUvWhitePixel(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColorU32Col")]
            internal static extern uint GetColorU32Col(int idx, float alpha_mul);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColorU32Vec4")]
            internal static extern uint GetColorU32Vec4(global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColorU32U32")]
            internal static extern uint GetColorU32U32(uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushItemWidth")]
            internal static extern void PushItemWidth(float item_width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopItemWidth")]
            internal static extern void PopItemWidth();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNextItemWidth")]
            internal static extern void SetNextItemWidth(float item_width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCalcItemWidth")]
            internal static extern float CalcItemWidth();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushTextWrapPos")]
            internal static extern void PushTextWrapPos(float wrap_local_pos_x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopTextWrapPos")]
            internal static extern void PopTextWrapPos();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushAllowKeyboardFocus")]
            internal static extern void PushAllowKeyboardFocus(bool allow_keyboard_focus);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopAllowKeyboardFocus")]
            internal static extern void PopAllowKeyboardFocus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushButtonRepeat")]
            internal static extern void PushButtonRepeat(bool repeat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopButtonRepeat")]
            internal static extern void PopButtonRepeat();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSeparator")]
            internal static extern void Separator();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSameLine")]
            internal static extern void SameLine(float offset_from_start_x, float spacing);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igNewLine")]
            internal static extern void NewLine();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSpacing")]
            internal static extern void Spacing();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDummy")]
            internal static extern void Dummy(global::DearImguiSharp.ImVec2.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIndent")]
            internal static extern void Indent(float indent_w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igUnindent")]
            internal static extern void Unindent(float indent_w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginGroup")]
            internal static extern void BeginGroup();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndGroup")]
            internal static extern void EndGroup();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetCursorPos")]
            internal static extern void GetCursorPos(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetCursorPosX")]
            internal static extern float GetCursorPosX();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetCursorPosY")]
            internal static extern float GetCursorPosY();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetCursorPos")]
            internal static extern void SetCursorPos(global::DearImguiSharp.ImVec2.__Internal local_pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetCursorPosX")]
            internal static extern void SetCursorPosX(float local_x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetCursorPosY")]
            internal static extern void SetCursorPosY(float local_y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetCursorStartPos")]
            internal static extern void GetCursorStartPos(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetCursorScreenPos")]
            internal static extern void GetCursorScreenPos(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetCursorScreenPos")]
            internal static extern void SetCursorScreenPos(global::DearImguiSharp.ImVec2.__Internal pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igAlignTextToFramePadding")]
            internal static extern void AlignTextToFramePadding();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetTextLineHeight")]
            internal static extern float GetTextLineHeight();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetTextLineHeightWithSpacing")]
            internal static extern float GetTextLineHeightWithSpacing();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetFrameHeight")]
            internal static extern float GetFrameHeight();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetFrameHeightWithSpacing")]
            internal static extern float GetFrameHeightWithSpacing();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushIDStr")]
            internal static extern void PushIDStr([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushIDStrStr")]
            internal static extern void PushIDStrStr([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id_begin, [MarshalAs(UnmanagedType.LPUTF8Str)] string str_id_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushIDPtr")]
            internal static extern void PushIDPtr(global::System.IntPtr ptr_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushIDInt")]
            internal static extern void PushIDInt(int int_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopID")]
            internal static extern void PopID();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetIDStr")]
            internal static extern uint GetIDStr([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetIDStrStr")]
            internal static extern uint GetIDStrStr([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id_begin, [MarshalAs(UnmanagedType.LPUTF8Str)] string str_id_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetIDPtr")]
            internal static extern uint GetIDPtr(global::System.IntPtr ptr_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTextUnformatted")]
            internal static extern void TextUnformatted([MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igText")]
            internal static extern void Text([MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTextColored")]
            internal static extern void TextColored(global::System.IntPtr col, [MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTextDisabled")]
            internal static extern void TextDisabled([MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTextWrapped")]
            internal static extern void TextWrapped([MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLabelText")]
            internal static extern void LabelText([MarshalAs(UnmanagedType.LPUTF8Str)] string label, [MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBulletText")]
            internal static extern void BulletText([MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igButton")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Button([MarshalAs(UnmanagedType.LPUTF8Str)] string label, global::DearImguiSharp.ImVec2.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSmallButton")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SmallButton([MarshalAs(UnmanagedType.LPUTF8Str)] string label);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInvisibleButton")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InvisibleButton([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, global::DearImguiSharp.ImVec2.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igArrowButton")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ArrowButton([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImage")]
            internal static extern void Image(global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2.__Internal size, global::DearImguiSharp.ImVec2.__Internal uv0, global::DearImguiSharp.ImVec2.__Internal uv1, global::System.IntPtr tint_col, global::System.IntPtr border_col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImageButton")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImageButton(global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2.__Internal size, global::DearImguiSharp.ImVec2.__Internal uv0, global::DearImguiSharp.ImVec2.__Internal uv1, int frame_padding, global::System.IntPtr bg_col, global::System.IntPtr tint_col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCheckbox")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool Checkbox([MarshalAs(UnmanagedType.LPUTF8Str)] string label, bool* v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCheckboxFlags")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CheckboxFlags([MarshalAs(UnmanagedType.LPUTF8Str)] string label, uint* flags, uint flags_value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRadioButtonBool")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RadioButtonBool([MarshalAs(UnmanagedType.LPUTF8Str)] string label, bool active);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRadioButtonIntPtr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool RadioButtonIntPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* v, int v_button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igProgressBar")]
            internal static extern void ProgressBar(float fraction, global::DearImguiSharp.ImVec2.__Internal size_arg, [MarshalAs(UnmanagedType.LPUTF8Str)] string overlay);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBullet")]
            internal static extern void Bullet();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginCombo")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginCombo([MarshalAs(UnmanagedType.LPUTF8Str)] string label, [MarshalAs(UnmanagedType.LPUTF8Str)] string preview_value, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndCombo")]
            internal static extern void EndCombo();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igComboStr_arr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ComboStr_arr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* current_item, [MarshalAs(UnmanagedType.LPArray)] string[] items, int items_count, int popup_max_height_in_items);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igComboStr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ComboStr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* current_item, [MarshalAs(UnmanagedType.LPUTF8Str)] string items_separated_by_zeros, int popup_max_height_in_items);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igComboFnPtr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ComboFnPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* current_item, global::System.IntPtr items_getter, global::System.IntPtr data, int items_count, int popup_max_height_in_items);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragFloat")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float* v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragFloat2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat2([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragFloat3")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat3([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragFloat4")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloat4([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] v, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragFloatRange2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragFloatRange2([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float* v_current_min, float* v_current_max, float v_speed, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, [MarshalAs(UnmanagedType.LPUTF8Str)] string format_max, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragInt")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragInt2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt2([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int[] v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragInt3")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt3([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int[] v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragInt4")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragInt4([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int[] v, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragIntRange2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragIntRange2([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* v_current_min, int* v_current_max, float v_speed, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, [MarshalAs(UnmanagedType.LPUTF8Str)] string format_max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragScalar")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragScalar([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int data_type, global::System.IntPtr p_data, float v_speed, global::System.IntPtr p_min, global::System.IntPtr p_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragScalarN")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragScalarN([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int data_type, global::System.IntPtr p_data, int components, float v_speed, global::System.IntPtr p_min, global::System.IntPtr p_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderFloat")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderFloat2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat2([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] v, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderFloat3")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat3([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] v, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderFloat4")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderFloat4([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] v, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderAngle")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderAngle([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float* v_rad, float v_degrees_min, float v_degrees_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderInt")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderInt2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt2([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int[] v, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderInt3")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt3([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int[] v, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderInt4")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderInt4([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int[] v, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderScalar")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderScalar([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int data_type, global::System.IntPtr p_data, global::System.IntPtr p_min, global::System.IntPtr p_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderScalarN")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderScalarN([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int data_type, global::System.IntPtr p_data, int components, global::System.IntPtr p_min, global::System.IntPtr p_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igVSliderFloat")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VSliderFloat([MarshalAs(UnmanagedType.LPUTF8Str)] string label, global::DearImguiSharp.ImVec2.__Internal size, float* v, float v_min, float v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igVSliderInt")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VSliderInt([MarshalAs(UnmanagedType.LPUTF8Str)] string label, global::DearImguiSharp.ImVec2.__Internal size, int* v, int v_min, int v_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igVSliderScalar")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool VSliderScalar([MarshalAs(UnmanagedType.LPUTF8Str)] string label, global::DearImguiSharp.ImVec2.__Internal size, int data_type, global::System.IntPtr p_data, global::System.IntPtr p_min, global::System.IntPtr p_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputText")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputText([MarshalAs(UnmanagedType.LPUTF8Str)] string label, sbyte* buf, ulong buf_size, int flags, global::System.IntPtr callback, global::System.IntPtr user_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputTextMultiline")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputTextMultiline([MarshalAs(UnmanagedType.LPUTF8Str)] string label, sbyte* buf, ulong buf_size, global::DearImguiSharp.ImVec2.__Internal size, int flags, global::System.IntPtr callback, global::System.IntPtr user_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputTextWithHint")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputTextWithHint([MarshalAs(UnmanagedType.LPUTF8Str)] string label, [MarshalAs(UnmanagedType.LPUTF8Str)] string hint, sbyte* buf, ulong buf_size, int flags, global::System.IntPtr callback, global::System.IntPtr user_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputFloat")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float* v, float step, float step_fast, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputFloat2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat2([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] v, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputFloat3")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat3([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] v, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputFloat4")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputFloat4([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] v, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputInt")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* v, int step, int step_fast, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputInt2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt2([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int[] v, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputInt3")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt3([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int[] v, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputInt4")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputInt4([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int[] v, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputDouble")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputDouble([MarshalAs(UnmanagedType.LPUTF8Str)] string label, double* v, double step, double step_fast, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputScalar")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputScalar([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int data_type, global::System.IntPtr p_data, global::System.IntPtr p_step, global::System.IntPtr p_step_fast, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputScalarN")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputScalarN([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int data_type, global::System.IntPtr p_data, int components, global::System.IntPtr p_step, global::System.IntPtr p_step_fast, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorEdit3")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorEdit3([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] col, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorEdit4")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorEdit4([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] col, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorPicker3")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorPicker3([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] col, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorPicker4")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorPicker4([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float[] col, int flags, float* ref_col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorButton")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ColorButton([MarshalAs(UnmanagedType.LPUTF8Str)] string desc_id, global::System.IntPtr col, int flags, global::DearImguiSharp.ImVec2.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetColorEditOptions")]
            internal static extern void SetColorEditOptions(int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreeNodeStr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeStr([MarshalAs(UnmanagedType.LPUTF8Str)] string label);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreeNodeStrStr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeStrStr([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, [MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreeNodePtr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodePtr(global::System.IntPtr ptr_id, [MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreeNodeExStr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeExStr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreeNodeExStrStr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeExStrStr([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int flags, [MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreeNodeExPtr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeExPtr(global::System.IntPtr ptr_id, int flags, [MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreePushStr")]
            internal static extern void TreePushStr([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreePushPtr")]
            internal static extern void TreePushPtr(global::System.IntPtr ptr_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreePop")]
            internal static extern void TreePop();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetTreeNodeToLabelSpacing")]
            internal static extern float GetTreeNodeToLabelSpacing();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCollapsingHeaderTreeNodeFlags")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CollapsingHeaderTreeNodeFlags([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCollapsingHeaderBoolPtr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CollapsingHeaderBoolPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, bool* p_open, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNextItemOpen")]
            internal static extern void SetNextItemOpen(bool is_open, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSelectableBool")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SelectableBool([MarshalAs(UnmanagedType.LPUTF8Str)] string label, bool selected, int flags, global::DearImguiSharp.ImVec2.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSelectableBoolPtr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SelectableBoolPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, bool* p_selected, int flags, global::DearImguiSharp.ImVec2.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igListBoxStr_arr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ListBoxStr_arr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* current_item, [MarshalAs(UnmanagedType.LPArray)] string[] items, int items_count, int height_in_items);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igListBoxFnPtr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ListBoxFnPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int* current_item, global::System.IntPtr items_getter, global::System.IntPtr data, int items_count, int height_in_items);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igListBoxHeaderVec2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ListBoxHeaderVec2([MarshalAs(UnmanagedType.LPUTF8Str)] string label, global::DearImguiSharp.ImVec2.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igListBoxHeaderInt")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ListBoxHeaderInt([MarshalAs(UnmanagedType.LPUTF8Str)] string label, int items_count, int height_in_items);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igListBoxFooter")]
            internal static extern void ListBoxFooter();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPlotLinesFloatPtr")]
            internal static extern void PlotLinesFloatPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float* values, int values_count, int values_offset, [MarshalAs(UnmanagedType.LPUTF8Str)] string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2.__Internal graph_size, int stride);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPlotLinesFnPtr")]
            internal static extern void PlotLinesFnPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, global::System.IntPtr values_getter, global::System.IntPtr data, int values_count, int values_offset, [MarshalAs(UnmanagedType.LPUTF8Str)] string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2.__Internal graph_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPlotHistogramFloatPtr")]
            internal static extern void PlotHistogramFloatPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, float* values, int values_count, int values_offset, [MarshalAs(UnmanagedType.LPUTF8Str)] string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2.__Internal graph_size, int stride);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPlotHistogramFnPtr")]
            internal static extern void PlotHistogramFnPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, global::System.IntPtr values_getter, global::System.IntPtr data, int values_count, int values_offset, [MarshalAs(UnmanagedType.LPUTF8Str)] string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2.__Internal graph_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igValueBool")]
            internal static extern void ValueBool([MarshalAs(UnmanagedType.LPUTF8Str)] string prefix, bool b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igValueInt")]
            internal static extern void ValueInt([MarshalAs(UnmanagedType.LPUTF8Str)] string prefix, int v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igValueUint")]
            internal static extern void ValueUint([MarshalAs(UnmanagedType.LPUTF8Str)] string prefix, uint v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igValueFloat")]
            internal static extern void ValueFloat([MarshalAs(UnmanagedType.LPUTF8Str)] string prefix, float v, [MarshalAs(UnmanagedType.LPUTF8Str)] string float_format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginMenuBar")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginMenuBar();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndMenuBar")]
            internal static extern void EndMenuBar();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginMainMenuBar")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginMainMenuBar();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndMainMenuBar")]
            internal static extern void EndMainMenuBar();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginMenu")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginMenu([MarshalAs(UnmanagedType.LPUTF8Str)] string label, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndMenu")]
            internal static extern void EndMenu();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igMenuItemBool")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MenuItemBool([MarshalAs(UnmanagedType.LPUTF8Str)] string label, [MarshalAs(UnmanagedType.LPUTF8Str)] string shortcut, bool selected, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igMenuItemBoolPtr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool MenuItemBoolPtr([MarshalAs(UnmanagedType.LPUTF8Str)] string label, [MarshalAs(UnmanagedType.LPUTF8Str)] string shortcut, bool* p_selected, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginTooltip")]
            internal static extern void BeginTooltip();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndTooltip")]
            internal static extern void EndTooltip();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetTooltip")]
            internal static extern void SetTooltip([MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igOpenPopup")]
            internal static extern void OpenPopup([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginPopup")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopup([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginPopupContextItem")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupContextItem([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int mouse_button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginPopupContextWindow")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupContextWindow([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int mouse_button, bool also_over_items);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginPopupContextVoid")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupContextVoid([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int mouse_button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginPopupModal")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupModal([MarshalAs(UnmanagedType.LPUTF8Str)] string name, bool* p_open, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndPopup")]
            internal static extern void EndPopup();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igOpenPopupOnItemClick")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool OpenPopupOnItemClick([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int mouse_button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsPopupOpenStr")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPopupOpenStr([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCloseCurrentPopup")]
            internal static extern void CloseCurrentPopup();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColumns")]
            internal static extern void Columns(int count, [MarshalAs(UnmanagedType.LPUTF8Str)] string id, bool border);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igNextColumn")]
            internal static extern void NextColumn();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColumnIndex")]
            internal static extern int GetColumnIndex();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColumnWidth")]
            internal static extern float GetColumnWidth(int column_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetColumnWidth")]
            internal static extern void SetColumnWidth(int column_index, float width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColumnOffset")]
            internal static extern float GetColumnOffset(int column_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetColumnOffset")]
            internal static extern void SetColumnOffset(int column_index, float offset_x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColumnsCount")]
            internal static extern int GetColumnsCount();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginTabBar")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTabBar([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndTabBar")]
            internal static extern void EndTabBar();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginTabItem")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTabItem([MarshalAs(UnmanagedType.LPUTF8Str)] string label, bool* p_open, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndTabItem")]
            internal static extern void EndTabItem();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetTabItemClosed")]
            internal static extern void SetTabItemClosed([MarshalAs(UnmanagedType.LPUTF8Str)] string tab_or_docked_window_label);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLogToTTY")]
            internal static extern void LogToTTY(int auto_open_depth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLogToFile")]
            internal static extern void LogToFile(int auto_open_depth, [MarshalAs(UnmanagedType.LPUTF8Str)] string filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLogToClipboard")]
            internal static extern void LogToClipboard(int auto_open_depth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLogFinish")]
            internal static extern void LogFinish();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLogButtons")]
            internal static extern void LogButtons();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginDragDropSource")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginDragDropSource(int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetDragDropPayload")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SetDragDropPayload([MarshalAs(UnmanagedType.LPUTF8Str)] string type, global::System.IntPtr data, ulong sz, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndDragDropSource")]
            internal static extern void EndDragDropSource();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginDragDropTarget")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginDragDropTarget();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igAcceptDragDropPayload")]
            internal static extern global::System.IntPtr AcceptDragDropPayload([MarshalAs(UnmanagedType.LPUTF8Str)] string type, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndDragDropTarget")]
            internal static extern void EndDragDropTarget();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetDragDropPayload")]
            internal static extern global::System.IntPtr GetDragDropPayload();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushClipRect")]
            internal static extern void PushClipRect(global::DearImguiSharp.ImVec2.__Internal clip_rect_min, global::DearImguiSharp.ImVec2.__Internal clip_rect_max, bool intersect_with_current_clip_rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopClipRect")]
            internal static extern void PopClipRect();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetItemDefaultFocus")]
            internal static extern void SetItemDefaultFocus();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetKeyboardFocusHere")]
            internal static extern void SetKeyboardFocusHere(int offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemHovered")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemHovered(int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemActive")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemActive();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemFocused")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemFocused();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemClicked")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemClicked(int mouse_button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemVisible")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemVisible();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemEdited")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemEdited();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemActivated")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemActivated();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemDeactivated")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemDeactivated();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemDeactivatedAfterEdit")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemDeactivatedAfterEdit();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemToggledOpen")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemToggledOpen();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsAnyItemHovered")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyItemHovered();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsAnyItemActive")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyItemActive();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsAnyItemFocused")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyItemFocused();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetItemRectMin")]
            internal static extern void GetItemRectMin(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetItemRectMax")]
            internal static extern void GetItemRectMax(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetItemRectSize")]
            internal static extern void GetItemRectSize(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetItemAllowOverlap")]
            internal static extern void SetItemAllowOverlap();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsRectVisibleNil")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsRectVisibleNil(global::DearImguiSharp.ImVec2.__Internal size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsRectVisibleVec2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsRectVisibleVec2(global::DearImguiSharp.ImVec2.__Internal rect_min, global::DearImguiSharp.ImVec2.__Internal rect_max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetTime")]
            internal static extern double GetTime();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetFrameCount")]
            internal static extern int GetFrameCount();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetBackgroundDrawList")]
            internal static extern global::System.IntPtr GetBackgroundDrawList();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetForegroundDrawListNil")]
            internal static extern global::System.IntPtr GetForegroundDrawListNil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetDrawListSharedData")]
            internal static extern global::System.IntPtr GetDrawListSharedData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetStyleColorName")]
            internal static extern global::System.IntPtr GetStyleColorName(int idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetStateStorage")]
            internal static extern void SetStateStorage(global::System.IntPtr storage);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetStateStorage")]
            internal static extern global::System.IntPtr GetStateStorage();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCalcTextSize")]
            internal static extern void CalcTextSize(global::System.IntPtr pOut, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, bool hide_text_after_double_hash, float wrap_width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCalcListClipping")]
            internal static extern void CalcListClipping(int items_count, float items_height, int* out_items_display_start, int* out_items_display_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginChildFrame")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChildFrame(uint id, global::DearImguiSharp.ImVec2.__Internal size, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndChildFrame")]
            internal static extern void EndChildFrame();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorConvertU32ToFloat4")]
            internal static extern void ColorConvertU32ToFloat4(global::System.IntPtr pOut, uint @in);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorConvertFloat4ToU32")]
            internal static extern uint ColorConvertFloat4ToU32(global::System.IntPtr @in);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetKeyIndex")]
            internal static extern int GetKeyIndex(int imgui_key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsKeyDown")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyDown(int user_key_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsKeyPressed")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyPressed(int user_key_index, bool repeat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsKeyReleased")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyReleased(int user_key_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetKeyPressedAmount")]
            internal static extern int GetKeyPressedAmount(int key_index, float repeat_delay, float rate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCaptureKeyboardFromApp")]
            internal static extern void CaptureKeyboardFromApp(bool want_capture_keyboard_value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsMouseDown")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDown(int button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsMouseClicked")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseClicked(int button, bool repeat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsMouseReleased")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseReleased(int button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsMouseDoubleClicked")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDoubleClicked(int button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsMouseHoveringRect")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseHoveringRect(global::DearImguiSharp.ImVec2.__Internal r_min, global::DearImguiSharp.ImVec2.__Internal r_max, bool clip);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsMousePosValid")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMousePosValid(global::System.IntPtr mouse_pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsAnyMouseDown")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsAnyMouseDown();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetMousePos")]
            internal static extern void GetMousePos(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetMousePosOnOpeningCurrentPopup")]
            internal static extern void GetMousePosOnOpeningCurrentPopup(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsMouseDragging")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDragging(int button, float lock_threshold);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetMouseDragDelta")]
            internal static extern void GetMouseDragDelta(global::System.IntPtr pOut, int button, float lock_threshold);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igResetMouseDragDelta")]
            internal static extern void ResetMouseDragDelta(int button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetMouseCursor")]
            internal static extern int GetMouseCursor();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetMouseCursor")]
            internal static extern void SetMouseCursor(int cursor_type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCaptureMouseFromApp")]
            internal static extern void CaptureMouseFromApp(bool want_capture_mouse_value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetClipboardText")]
            internal static extern global::System.IntPtr GetClipboardText();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetClipboardText")]
            internal static extern void SetClipboardText([MarshalAs(UnmanagedType.LPUTF8Str)] string text);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLoadIniSettingsFromDisk")]
            internal static extern void LoadIniSettingsFromDisk([MarshalAs(UnmanagedType.LPUTF8Str)] string ini_filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLoadIniSettingsFromMemory")]
            internal static extern void LoadIniSettingsFromMemory([MarshalAs(UnmanagedType.LPUTF8Str)] string ini_data, ulong ini_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSaveIniSettingsToDisk")]
            internal static extern void SaveIniSettingsToDisk([MarshalAs(UnmanagedType.LPUTF8Str)] string ini_filename);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSaveIniSettingsToMemory")]
            internal static extern global::System.IntPtr SaveIniSettingsToMemory(ulong* out_ini_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetAllocatorFunctions")]
            internal static extern void SetAllocatorFunctions(global::System.IntPtr alloc_func, global::System.IntPtr free_func, global::System.IntPtr user_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igMemAlloc")]
            internal static extern global::System.IntPtr MemAlloc(ulong size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igMemFree")]
            internal static extern void MemFree(global::System.IntPtr ptr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStyle_ImGuiStyle")]
            internal static extern global::System.IntPtr ImGuiStyleImGuiStyle();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStyle_destroy")]
            internal static extern void ImGuiStyle_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStyle_ScaleAllSizes")]
            internal static extern void ImGuiStyleScaleAllSizes(global::System.IntPtr self, float scale_factor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiIO_AddInputCharacter")]
            internal static extern void ImGuiIO_AddInputCharacter(global::System.IntPtr self, uint c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiIO_AddInputCharactersUTF8")]
            internal static extern void ImGuiIO_AddInputCharactersUTF8(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiIO_ClearInputCharacters")]
            internal static extern void ImGuiIO_ClearInputCharacters(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiIO_ImGuiIO")]
            internal static extern global::System.IntPtr ImGuiIO_ImGuiIO();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiIO_destroy")]
            internal static extern void ImGuiIO_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextCallbackData_ImGuiInputTextCallbackData")]
            internal static extern global::System.IntPtr ImGuiInputTextCallbackDataImGuiInputTextCallbackData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextCallbackData_destroy")]
            internal static extern void ImGuiInputTextCallbackData_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextCallbackData_DeleteChars")]
            internal static extern void ImGuiInputTextCallbackDataDeleteChars(global::System.IntPtr self, int pos, int bytes_count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextCallbackData_InsertChars")]
            internal static extern void ImGuiInputTextCallbackDataInsertChars(global::System.IntPtr self, int pos, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextCallbackData_HasSelection")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiInputTextCallbackDataHasSelection(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPayload_ImGuiPayload")]
            internal static extern global::System.IntPtr ImGuiPayloadImGuiPayload();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPayload_destroy")]
            internal static extern void ImGuiPayload_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPayload_Clear")]
            internal static extern void ImGuiPayloadClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPayload_IsDataType")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiPayloadIsDataType(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPayload_IsPreview")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiPayloadIsPreview(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPayload_IsDelivery")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiPayloadIsDelivery(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiOnceUponAFrame_ImGuiOnceUponAFrame")]
            internal static extern global::System.IntPtr ImGuiOnceUponAFrameImGuiOnceUponAFrame();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiOnceUponAFrame_destroy")]
            internal static extern void ImGuiOnceUponAFrame_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextFilter_ImGuiTextFilter")]
            internal static extern global::System.IntPtr ImGuiTextFilterImGuiTextFilter([MarshalAs(UnmanagedType.LPUTF8Str)] string default_filter);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextFilter_destroy")]
            internal static extern void ImGuiTextFilter_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextFilter_Draw")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiTextFilterDraw(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string label, float width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextFilter_PassFilter")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiTextFilterPassFilter(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextFilter_Build")]
            internal static extern void ImGuiTextFilterBuild(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextFilter_Clear")]
            internal static extern void ImGuiTextFilterClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextFilter_IsActive")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiTextFilterIsActive(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextRange_ImGuiTextRangeNil")]
            internal static extern global::System.IntPtr ImGuiTextRangeImGuiTextRangeNil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextRange_destroy")]
            internal static extern void ImGuiTextRange_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextRange_ImGuiTextRangeStr")]
            internal static extern global::System.IntPtr ImGuiTextRangeImGuiTextRangeStr([MarshalAs(UnmanagedType.LPUTF8Str)] string _b, [MarshalAs(UnmanagedType.LPUTF8Str)] string _e);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextRange_empty")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiTextRange_empty(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextRange_split")]
            internal static extern void ImGuiTextRange_split(global::System.IntPtr self, sbyte separator, global::System.IntPtr @out);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_ImGuiTextBuffer")]
            internal static extern global::System.IntPtr ImGuiTextBufferImGuiTextBuffer();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_destroy")]
            internal static extern void ImGuiTextBuffer_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_begin")]
            internal static extern global::System.IntPtr ImGuiTextBuffer_begin(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_end")]
            internal static extern global::System.IntPtr ImGuiTextBuffer_end(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_size")]
            internal static extern int ImGuiTextBuffer_size(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_empty")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiTextBuffer_empty(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_clear")]
            internal static extern void ImGuiTextBuffer_clear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_reserve")]
            internal static extern void ImGuiTextBuffer_reserve(global::System.IntPtr self, int capacity);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_c_str")]
            internal static extern global::System.IntPtr ImGuiTextBuffer_c_str(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTextBuffer_append")]
            internal static extern void ImGuiTextBuffer_append(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string str, [MarshalAs(UnmanagedType.LPUTF8Str)] string str_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStoragePair_ImGuiStoragePairInt")]
            internal static extern global::System.IntPtr ImGuiStoragePairImGuiStoragePairInt(uint _key, int _val_i);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStoragePair_destroy")]
            internal static extern void ImGuiStoragePair_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStoragePair_ImGuiStoragePairFloat")]
            internal static extern global::System.IntPtr ImGuiStoragePairImGuiStoragePairFloat(uint _key, float _val_f);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStoragePair_ImGuiStoragePairPtr")]
            internal static extern global::System.IntPtr ImGuiStoragePairImGuiStoragePairPtr(uint _key, global::System.IntPtr _val_p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_Clear")]
            internal static extern void ImGuiStorageClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_GetInt")]
            internal static extern int ImGuiStorageGetInt(global::System.IntPtr self, uint key, int default_val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_SetInt")]
            internal static extern void ImGuiStorageSetInt(global::System.IntPtr self, uint key, int val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_GetBool")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiStorageGetBool(global::System.IntPtr self, uint key, bool default_val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_SetBool")]
            internal static extern void ImGuiStorageSetBool(global::System.IntPtr self, uint key, bool val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_GetFloat")]
            internal static extern float ImGuiStorageGetFloat(global::System.IntPtr self, uint key, float default_val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_SetFloat")]
            internal static extern void ImGuiStorageSetFloat(global::System.IntPtr self, uint key, float val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_GetVoidPtr")]
            internal static extern global::System.IntPtr ImGuiStorageGetVoidPtr(global::System.IntPtr self, uint key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_SetVoidPtr")]
            internal static extern void ImGuiStorageSetVoidPtr(global::System.IntPtr self, uint key, global::System.IntPtr val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_GetIntRef")]
            internal static extern int* ImGuiStorageGetIntRef(global::System.IntPtr self, uint key, int default_val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_GetBoolRef")]
            internal static extern bool* ImGuiStorageGetBoolRef(global::System.IntPtr self, uint key, bool default_val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_GetFloatRef")]
            internal static extern float* ImGuiStorageGetFloatRef(global::System.IntPtr self, uint key, float default_val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_GetVoidPtrRef")]
            internal static extern void** ImGuiStorageGetVoidPtrRef(global::System.IntPtr self, uint key, global::System.IntPtr default_val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_SetAllInt")]
            internal static extern void ImGuiStorageSetAllInt(global::System.IntPtr self, int val);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStorage_BuildSortByKey")]
            internal static extern void ImGuiStorageBuildSortByKey(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiListClipper_ImGuiListClipper")]
            internal static extern global::System.IntPtr ImGuiListClipperImGuiListClipper(int items_count, float items_height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiListClipper_destroy")]
            internal static extern void ImGuiListClipper_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiListClipper_Step")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiListClipperStep(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiListClipper_Begin")]
            internal static extern void ImGuiListClipperBegin(global::System.IntPtr self, int items_count, float items_height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiListClipper_End")]
            internal static extern void ImGuiListClipperEnd(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImColor_ImColorNil")]
            internal static extern global::System.IntPtr ImColorImColorNil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImColor_destroy")]
            internal static extern void ImColor_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImColor_ImColorInt")]
            internal static extern global::System.IntPtr ImColorImColorInt(int r, int g, int b, int a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImColor_ImColorU32")]
            internal static extern global::System.IntPtr ImColorImColorU32(uint rgba);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImColor_ImColorFloat")]
            internal static extern global::System.IntPtr ImColorImColorFloat(float r, float g, float b, float a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImColor_ImColorVec4")]
            internal static extern global::System.IntPtr ImColorImColorVec4(global::System.IntPtr col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImColor_SetHSV")]
            internal static extern void ImColorSetHSV(global::System.IntPtr self, float h, float s, float v, float a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImColor_HSV")]
            internal static extern void ImColorHSV(global::System.IntPtr pOut, global::System.IntPtr self, float h, float s, float v, float a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawCmd_ImDrawCmd")]
            internal static extern global::System.IntPtr ImDrawCmdImDrawCmd();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawCmd_destroy")]
            internal static extern void ImDrawCmd_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSplitter_ImDrawListSplitter")]
            internal static extern global::System.IntPtr ImDrawListSplitterImDrawListSplitter();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSplitter_destroy")]
            internal static extern void ImDrawListSplitter_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSplitter_Clear")]
            internal static extern void ImDrawListSplitterClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSplitter_ClearFreeMemory")]
            internal static extern void ImDrawListSplitterClearFreeMemory(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSplitter_Split")]
            internal static extern void ImDrawListSplitterSplit(global::System.IntPtr self, global::System.IntPtr draw_list, int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSplitter_Merge")]
            internal static extern void ImDrawListSplitterMerge(global::System.IntPtr self, global::System.IntPtr draw_list);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSplitter_SetCurrentChannel")]
            internal static extern void ImDrawListSplitterSetCurrentChannel(global::System.IntPtr self, global::System.IntPtr draw_list, int channel_idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_ImDrawList")]
            internal static extern global::System.IntPtr ImDrawListImDrawList(global::System.IntPtr shared_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_destroy")]
            internal static extern void ImDrawList_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PushClipRect")]
            internal static extern void ImDrawListPushClipRect(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal clip_rect_min, global::DearImguiSharp.ImVec2.__Internal clip_rect_max, bool intersect_with_current_clip_rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PushClipRectFullScreen")]
            internal static extern void ImDrawListPushClipRectFullScreen(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PopClipRect")]
            internal static extern void ImDrawListPopClipRect(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PushTextureID")]
            internal static extern void ImDrawListPushTextureID(global::System.IntPtr self, global::System.IntPtr texture_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PopTextureID")]
            internal static extern void ImDrawListPopTextureID(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_GetClipRectMin")]
            internal static extern void ImDrawListGetClipRectMin(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_GetClipRectMax")]
            internal static extern void ImDrawListGetClipRectMax(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddLine")]
            internal static extern void ImDrawListAddLine(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, uint col, float thickness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddRect")]
            internal static extern void ImDrawListAddRect(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p_min, global::DearImguiSharp.ImVec2.__Internal p_max, uint col, float rounding, int rounding_corners, float thickness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddRectFilled")]
            internal static extern void ImDrawListAddRectFilled(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p_min, global::DearImguiSharp.ImVec2.__Internal p_max, uint col, float rounding, int rounding_corners);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddRectFilledMultiColor")]
            internal static extern void ImDrawListAddRectFilledMultiColor(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p_min, global::DearImguiSharp.ImVec2.__Internal p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddQuad")]
            internal static extern void ImDrawListAddQuad(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, global::DearImguiSharp.ImVec2.__Internal p4, uint col, float thickness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddQuadFilled")]
            internal static extern void ImDrawListAddQuadFilled(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, global::DearImguiSharp.ImVec2.__Internal p4, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddTriangle")]
            internal static extern void ImDrawListAddTriangle(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, uint col, float thickness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddTriangleFilled")]
            internal static extern void ImDrawListAddTriangleFilled(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddCircle")]
            internal static extern void ImDrawListAddCircle(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal center, float radius, uint col, int num_segments, float thickness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddCircleFilled")]
            internal static extern void ImDrawListAddCircleFilled(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal center, float radius, uint col, int num_segments);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddNgon")]
            internal static extern void ImDrawListAddNgon(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal center, float radius, uint col, int num_segments, float thickness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddNgonFilled")]
            internal static extern void ImDrawListAddNgonFilled(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal center, float radius, uint col, int num_segments);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddTextVec2")]
            internal static extern void ImDrawListAddTextVec2(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal pos, uint col, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_begin, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddTextFontPtr")]
            internal static extern void ImDrawListAddTextFontPtr(global::System.IntPtr self, global::System.IntPtr font, float font_size, global::DearImguiSharp.ImVec2.__Internal pos, uint col, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_begin, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, float wrap_width, global::System.IntPtr cpu_fine_clip_rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddPolyline")]
            internal static extern void ImDrawListAddPolyline(global::System.IntPtr self, global::System.IntPtr points, int num_points, uint col, bool closed, float thickness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddConvexPolyFilled")]
            internal static extern void ImDrawListAddConvexPolyFilled(global::System.IntPtr self, global::System.IntPtr points, int num_points, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddBezierCurve")]
            internal static extern void ImDrawListAddBezierCurve(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, global::DearImguiSharp.ImVec2.__Internal p4, uint col, float thickness, int num_segments);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddImage")]
            internal static extern void ImDrawListAddImage(global::System.IntPtr self, global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2.__Internal p_min, global::DearImguiSharp.ImVec2.__Internal p_max, global::DearImguiSharp.ImVec2.__Internal uv_min, global::DearImguiSharp.ImVec2.__Internal uv_max, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddImageQuad")]
            internal static extern void ImDrawListAddImageQuad(global::System.IntPtr self, global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, global::DearImguiSharp.ImVec2.__Internal p4, global::DearImguiSharp.ImVec2.__Internal uv1, global::DearImguiSharp.ImVec2.__Internal uv2, global::DearImguiSharp.ImVec2.__Internal uv3, global::DearImguiSharp.ImVec2.__Internal uv4, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddImageRounded")]
            internal static extern void ImDrawListAddImageRounded(global::System.IntPtr self, global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2.__Internal p_min, global::DearImguiSharp.ImVec2.__Internal p_max, global::DearImguiSharp.ImVec2.__Internal uv_min, global::DearImguiSharp.ImVec2.__Internal uv_max, uint col, float rounding, int rounding_corners);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PathClear")]
            internal static extern void ImDrawListPathClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PathLineTo")]
            internal static extern void ImDrawListPathLineTo(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PathLineToMergeDuplicate")]
            internal static extern void ImDrawListPathLineToMergeDuplicate(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PathFillConvex")]
            internal static extern void ImDrawListPathFillConvex(global::System.IntPtr self, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PathStroke")]
            internal static extern void ImDrawListPathStroke(global::System.IntPtr self, uint col, bool closed, float thickness);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PathArcTo")]
            internal static extern void ImDrawListPathArcTo(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal center, float radius, float a_min, float a_max, int num_segments);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PathArcToFast")]
            internal static extern void ImDrawListPathArcToFast(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal center, float radius, int a_min_of_12, int a_max_of_12);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PathBezierCurveTo")]
            internal static extern void ImDrawListPathBezierCurveTo(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, global::DearImguiSharp.ImVec2.__Internal p4, int num_segments);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PathRect")]
            internal static extern void ImDrawListPathRect(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal rect_min, global::DearImguiSharp.ImVec2.__Internal rect_max, float rounding, int rounding_corners);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddCallback")]
            internal static extern void ImDrawListAddCallback(global::System.IntPtr self, global::System.IntPtr callback, global::System.IntPtr callback_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_AddDrawCmd")]
            internal static extern void ImDrawListAddDrawCmd(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_CloneOutput")]
            internal static extern global::System.IntPtr ImDrawListCloneOutput(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_ChannelsSplit")]
            internal static extern void ImDrawListChannelsSplit(global::System.IntPtr self, int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_ChannelsMerge")]
            internal static extern void ImDrawListChannelsMerge(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_ChannelsSetCurrent")]
            internal static extern void ImDrawListChannelsSetCurrent(global::System.IntPtr self, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_Clear")]
            internal static extern void ImDrawListClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_ClearFreeMemory")]
            internal static extern void ImDrawListClearFreeMemory(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PrimReserve")]
            internal static extern void ImDrawListPrimReserve(global::System.IntPtr self, int idx_count, int vtx_count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PrimUnreserve")]
            internal static extern void ImDrawListPrimUnreserve(global::System.IntPtr self, int idx_count, int vtx_count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PrimRect")]
            internal static extern void ImDrawListPrimRect(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PrimRectUV")]
            internal static extern void ImDrawListPrimRectUV(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, global::DearImguiSharp.ImVec2.__Internal uv_a, global::DearImguiSharp.ImVec2.__Internal uv_b, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PrimQuadUV")]
            internal static extern void ImDrawListPrimQuadUV(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, global::DearImguiSharp.ImVec2.__Internal c, global::DearImguiSharp.ImVec2.__Internal d, global::DearImguiSharp.ImVec2.__Internal uv_a, global::DearImguiSharp.ImVec2.__Internal uv_b, global::DearImguiSharp.ImVec2.__Internal uv_c, global::DearImguiSharp.ImVec2.__Internal uv_d, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PrimWriteVtx")]
            internal static extern void ImDrawListPrimWriteVtx(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal pos, global::DearImguiSharp.ImVec2.__Internal uv, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PrimWriteIdx")]
            internal static extern void ImDrawListPrimWriteIdx(global::System.IntPtr self, ushort idx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_PrimVtx")]
            internal static extern void ImDrawListPrimVtx(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal pos, global::DearImguiSharp.ImVec2.__Internal uv, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_UpdateClipRect")]
            internal static extern void ImDrawListUpdateClipRect(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawList_UpdateTextureID")]
            internal static extern void ImDrawListUpdateTextureID(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawData_ImDrawData")]
            internal static extern global::System.IntPtr ImDrawDataImDrawData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawData_destroy")]
            internal static extern void ImDrawData_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawData_Clear")]
            internal static extern void ImDrawDataClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawData_DeIndexAllBuffers")]
            internal static extern void ImDrawDataDeIndexAllBuffers(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawData_ScaleClipRects")]
            internal static extern void ImDrawDataScaleClipRects(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal fb_scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontConfig_ImFontConfig")]
            internal static extern global::System.IntPtr ImFontConfigImFontConfig();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontConfig_destroy")]
            internal static extern void ImFontConfig_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontGlyphRangesBuilder_ImFontGlyphRangesBuilder")]
            internal static extern global::System.IntPtr ImFontGlyphRangesBuilderImFontGlyphRangesBuilder();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontGlyphRangesBuilder_destroy")]
            internal static extern void ImFontGlyphRangesBuilder_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontGlyphRangesBuilder_Clear")]
            internal static extern void ImFontGlyphRangesBuilderClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontGlyphRangesBuilder_GetBit")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImFontGlyphRangesBuilderGetBit(global::System.IntPtr self, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontGlyphRangesBuilder_SetBit")]
            internal static extern void ImFontGlyphRangesBuilderSetBit(global::System.IntPtr self, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontGlyphRangesBuilder_AddChar")]
            internal static extern void ImFontGlyphRangesBuilderAddChar(global::System.IntPtr self, ushort c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontGlyphRangesBuilder_AddText")]
            internal static extern void ImFontGlyphRangesBuilderAddText(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontGlyphRangesBuilder_AddRanges")]
            internal static extern void ImFontGlyphRangesBuilderAddRanges(global::System.IntPtr self, ushort* ranges);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontGlyphRangesBuilder_BuildRanges")]
            internal static extern void ImFontGlyphRangesBuilderBuildRanges(global::System.IntPtr self, global::System.IntPtr out_ranges);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlasCustomRect_ImFontAtlasCustomRect")]
            internal static extern global::System.IntPtr ImFontAtlasCustomRectImFontAtlasCustomRect();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlasCustomRect_destroy")]
            internal static extern void ImFontAtlasCustomRect_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlasCustomRect_IsPacked")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImFontAtlasCustomRectIsPacked(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_ImFontAtlas")]
            internal static extern global::System.IntPtr ImFontAtlasImFontAtlas();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_destroy")]
            internal static extern void ImFontAtlas_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_AddFont")]
            internal static extern global::System.IntPtr ImFontAtlasAddFont(global::System.IntPtr self, global::System.IntPtr font_cfg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_AddFontDefault")]
            internal static extern global::System.IntPtr ImFontAtlasAddFontDefault(global::System.IntPtr self, global::System.IntPtr font_cfg);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_AddFontFromFileTTF")]
            internal static extern global::System.IntPtr ImFontAtlasAddFontFromFileTTF(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string filename, float size_pixels, global::System.IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_AddFontFromMemoryTTF")]
            internal static extern global::System.IntPtr ImFontAtlasAddFontFromMemoryTTF(global::System.IntPtr self, global::System.IntPtr font_data, int font_size, float size_pixels, global::System.IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_AddFontFromMemoryCompressedTTF")]
            internal static extern global::System.IntPtr ImFontAtlasAddFontFromMemoryCompressedTTF(global::System.IntPtr self, global::System.IntPtr compressed_font_data, int compressed_font_size, float size_pixels, global::System.IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_AddFontFromMemoryCompressedBase85TTF")]
            internal static extern global::System.IntPtr ImFontAtlasAddFontFromMemoryCompressedBase85TTF(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string compressed_font_data_base85, float size_pixels, global::System.IntPtr font_cfg, ushort* glyph_ranges);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_ClearInputData")]
            internal static extern void ImFontAtlasClearInputData(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_ClearTexData")]
            internal static extern void ImFontAtlasClearTexData(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_ClearFonts")]
            internal static extern void ImFontAtlasClearFonts(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_Clear")]
            internal static extern void ImFontAtlasClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_Build")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImFontAtlasBuild(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetTexDataAsAlpha8")]
            internal static extern void ImFontAtlasGetTexDataAsAlpha8(global::System.IntPtr self, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetTexDataAsRGBA32")]
            internal static extern void ImFontAtlasGetTexDataAsRGBA32(global::System.IntPtr self, byte** out_pixels, int* out_width, int* out_height, int* out_bytes_per_pixel);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_IsBuilt")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImFontAtlasIsBuilt(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_SetTexID")]
            internal static extern void ImFontAtlasSetTexID(global::System.IntPtr self, global::System.IntPtr id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetGlyphRangesDefault")]
            internal static extern ushort* ImFontAtlasGetGlyphRangesDefault(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetGlyphRangesKorean")]
            internal static extern ushort* ImFontAtlasGetGlyphRangesKorean(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetGlyphRangesJapanese")]
            internal static extern ushort* ImFontAtlasGetGlyphRangesJapanese(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetGlyphRangesChineseFull")]
            internal static extern ushort* ImFontAtlasGetGlyphRangesChineseFull(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetGlyphRangesChineseSimplifiedCommon")]
            internal static extern ushort* ImFontAtlasGetGlyphRangesChineseSimplifiedCommon(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetGlyphRangesCyrillic")]
            internal static extern ushort* ImFontAtlasGetGlyphRangesCyrillic(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetGlyphRangesThai")]
            internal static extern ushort* ImFontAtlasGetGlyphRangesThai(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetGlyphRangesVietnamese")]
            internal static extern ushort* ImFontAtlasGetGlyphRangesVietnamese(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_AddCustomRectRegular")]
            internal static extern int ImFontAtlasAddCustomRectRegular(global::System.IntPtr self, uint id, int width, int height);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_AddCustomRectFontGlyph")]
            internal static extern int ImFontAtlasAddCustomRectFontGlyph(global::System.IntPtr self, global::System.IntPtr font, ushort id, int width, int height, float advance_x, global::DearImguiSharp.ImVec2.__Internal offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetCustomRectByIndex")]
            internal static extern global::System.IntPtr ImFontAtlasGetCustomRectByIndex(global::System.IntPtr self, int index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_CalcCustomRectUV")]
            internal static extern void ImFontAtlasCalcCustomRectUV(global::System.IntPtr self, global::System.IntPtr rect, global::System.IntPtr out_uv_min, global::System.IntPtr out_uv_max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFontAtlas_GetMouseCursorTexData")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImFontAtlasGetMouseCursorTexData(global::System.IntPtr self, int cursor, global::System.IntPtr out_offset, global::System.IntPtr out_size, global::DearImguiSharp.ImVec2.__Internal[] out_uv_border, global::DearImguiSharp.ImVec2.__Internal[] out_uv_fill);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_ImFont")]
            internal static extern global::System.IntPtr ImFontImFont();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_destroy")]
            internal static extern void ImFont_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_FindGlyph")]
            internal static extern global::System.IntPtr ImFontFindGlyph(global::System.IntPtr self, ushort c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_FindGlyphNoFallback")]
            internal static extern global::System.IntPtr ImFontFindGlyphNoFallback(global::System.IntPtr self, ushort c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_GetCharAdvance")]
            internal static extern float ImFontGetCharAdvance(global::System.IntPtr self, ushort c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_IsLoaded")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImFontIsLoaded(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_GetDebugName")]
            internal static extern global::System.IntPtr ImFontGetDebugName(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_CalcTextSizeA")]
            internal static extern void ImFontCalcTextSizeA(global::System.IntPtr pOut, global::System.IntPtr self, float size, float max_width, float wrap_width, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_begin, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, sbyte** remaining);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_CalcWordWrapPositionA")]
            internal static extern global::System.IntPtr ImFontCalcWordWrapPositionA(global::System.IntPtr self, float scale, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, float wrap_width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_RenderChar")]
            internal static extern void ImFontRenderChar(global::System.IntPtr self, global::System.IntPtr draw_list, float size, global::DearImguiSharp.ImVec2.__Internal pos, uint col, ushort c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_RenderText")]
            internal static extern void ImFontRenderText(global::System.IntPtr self, global::System.IntPtr draw_list, float size, global::DearImguiSharp.ImVec2.__Internal pos, uint col, global::System.IntPtr clip_rect, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_begin, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, float wrap_width, bool cpu_fine_clip);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_BuildLookupTable")]
            internal static extern void ImFontBuildLookupTable(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_ClearOutputData")]
            internal static extern void ImFontClearOutputData(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_GrowIndex")]
            internal static extern void ImFontGrowIndex(global::System.IntPtr self, int new_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_AddGlyph")]
            internal static extern void ImFontAddGlyph(global::System.IntPtr self, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_AddRemapChar")]
            internal static extern void ImFontAddRemapChar(global::System.IntPtr self, ushort dst, ushort src, bool overwrite_dst);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImFont_SetFallbackChar")]
            internal static extern void ImFontSetFallbackChar(global::System.IntPtr self, ushort c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImHashData")]
            internal static extern uint ImHashData(global::System.IntPtr data, ulong data_size, uint seed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImHashStr")]
            internal static extern uint ImHashStr([MarshalAs(UnmanagedType.LPUTF8Str)] string data, ulong data_size, uint seed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImIsPowerOfTwo")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImIsPowerOfTwo(int v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImUpperPowerOfTwo")]
            internal static extern int ImUpperPowerOfTwo(int v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStricmp")]
            internal static extern int ImStricmp([MarshalAs(UnmanagedType.LPUTF8Str)] string str1, [MarshalAs(UnmanagedType.LPUTF8Str)] string str2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStrnicmp")]
            internal static extern int ImStrnicmp([MarshalAs(UnmanagedType.LPUTF8Str)] string str1, [MarshalAs(UnmanagedType.LPUTF8Str)] string str2, ulong count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStrncpy")]
            internal static extern void ImStrncpy(sbyte* dst, [MarshalAs(UnmanagedType.LPUTF8Str)] string src, ulong count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStrdup")]
            internal static extern sbyte* ImStrdup([MarshalAs(UnmanagedType.LPUTF8Str)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStrdupcpy")]
            internal static extern sbyte* ImStrdupcpy(sbyte* dst, ulong* p_dst_size, [MarshalAs(UnmanagedType.LPUTF8Str)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStrchrRange")]
            internal static extern global::System.IntPtr ImStrchrRange([MarshalAs(UnmanagedType.LPUTF8Str)] string str_begin, [MarshalAs(UnmanagedType.LPUTF8Str)] string str_end, sbyte c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStrlenW")]
            internal static extern int ImStrlenW(ushort* str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStreolRange")]
            internal static extern global::System.IntPtr ImStreolRange([MarshalAs(UnmanagedType.LPUTF8Str)] string str, [MarshalAs(UnmanagedType.LPUTF8Str)] string str_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStrbolW")]
            internal static extern ushort* ImStrbolW(ushort* buf_mid_line, ushort* buf_begin);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStristr")]
            internal static extern global::System.IntPtr ImStristr([MarshalAs(UnmanagedType.LPUTF8Str)] string haystack, [MarshalAs(UnmanagedType.LPUTF8Str)] string haystack_end, [MarshalAs(UnmanagedType.LPUTF8Str)] string needle, [MarshalAs(UnmanagedType.LPUTF8Str)] string needle_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStrTrimBlanks")]
            internal static extern void ImStrTrimBlanks(sbyte* str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImStrSkipBlank")]
            internal static extern global::System.IntPtr ImStrSkipBlank([MarshalAs(UnmanagedType.LPUTF8Str)] string str);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFormatString")]
            internal static extern int ImFormatString(sbyte* buf, ulong buf_size, [MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImParseFormatFindStart")]
            internal static extern global::System.IntPtr ImParseFormatFindStart([MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImParseFormatFindEnd")]
            internal static extern global::System.IntPtr ImParseFormatFindEnd([MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImParseFormatTrimDecorations")]
            internal static extern global::System.IntPtr ImParseFormatTrimDecorations([MarshalAs(UnmanagedType.LPUTF8Str)] string format, sbyte* buf, ulong buf_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImParseFormatPrecision")]
            internal static extern int ImParseFormatPrecision([MarshalAs(UnmanagedType.LPUTF8Str)] string format, int default_value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImCharIsBlankA")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImCharIsBlankA(sbyte c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImCharIsBlankW")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImCharIsBlankW(uint c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTextStrToUtf8")]
            internal static extern int ImTextStrToUtf8(sbyte* buf, int buf_size, ushort* in_text, ushort* in_text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTextCharFromUtf8")]
            internal static extern int ImTextCharFromUtf8(uint* out_char, [MarshalAs(UnmanagedType.LPUTF8Str)] string in_text, [MarshalAs(UnmanagedType.LPUTF8Str)] string in_text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTextStrFromUtf8")]
            internal static extern int ImTextStrFromUtf8(ushort* buf, int buf_size, [MarshalAs(UnmanagedType.LPUTF8Str)] string in_text, [MarshalAs(UnmanagedType.LPUTF8Str)] string in_text_end, sbyte** in_remaining);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTextCountCharsFromUtf8")]
            internal static extern int ImTextCountCharsFromUtf8([MarshalAs(UnmanagedType.LPUTF8Str)] string in_text, [MarshalAs(UnmanagedType.LPUTF8Str)] string in_text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTextCountUtf8BytesFromChar")]
            internal static extern int ImTextCountUtf8BytesFromChar([MarshalAs(UnmanagedType.LPUTF8Str)] string in_text, [MarshalAs(UnmanagedType.LPUTF8Str)] string in_text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTextCountUtf8BytesFromStr")]
            internal static extern int ImTextCountUtf8BytesFromStr(ushort* in_text, ushort* in_text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFileOpen")]
            internal static extern global::System.IntPtr ImFileOpen([MarshalAs(UnmanagedType.LPUTF8Str)] string filename, [MarshalAs(UnmanagedType.LPUTF8Str)] string mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFileClose")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImFileClose(global::System.IntPtr file);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFileGetSize")]
            internal static extern ulong ImFileGetSize(global::System.IntPtr file);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFileRead")]
            internal static extern ulong ImFileRead(global::System.IntPtr data, ulong size, ulong count, global::System.IntPtr file);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFileWrite")]
            internal static extern ulong ImFileWrite(global::System.IntPtr data, ulong size, ulong count, global::System.IntPtr file);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFileLoadToMemory")]
            internal static extern global::System.IntPtr ImFileLoadToMemory([MarshalAs(UnmanagedType.LPUTF8Str)] string filename, [MarshalAs(UnmanagedType.LPUTF8Str)] string mode, ulong* out_file_size, int padding_bytes);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImPowFloat")]
            internal static extern float ImPowFloat(float x, float y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImPowdouble")]
            internal static extern double ImPowdouble(double x, double y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImMin")]
            internal static extern void ImMin(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal lhs, global::DearImguiSharp.ImVec2.__Internal rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImMax")]
            internal static extern void ImMax(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal lhs, global::DearImguiSharp.ImVec2.__Internal rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImClamp")]
            internal static extern void ImClamp(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal v, global::DearImguiSharp.ImVec2.__Internal mn, global::DearImguiSharp.ImVec2.__Internal mx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImLerpVec2Float")]
            internal static extern void ImLerpVec2Float(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, float t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImLerpVec2Vec2")]
            internal static extern void ImLerpVec2Vec2(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, global::DearImguiSharp.ImVec2.__Internal t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImLerpVec4")]
            internal static extern void ImLerpVec4(global::System.IntPtr pOut, global::System.IntPtr a, global::System.IntPtr b, float t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImSaturate")]
            internal static extern float ImSaturate(float f);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImLengthSqrVec2")]
            internal static extern float ImLengthSqrVec2(global::DearImguiSharp.ImVec2.__Internal lhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImLengthSqrVec4")]
            internal static extern float ImLengthSqrVec4(global::System.IntPtr lhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImInvLength")]
            internal static extern float ImInvLength(global::DearImguiSharp.ImVec2.__Internal lhs, float fail_value);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFloorFloat")]
            internal static extern float ImFloorFloat(float f);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFloorVec2")]
            internal static extern void ImFloorVec2(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImModPositive")]
            internal static extern int ImModPositive(int a, int b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImDot")]
            internal static extern float ImDot(global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImRotate")]
            internal static extern void ImRotate(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal v, float cos_a, float sin_a);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImLinearSweep")]
            internal static extern float ImLinearSweep(float current, float target, float speed);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImMul")]
            internal static extern void ImMul(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal lhs, global::DearImguiSharp.ImVec2.__Internal rhs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImBezierCalc")]
            internal static extern void ImBezierCalc(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, global::DearImguiSharp.ImVec2.__Internal p4, float t);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImBezierClosestPoint")]
            internal static extern void ImBezierClosestPoint(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, global::DearImguiSharp.ImVec2.__Internal p4, global::DearImguiSharp.ImVec2.__Internal p, int num_segments);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImBezierClosestPointCasteljau")]
            internal static extern void ImBezierClosestPointCasteljau(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal p1, global::DearImguiSharp.ImVec2.__Internal p2, global::DearImguiSharp.ImVec2.__Internal p3, global::DearImguiSharp.ImVec2.__Internal p4, global::DearImguiSharp.ImVec2.__Internal p, float tess_tol);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImLineClosestPoint")]
            internal static extern void ImLineClosestPoint(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, global::DearImguiSharp.ImVec2.__Internal p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTriangleContainsPoint")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImTriangleContainsPoint(global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, global::DearImguiSharp.ImVec2.__Internal c, global::DearImguiSharp.ImVec2.__Internal p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTriangleClosestPoint")]
            internal static extern void ImTriangleClosestPoint(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, global::DearImguiSharp.ImVec2.__Internal c, global::DearImguiSharp.ImVec2.__Internal p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTriangleBarycentricCoords")]
            internal static extern void ImTriangleBarycentricCoords(global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, global::DearImguiSharp.ImVec2.__Internal c, global::DearImguiSharp.ImVec2.__Internal p, float out_u, float out_v, float out_w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImTriangleArea")]
            internal static extern float ImTriangleArea(global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, global::DearImguiSharp.ImVec2.__Internal c);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImGetDirQuadrantFromDelta")]
            internal static extern int ImGetDirQuadrantFromDelta(float dx, float dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImBoolVector_ImBoolVector")]
            internal static extern global::System.IntPtr ImBoolVectorImBoolVector();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImBoolVector_destroy")]
            internal static extern void ImBoolVector_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImBoolVector_Resize")]
            internal static extern void ImBoolVectorResize(global::System.IntPtr self, int sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImBoolVector_Clear")]
            internal static extern void ImBoolVectorClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImBoolVector_GetBit")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImBoolVectorGetBit(global::System.IntPtr self, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImBoolVector_SetBit")]
            internal static extern void ImBoolVectorSetBit(global::System.IntPtr self, int n, bool v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec1_ImVec1Nil")]
            internal static extern global::System.IntPtr ImVec1ImVec1Nil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec1_destroy")]
            internal static extern void ImVec1_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec1_ImVec1Float")]
            internal static extern global::System.IntPtr ImVec1ImVec1Float(float _x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec2ih_ImVec2ihNil")]
            internal static extern global::System.IntPtr ImVec2ihImVec2ihNil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec2ih_destroy")]
            internal static extern void ImVec2ih_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVec2ih_ImVec2ihshort")]
            internal static extern global::System.IntPtr ImVec2ihImVec2ihshort(short _x, short _y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ImRectNil")]
            internal static extern global::System.IntPtr ImRectImRectNil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_destroy")]
            internal static extern void ImRect_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ImRectVec2")]
            internal static extern global::System.IntPtr ImRectImRectVec2(global::DearImguiSharp.ImVec2.__Internal min, global::DearImguiSharp.ImVec2.__Internal max);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ImRectVec4")]
            internal static extern global::System.IntPtr ImRectImRectVec4(global::System.IntPtr v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ImRectFloat")]
            internal static extern global::System.IntPtr ImRectImRectFloat(float x1, float y1, float x2, float y2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_GetCenter")]
            internal static extern void ImRectGetCenter(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_GetSize")]
            internal static extern void ImRectGetSize(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_GetWidth")]
            internal static extern float ImRectGetWidth(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_GetHeight")]
            internal static extern float ImRectGetHeight(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_GetTL")]
            internal static extern void ImRectGetTL(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_GetTR")]
            internal static extern void ImRectGetTR(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_GetBL")]
            internal static extern void ImRectGetBL(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_GetBR")]
            internal static extern void ImRectGetBR(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ContainsVec2")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImRectContainsVec2(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ContainsRect")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImRectContainsRect(global::System.IntPtr self, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_Overlaps")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImRectOverlaps(global::System.IntPtr self, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_AddVec2")]
            internal static extern void ImRectAddVec2(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_AddRect")]
            internal static extern void ImRectAddRect(global::System.IntPtr self, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ExpandFloat")]
            internal static extern void ImRectExpandFloat(global::System.IntPtr self, float amount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ExpandVec2")]
            internal static extern void ImRectExpandVec2(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal amount);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_Translate")]
            internal static extern void ImRectTranslate(global::System.IntPtr self, global::DearImguiSharp.ImVec2.__Internal d);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_TranslateX")]
            internal static extern void ImRectTranslateX(global::System.IntPtr self, float dx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_TranslateY")]
            internal static extern void ImRectTranslateY(global::System.IntPtr self, float dy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ClipWith")]
            internal static extern void ImRectClipWith(global::System.IntPtr self, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_ClipWithFull")]
            internal static extern void ImRectClipWithFull(global::System.IntPtr self, global::System.IntPtr r);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_Floor")]
            internal static extern void ImRectFloor(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImRect_IsInverted")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImRectIsInverted(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStyleMod_ImGuiStyleModInt")]
            internal static extern global::System.IntPtr ImGuiStyleModImGuiStyleModInt(int idx, int v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStyleMod_destroy")]
            internal static extern void ImGuiStyleMod_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStyleMod_ImGuiStyleModFloat")]
            internal static extern global::System.IntPtr ImGuiStyleModImGuiStyleModFloat(int idx, float v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiStyleMod_ImGuiStyleModVec2")]
            internal static extern global::System.IntPtr ImGuiStyleModImGuiStyleModVec2(int idx, global::DearImguiSharp.ImVec2.__Internal v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiMenuColumns_ImGuiMenuColumns")]
            internal static extern global::System.IntPtr ImGuiMenuColumnsImGuiMenuColumns();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiMenuColumns_destroy")]
            internal static extern void ImGuiMenuColumns_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiMenuColumns_Update")]
            internal static extern void ImGuiMenuColumnsUpdate(global::System.IntPtr self, int count, float spacing, bool clear);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiMenuColumns_DeclColumns")]
            internal static extern float ImGuiMenuColumnsDeclColumns(global::System.IntPtr self, float w0, float w1, float w2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiMenuColumns_CalcExtraSpace")]
            internal static extern float ImGuiMenuColumnsCalcExtraSpace(global::System.IntPtr self, float avail_w);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_ImGuiInputTextState")]
            internal static extern global::System.IntPtr ImGuiInputTextStateImGuiInputTextState();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_destroy")]
            internal static extern void ImGuiInputTextState_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_ClearText")]
            internal static extern void ImGuiInputTextStateClearText(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_ClearFreeMemory")]
            internal static extern void ImGuiInputTextStateClearFreeMemory(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_GetUndoAvailCount")]
            internal static extern int ImGuiInputTextStateGetUndoAvailCount(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_GetRedoAvailCount")]
            internal static extern int ImGuiInputTextStateGetRedoAvailCount(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_OnKeyPressed")]
            internal static extern void ImGuiInputTextStateOnKeyPressed(global::System.IntPtr self, int key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_CursorAnimReset")]
            internal static extern void ImGuiInputTextStateCursorAnimReset(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_CursorClamp")]
            internal static extern void ImGuiInputTextStateCursorClamp(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_HasSelection")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiInputTextStateHasSelection(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_ClearSelection")]
            internal static extern void ImGuiInputTextStateClearSelection(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiInputTextState_SelectAll")]
            internal static extern void ImGuiInputTextStateSelectAll(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindowSettings_ImGuiWindowSettings")]
            internal static extern global::System.IntPtr ImGuiWindowSettingsImGuiWindowSettings();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindowSettings_destroy")]
            internal static extern void ImGuiWindowSettings_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindowSettings_GetName")]
            internal static extern sbyte* ImGuiWindowSettingsGetName(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiSettingsHandler_ImGuiSettingsHandler")]
            internal static extern global::System.IntPtr ImGuiSettingsHandlerImGuiSettingsHandler();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiSettingsHandler_destroy")]
            internal static extern void ImGuiSettingsHandler_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPopupData_ImGuiPopupData")]
            internal static extern global::System.IntPtr ImGuiPopupDataImGuiPopupData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPopupData_destroy")]
            internal static extern void ImGuiPopupData_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiColumnData_ImGuiColumnData")]
            internal static extern global::System.IntPtr ImGuiColumnDataImGuiColumnData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiColumnData_destroy")]
            internal static extern void ImGuiColumnData_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiColumns_ImGuiColumns")]
            internal static extern global::System.IntPtr ImGuiColumnsImGuiColumns();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiColumns_destroy")]
            internal static extern void ImGuiColumns_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiColumns_Clear")]
            internal static extern void ImGuiColumnsClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSharedData_ImDrawListSharedData")]
            internal static extern global::System.IntPtr ImDrawListSharedDataImDrawListSharedData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSharedData_destroy")]
            internal static extern void ImDrawListSharedData_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawListSharedData_SetCircleSegmentMaxError")]
            internal static extern void ImDrawListSharedDataSetCircleSegmentMaxError(global::System.IntPtr self, float max_error);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawDataBuilder_Clear")]
            internal static extern void ImDrawDataBuilderClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawDataBuilder_ClearFreeMemory")]
            internal static extern void ImDrawDataBuilderClearFreeMemory(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImDrawDataBuilder_FlattenIntoSingleLayer")]
            internal static extern void ImDrawDataBuilderFlattenIntoSingleLayer(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiNavMoveResult_ImGuiNavMoveResult")]
            internal static extern global::System.IntPtr ImGuiNavMoveResultImGuiNavMoveResult();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiNavMoveResult_destroy")]
            internal static extern void ImGuiNavMoveResult_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiNavMoveResult_Clear")]
            internal static extern void ImGuiNavMoveResultClear(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiNextWindowData_ImGuiNextWindowData")]
            internal static extern global::System.IntPtr ImGuiNextWindowDataImGuiNextWindowData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiNextWindowData_destroy")]
            internal static extern void ImGuiNextWindowData_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiNextWindowData_ClearFlags")]
            internal static extern void ImGuiNextWindowDataClearFlags(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiNextItemData_ImGuiNextItemData")]
            internal static extern global::System.IntPtr ImGuiNextItemDataImGuiNextItemData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiNextItemData_destroy")]
            internal static extern void ImGuiNextItemData_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiNextItemData_ClearFlags")]
            internal static extern void ImGuiNextItemDataClearFlags(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPtrOrIndex_ImGuiPtrOrIndexPtr")]
            internal static extern global::System.IntPtr ImGuiPtrOrIndexImGuiPtrOrIndexPtr(global::System.IntPtr ptr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPtrOrIndex_destroy")]
            internal static extern void ImGuiPtrOrIndex_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiPtrOrIndex_ImGuiPtrOrIndexInt")]
            internal static extern global::System.IntPtr ImGuiPtrOrIndexImGuiPtrOrIndexInt(int index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiContext_ImGuiContext")]
            internal static extern global::System.IntPtr ImGuiContextImGuiContext(global::System.IntPtr shared_font_atlas);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiContext_destroy")]
            internal static extern void ImGuiContext_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindowTempData_ImGuiWindowTempData")]
            internal static extern global::System.IntPtr ImGuiWindowTempDataImGuiWindowTempData();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindowTempData_destroy")]
            internal static extern void ImGuiWindowTempData_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_ImGuiWindow")]
            internal static extern global::System.IntPtr ImGuiWindowImGuiWindow(global::System.IntPtr context, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_destroy")]
            internal static extern void ImGuiWindow_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_GetIDStr")]
            internal static extern uint ImGuiWindowGetIDStr(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string str, [MarshalAs(UnmanagedType.LPUTF8Str)] string str_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_GetIDPtr")]
            internal static extern uint ImGuiWindowGetIDPtr(global::System.IntPtr self, global::System.IntPtr ptr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_GetIDInt")]
            internal static extern uint ImGuiWindowGetIDInt(global::System.IntPtr self, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_GetIDNoKeepAliveStr")]
            internal static extern uint ImGuiWindowGetIDNoKeepAliveStr(global::System.IntPtr self, [MarshalAs(UnmanagedType.LPUTF8Str)] string str, [MarshalAs(UnmanagedType.LPUTF8Str)] string str_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_GetIDNoKeepAlivePtr")]
            internal static extern uint ImGuiWindowGetIDNoKeepAlivePtr(global::System.IntPtr self, global::System.IntPtr ptr);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_GetIDNoKeepAliveInt")]
            internal static extern uint ImGuiWindowGetIDNoKeepAliveInt(global::System.IntPtr self, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_GetIDFromRectangle")]
            internal static extern uint ImGuiWindowGetIDFromRectangle(global::System.IntPtr self, global::System.IntPtr r_abs);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_Rect")]
            internal static extern void ImGuiWindowRect(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_CalcFontSize")]
            internal static extern float ImGuiWindowCalcFontSize(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_TitleBarHeight")]
            internal static extern float ImGuiWindowTitleBarHeight(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_TitleBarRect")]
            internal static extern void ImGuiWindowTitleBarRect(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_MenuBarHeight")]
            internal static extern float ImGuiWindowMenuBarHeight(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiWindow_MenuBarRect")]
            internal static extern void ImGuiWindowMenuBarRect(global::System.IntPtr pOut, global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiItemHoveredDataBackup_ImGuiItemHoveredDataBackup")]
            internal static extern global::System.IntPtr ImGuiItemHoveredDataBackupImGuiItemHoveredDataBackup();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiItemHoveredDataBackup_destroy")]
            internal static extern void ImGuiItemHoveredDataBackup_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiItemHoveredDataBackup_Backup")]
            internal static extern void ImGuiItemHoveredDataBackupBackup(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiItemHoveredDataBackup_Restore")]
            internal static extern void ImGuiItemHoveredDataBackupRestore(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTabItem_ImGuiTabItem")]
            internal static extern global::System.IntPtr ImGuiTabItemImGuiTabItem();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTabItem_destroy")]
            internal static extern void ImGuiTabItem_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTabBar_ImGuiTabBar")]
            internal static extern global::System.IntPtr ImGuiTabBarImGuiTabBar();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTabBar_destroy")]
            internal static extern void ImGuiTabBar_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTabBar_GetTabOrder")]
            internal static extern int ImGuiTabBarGetTabOrder(global::System.IntPtr self, global::System.IntPtr tab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGuiTabBar_GetTabName")]
            internal static extern global::System.IntPtr ImGuiTabBarGetTabName(global::System.IntPtr self, global::System.IntPtr tab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetCurrentWindowRead")]
            internal static extern global::System.IntPtr GetCurrentWindowRead();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetCurrentWindow")]
            internal static extern global::System.IntPtr GetCurrentWindow();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFindWindowByID")]
            internal static extern global::System.IntPtr FindWindowByID(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFindWindowByName")]
            internal static extern global::System.IntPtr FindWindowByName([MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igUpdateWindowParentAndRootLinks")]
            internal static extern void UpdateWindowParentAndRootLinks(global::System.IntPtr window, int flags, global::System.IntPtr parent_window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCalcWindowExpectedSize")]
            internal static extern void CalcWindowExpectedSize(global::System.IntPtr pOut, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsWindowChildOf")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowChildOf(global::System.IntPtr window, global::System.IntPtr potential_parent);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsWindowNavFocusable")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsWindowNavFocusable(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowAllowedExtentRect")]
            internal static extern void GetWindowAllowedExtentRect(global::System.IntPtr pOut, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowPosWindowPtr")]
            internal static extern void SetWindowPosWindowPtr(global::System.IntPtr window, global::DearImguiSharp.ImVec2.__Internal pos, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowSizeWindowPtr")]
            internal static extern void SetWindowSizeWindowPtr(global::System.IntPtr window, global::DearImguiSharp.ImVec2.__Internal size, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetWindowCollapsedWindowPtr")]
            internal static extern void SetWindowCollapsedWindowPtr(global::System.IntPtr window, bool collapsed, int cond);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFocusWindow")]
            internal static extern void FocusWindow(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFocusTopMostWindowUnderOne")]
            internal static extern void FocusTopMostWindowUnderOne(global::System.IntPtr under_this_window, global::System.IntPtr ignore_window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBringWindowToFocusFront")]
            internal static extern void BringWindowToFocusFront(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBringWindowToDisplayFront")]
            internal static extern void BringWindowToDisplayFront(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBringWindowToDisplayBack")]
            internal static extern void BringWindowToDisplayBack(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetCurrentFont")]
            internal static extern void SetCurrentFont(global::System.IntPtr font);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetDefaultFont")]
            internal static extern global::System.IntPtr GetDefaultFont();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetForegroundDrawListWindowPtr")]
            internal static extern global::System.IntPtr GetForegroundDrawListWindowPtr(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInitialize")]
            internal static extern void Initialize(global::System.IntPtr context);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShutdown")]
            internal static extern void Shutdown(global::System.IntPtr context);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igUpdateHoveredWindowAndCaptureFlags")]
            internal static extern void UpdateHoveredWindowAndCaptureFlags();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igStartMouseMovingWindow")]
            internal static extern void StartMouseMovingWindow(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igUpdateMouseMovingWindowNewFrame")]
            internal static extern void UpdateMouseMovingWindowNewFrame();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igUpdateMouseMovingWindowEndFrame")]
            internal static extern void UpdateMouseMovingWindowEndFrame();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igMarkIniSettingsDirtyNil")]
            internal static extern void MarkIniSettingsDirtyNil();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igMarkIniSettingsDirtyWindowPtr")]
            internal static extern void MarkIniSettingsDirtyWindowPtr(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCreateNewWindowSettings")]
            internal static extern global::System.IntPtr CreateNewWindowSettings([MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFindWindowSettings")]
            internal static extern global::System.IntPtr FindWindowSettings(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFindOrCreateWindowSettings")]
            internal static extern global::System.IntPtr FindOrCreateWindowSettings([MarshalAs(UnmanagedType.LPUTF8Str)] string name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFindSettingsHandler")]
            internal static extern global::System.IntPtr FindSettingsHandler([MarshalAs(UnmanagedType.LPUTF8Str)] string type_name);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollXWindowPtr")]
            internal static extern void SetScrollXWindowPtr(global::System.IntPtr window, float new_scroll_x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollYWindowPtr")]
            internal static extern void SetScrollYWindowPtr(global::System.IntPtr window, float new_scroll_y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollFromPosXWindowPtr")]
            internal static extern void SetScrollFromPosXWindowPtr(global::System.IntPtr window, float local_x, float center_x_ratio);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetScrollFromPosYWindowPtr")]
            internal static extern void SetScrollFromPosYWindowPtr(global::System.IntPtr window, float local_y, float center_y_ratio);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igScrollToBringRectIntoView")]
            internal static extern void ScrollToBringRectIntoView(global::System.IntPtr pOut, global::System.IntPtr window, global::System.IntPtr item_rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetItemID")]
            internal static extern uint GetItemID();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetItemStatusFlags")]
            internal static extern int GetItemStatusFlags();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetActiveID")]
            internal static extern uint GetActiveID();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetFocusID")]
            internal static extern uint GetFocusID();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetActiveID")]
            internal static extern void SetActiveID(uint id, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetFocusID")]
            internal static extern void SetFocusID(uint id, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igClearActiveID")]
            internal static extern void ClearActiveID();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetHoveredID")]
            internal static extern uint GetHoveredID();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetHoveredID")]
            internal static extern void SetHoveredID(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igKeepAliveID")]
            internal static extern void KeepAliveID(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igMarkItemEdited")]
            internal static extern void MarkItemEdited(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushOverrideID")]
            internal static extern void PushOverrideID(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igItemSizeVec2")]
            internal static extern void ItemSizeVec2(global::DearImguiSharp.ImVec2.__Internal size, float text_baseline_y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igItemSizeRect")]
            internal static extern void ItemSizeRect(global::System.IntPtr bb, float text_baseline_y);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igItemAdd")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ItemAdd(global::System.IntPtr bb, uint id, global::System.IntPtr nav_bb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igItemHoverable")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ItemHoverable(global::System.IntPtr bb, uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsClippedEx")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsClippedEx(global::System.IntPtr bb, uint id, bool clip_even_when_logged);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFocusableItemRegister")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool FocusableItemRegister(global::System.IntPtr window, uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFocusableItemUnregister")]
            internal static extern void FocusableItemUnregister(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCalcItemSize")]
            internal static extern void CalcItemSize(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal size, float default_w, float default_h);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCalcWrapWidthForPos")]
            internal static extern float CalcWrapWidthForPos(global::DearImguiSharp.ImVec2.__Internal pos, float wrap_pos_x);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushMultiItemsWidths")]
            internal static extern void PushMultiItemsWidths(int components, float width_full);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushItemFlag")]
            internal static extern void PushItemFlag(int option, bool enabled);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopItemFlag")]
            internal static extern void PopItemFlag();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsItemToggledSelection")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsItemToggledSelection();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetContentRegionMaxAbs")]
            internal static extern void GetContentRegionMaxAbs(global::System.IntPtr pOut);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShrinkWidths")]
            internal static extern void ShrinkWidths(global::System.IntPtr items, int count, float width_excess);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLogBegin")]
            internal static extern void LogBegin(global::DearImguiSharp.ImGuiLogType type, int auto_open_depth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLogToBuffer")]
            internal static extern void LogToBuffer(int auto_open_depth);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginChildEx")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginChildEx([MarshalAs(UnmanagedType.LPUTF8Str)] string name, uint id, global::DearImguiSharp.ImVec2.__Internal size_arg, bool border, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igOpenPopupEx")]
            internal static extern void OpenPopupEx(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igClosePopupToLevel")]
            internal static extern void ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igClosePopupsOverWindow")]
            internal static extern void ClosePopupsOverWindow(global::System.IntPtr ref_window, bool restore_focus_to_window_under_popup);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsPopupOpenID")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsPopupOpenID(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginPopupEx")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginPopupEx(uint id, int extra_flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginTooltipEx")]
            internal static extern void BeginTooltipEx(int extra_flags, int tooltip_flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetTopMostPopupModal")]
            internal static extern global::System.IntPtr GetTopMostPopupModal();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFindBestWindowPosForPopup")]
            internal static extern void FindBestWindowPosForPopup(global::System.IntPtr pOut, global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFindBestWindowPosForPopupEx")]
            internal static extern void FindBestWindowPosForPopupEx(global::System.IntPtr pOut, global::DearImguiSharp.ImVec2.__Internal ref_pos, global::DearImguiSharp.ImVec2.__Internal size, int* last_dir, global::System.IntPtr r_outer, global::System.IntPtr r_avoid, global::DearImguiSharp.ImGuiPopupPositionPolicy policy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igNavInitWindow")]
            internal static extern void NavInitWindow(global::System.IntPtr window, bool force_reinit);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igNavMoveRequestButNoResultYet")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool NavMoveRequestButNoResultYet();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igNavMoveRequestCancel")]
            internal static extern void NavMoveRequestCancel();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igNavMoveRequestForward")]
            internal static extern void NavMoveRequestForward(int move_dir, int clip_dir, global::System.IntPtr bb_rel, int move_flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igNavMoveRequestTryWrapping")]
            internal static extern void NavMoveRequestTryWrapping(global::System.IntPtr window, int move_flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetNavInputAmount")]
            internal static extern float GetNavInputAmount(int n, global::DearImguiSharp.ImGuiInputReadMode mode);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetNavInputAmount2d")]
            internal static extern void GetNavInputAmount2d(global::System.IntPtr pOut, int dir_sources, global::DearImguiSharp.ImGuiInputReadMode mode, float slow_factor, float fast_factor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCalcTypematicRepeatAmount")]
            internal static extern int CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igActivateItem")]
            internal static extern void ActivateItem(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNavID")]
            internal static extern void SetNavID(uint id, int nav_layer, uint focus_scope_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSetNavIDWithRectRel")]
            internal static extern void SetNavIDWithRectRel(uint id, int nav_layer, uint focus_scope_id, global::System.IntPtr rect_rel);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushFocusScope")]
            internal static extern void PushFocusScope(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopFocusScope")]
            internal static extern void PopFocusScope();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetFocusScopeID")]
            internal static extern uint GetFocusScopeID();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsActiveIdUsingNavDir")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsActiveIdUsingNavDir(int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsActiveIdUsingNavInput")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsActiveIdUsingNavInput(int input);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsActiveIdUsingKey")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsActiveIdUsingKey(int key);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsMouseDragPastThreshold")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsMouseDragPastThreshold(int button, float lock_threshold);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsKeyPressedMap")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsKeyPressedMap(int key, bool repeat);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsNavInputDown")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsNavInputDown(int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsNavInputTest")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsNavInputTest(int n, global::DearImguiSharp.ImGuiInputReadMode rm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginDragDropTargetCustom")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginDragDropTargetCustom(global::System.IntPtr bb, uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igClearDragDrop")]
            internal static extern void ClearDragDrop();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igIsDragDropPayloadBeingAccepted")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool IsDragDropPayloadBeingAccepted();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginColumns")]
            internal static extern void BeginColumns([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int count, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igEndColumns")]
            internal static extern void EndColumns();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushColumnClipRect")]
            internal static extern void PushColumnClipRect(int column_index);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPushColumnsBackground")]
            internal static extern void PushColumnsBackground();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPopColumnsBackground")]
            internal static extern void PopColumnsBackground();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColumnsID")]
            internal static extern uint GetColumnsID([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int count);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFindOrCreateColumns")]
            internal static extern global::System.IntPtr FindOrCreateColumns(global::System.IntPtr window, uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColumnOffsetFromNorm")]
            internal static extern float GetColumnOffsetFromNorm(global::System.IntPtr columns, float offset_norm);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetColumnNormFromOffset")]
            internal static extern float GetColumnNormFromOffset(global::System.IntPtr columns, float offset);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igBeginTabBarEx")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool BeginTabBarEx(global::System.IntPtr tab_bar, global::System.IntPtr bb, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTabBarFindTabByID")]
            internal static extern global::System.IntPtr TabBarFindTabByID(global::System.IntPtr tab_bar, uint tab_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTabBarRemoveTab")]
            internal static extern void TabBarRemoveTab(global::System.IntPtr tab_bar, uint tab_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTabBarCloseTab")]
            internal static extern void TabBarCloseTab(global::System.IntPtr tab_bar, global::System.IntPtr tab);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTabBarQueueChangeTabOrder")]
            internal static extern void TabBarQueueChangeTabOrder(global::System.IntPtr tab_bar, global::System.IntPtr tab, int dir);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTabItemEx")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TabItemEx(global::System.IntPtr tab_bar, [MarshalAs(UnmanagedType.LPUTF8Str)] string label, bool* p_open, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTabItemCalcSize")]
            internal static extern void TabItemCalcSize(global::System.IntPtr pOut, [MarshalAs(UnmanagedType.LPUTF8Str)] string label, bool has_close_button);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTabItemBackground")]
            internal static extern void TabItemBackground(global::System.IntPtr draw_list, global::System.IntPtr bb, int flags, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTabItemLabelAndCloseButton")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TabItemLabelAndCloseButton(global::System.IntPtr draw_list, global::System.IntPtr bb, int flags, global::DearImguiSharp.ImVec2.__Internal frame_padding, [MarshalAs(UnmanagedType.LPUTF8Str)] string label, uint tab_id, uint close_button_id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderText")]
            internal static extern void RenderText(global::DearImguiSharp.ImVec2.__Internal pos, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, bool hide_text_after_hash);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderTextWrapped")]
            internal static extern void RenderTextWrapped(global::DearImguiSharp.ImVec2.__Internal pos, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, float wrap_width);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderTextClipped")]
            internal static extern void RenderTextClipped(global::DearImguiSharp.ImVec2.__Internal pos_min, global::DearImguiSharp.ImVec2.__Internal pos_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, global::System.IntPtr text_size_if_known, global::DearImguiSharp.ImVec2.__Internal align, global::System.IntPtr clip_rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderTextClippedEx")]
            internal static extern void RenderTextClippedEx(global::System.IntPtr draw_list, global::DearImguiSharp.ImVec2.__Internal pos_min, global::DearImguiSharp.ImVec2.__Internal pos_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, global::System.IntPtr text_size_if_known, global::DearImguiSharp.ImVec2.__Internal align, global::System.IntPtr clip_rect);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderTextEllipsis")]
            internal static extern void RenderTextEllipsis(global::System.IntPtr draw_list, global::DearImguiSharp.ImVec2.__Internal pos_min, global::DearImguiSharp.ImVec2.__Internal pos_max, float clip_max_x, float ellipsis_max_x, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, global::System.IntPtr text_size_if_known);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderFrame")]
            internal static extern void RenderFrame(global::DearImguiSharp.ImVec2.__Internal p_min, global::DearImguiSharp.ImVec2.__Internal p_max, uint fill_col, bool border, float rounding);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderFrameBorder")]
            internal static extern void RenderFrameBorder(global::DearImguiSharp.ImVec2.__Internal p_min, global::DearImguiSharp.ImVec2.__Internal p_max, float rounding);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderColorRectWithAlphaCheckerboard")]
            internal static extern void RenderColorRectWithAlphaCheckerboard(global::DearImguiSharp.ImVec2.__Internal p_min, global::DearImguiSharp.ImVec2.__Internal p_max, uint fill_col, float grid_step, global::DearImguiSharp.ImVec2.__Internal grid_off, float rounding, int rounding_corners_flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderCheckMark")]
            internal static extern void RenderCheckMark(global::DearImguiSharp.ImVec2.__Internal pos, uint col, float sz);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderNavHighlight")]
            internal static extern void RenderNavHighlight(global::System.IntPtr bb, uint id, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igFindRenderedTextEnd")]
            internal static extern global::System.IntPtr FindRenderedTextEnd([MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLogRenderedText")]
            internal static extern void LogRenderedText(global::System.IntPtr ref_pos, [MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderArrow")]
            internal static extern void RenderArrow(global::System.IntPtr draw_list, global::DearImguiSharp.ImVec2.__Internal pos, uint col, int dir, float scale);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderBullet")]
            internal static extern void RenderBullet(global::System.IntPtr draw_list, global::DearImguiSharp.ImVec2.__Internal pos, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderMouseCursor")]
            internal static extern void RenderMouseCursor(global::System.IntPtr draw_list, global::DearImguiSharp.ImVec2.__Internal pos, float scale, int mouse_cursor, uint col_fill, uint col_border, uint col_shadow);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderArrowPointingAt")]
            internal static extern void RenderArrowPointingAt(global::System.IntPtr draw_list, global::DearImguiSharp.ImVec2.__Internal pos, global::DearImguiSharp.ImVec2.__Internal half_sz, int direction, uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igRenderRectFilledRangeH")]
            internal static extern void RenderRectFilledRangeH(global::System.IntPtr draw_list, global::System.IntPtr rect, uint col, float x_start_norm, float x_end_norm, float rounding);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTextEx")]
            internal static extern void TextEx([MarshalAs(UnmanagedType.LPUTF8Str)] string text, [MarshalAs(UnmanagedType.LPUTF8Str)] string text_end, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igButtonEx")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ButtonEx([MarshalAs(UnmanagedType.LPUTF8Str)] string label, global::DearImguiSharp.ImVec2.__Internal size_arg, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCloseButton")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CloseButton(uint id, global::DearImguiSharp.ImVec2.__Internal pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igCollapseButton")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool CollapseButton(uint id, global::DearImguiSharp.ImVec2.__Internal pos);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igArrowButtonEx")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ArrowButtonEx([MarshalAs(UnmanagedType.LPUTF8Str)] string str_id, int dir, global::DearImguiSharp.ImVec2.__Internal size_arg, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igScrollbar")]
            internal static extern void Scrollbar(global::DearImguiSharp.ImGuiAxis axis);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igScrollbarEx")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ScrollbarEx(global::System.IntPtr bb, uint id, global::DearImguiSharp.ImGuiAxis axis, float* p_scroll_v, float avail_v, float contents_v, int rounding_corners);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowScrollbarID")]
            internal static extern uint GetWindowScrollbarID(global::System.IntPtr window, global::DearImguiSharp.ImGuiAxis axis);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGetWindowResizeID")]
            internal static extern uint GetWindowResizeID(global::System.IntPtr window, int n);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSeparatorEx")]
            internal static extern void SeparatorEx(int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igButtonBehavior")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ButtonBehavior(global::System.IntPtr bb, uint id, bool* out_hovered, bool* out_held, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDragBehavior")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DragBehavior(uint id, int data_type, global::System.IntPtr p_v, float v_speed, global::System.IntPtr p_min, global::System.IntPtr p_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSliderBehavior")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SliderBehavior(global::System.IntPtr bb, uint id, int data_type, global::System.IntPtr p_v, global::System.IntPtr p_min, global::System.IntPtr p_max, [MarshalAs(UnmanagedType.LPUTF8Str)] string format, float power, int flags, global::System.IntPtr out_grab_bb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igSplitterBehavior")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool SplitterBehavior(global::System.IntPtr bb, uint id, global::DearImguiSharp.ImGuiAxis axis, float* size1, float* size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreeNodeBehavior")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeBehavior(uint id, int flags, [MarshalAs(UnmanagedType.LPUTF8Str)] string label, [MarshalAs(UnmanagedType.LPUTF8Str)] string label_end);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreeNodeBehaviorIsOpen")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TreeNodeBehaviorIsOpen(uint id, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTreePushOverrideID")]
            internal static extern void TreePushOverrideID(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDataTypeGetInfo")]
            internal static extern global::System.IntPtr DataTypeGetInfo(int data_type);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDataTypeFormatString")]
            internal static extern int DataTypeFormatString(sbyte* buf, int buf_size, int data_type, global::System.IntPtr p_data, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDataTypeApplyOp")]
            internal static extern void DataTypeApplyOp(int data_type, int op, global::System.IntPtr output, global::System.IntPtr arg_1, global::System.IntPtr arg_2);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDataTypeApplyOpFromText")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool DataTypeApplyOpFromText([MarshalAs(UnmanagedType.LPUTF8Str)] string buf, [MarshalAs(UnmanagedType.LPUTF8Str)] string initial_value_buf, int data_type, global::System.IntPtr p_data, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igInputTextEx")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool InputTextEx([MarshalAs(UnmanagedType.LPUTF8Str)] string label, [MarshalAs(UnmanagedType.LPUTF8Str)] string hint, sbyte* buf, int buf_size, global::DearImguiSharp.ImVec2.__Internal size_arg, int flags, global::System.IntPtr callback, global::System.IntPtr user_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTempInputTextScalar")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TempInputTextScalar(global::System.IntPtr bb, uint id, [MarshalAs(UnmanagedType.LPUTF8Str)] string label, int data_type, global::System.IntPtr p_data, [MarshalAs(UnmanagedType.LPUTF8Str)] string format);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igTempInputTextIsActive")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool TempInputTextIsActive(uint id);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorTooltip")]
            internal static extern void ColorTooltip([MarshalAs(UnmanagedType.LPUTF8Str)] string text, float* col, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorEditOptionsPopup")]
            internal static extern void ColorEditOptionsPopup(float* col, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorPickerOptionsPopup")]
            internal static extern void ColorPickerOptionsPopup(float* ref_col, int flags);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igPlotEx")]
            internal static extern void PlotEx(global::DearImguiSharp.ImGuiPlotType plot_type, [MarshalAs(UnmanagedType.LPUTF8Str)] string label, global::System.IntPtr values_getter, global::System.IntPtr data, int values_count, int values_offset, [MarshalAs(UnmanagedType.LPUTF8Str)] string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2.__Internal frame_size);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShadeVertsLinearColorGradientKeepAlpha")]
            internal static extern void ShadeVertsLinearColorGradientKeepAlpha(global::System.IntPtr draw_list, int vert_start_idx, int vert_end_idx, global::DearImguiSharp.ImVec2.__Internal gradient_p0, global::DearImguiSharp.ImVec2.__Internal gradient_p1, uint col0, uint col1);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igShadeVertsLinearUV")]
            internal static extern void ShadeVertsLinearUV(global::System.IntPtr draw_list, int vert_start_idx, int vert_end_idx, global::DearImguiSharp.ImVec2.__Internal a, global::DearImguiSharp.ImVec2.__Internal b, global::DearImguiSharp.ImVec2.__Internal uv_a, global::DearImguiSharp.ImVec2.__Internal uv_b, bool clamp);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGcCompactTransientWindowBuffers")]
            internal static extern void GcCompactTransientWindowBuffers(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGcAwakeTransientWindowBuffers")]
            internal static extern void GcAwakeTransientWindowBuffers(global::System.IntPtr window);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDebugDrawItemRect")]
            internal static extern void DebugDrawItemRect(uint col);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igDebugStartItemPicker")]
            internal static extern void DebugStartItemPicker();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFontAtlasBuildWithStbTruetype")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImFontAtlasBuildWithStbTruetype(global::System.IntPtr atlas);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFontAtlasBuildRegisterDefaultCustomRects")]
            internal static extern void ImFontAtlasBuildRegisterDefaultCustomRects(global::System.IntPtr atlas);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFontAtlasBuildSetupFont")]
            internal static extern void ImFontAtlasBuildSetupFont(global::System.IntPtr atlas, global::System.IntPtr font, global::System.IntPtr font_config, float ascent, float descent);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFontAtlasBuildPackCustomRects")]
            internal static extern void ImFontAtlasBuildPackCustomRects(global::System.IntPtr atlas, global::System.IntPtr stbrp_context_opaque);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFontAtlasBuildFinish")]
            internal static extern void ImFontAtlasBuildFinish(global::System.IntPtr atlas);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFontAtlasBuildMultiplyCalcLookupTable")]
            internal static extern void ImFontAtlasBuildMultiplyCalcLookupTable(byte[] out_table, float in_multiply_factor);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igImFontAtlasBuildMultiplyRectAlpha8")]
            internal static extern void ImFontAtlasBuildMultiplyRectAlpha8(byte[] table, byte* pixels, int x, int y, int w, int h, int stride);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igLogText")]
            internal static extern void LogText([MarshalAs(UnmanagedType.LPUTF8Str)] string fmt);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igGET_FLT_MAX")]
            internal static extern float GET_FLT_MAX();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorConvertRGBtoHSV")]
            internal static extern void ColorConvertRGBtoHSV(float r, float g, float b, float* out_h, float* out_s, float* out_v);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="igColorConvertHSVtoRGB")]
            internal static extern void ColorConvertHSVtoRGB(float h, float s, float v, float* out_r, float* out_g, float* out_b);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVector_ImWchar_create")]
            internal static extern global::System.IntPtr ImVectorImWchar_create();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVector_ImWchar_destroy")]
            internal static extern void ImVectorImWchar_destroy(global::System.IntPtr self);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVector_ImWchar_Init")]
            internal static extern void ImVectorImWcharInit(global::System.IntPtr p);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImVector_ImWchar_UnInit")]
            internal static extern void ImVectorImWcharUnInit(global::System.IntPtr p);
        }

        public static global::DearImguiSharp.ImVec2 ImVec2ImVec2Nil()
        {
            var __ret = __Internal.ImVec2ImVec2Nil();
            global::DearImguiSharp.ImVec2 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVec2.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVec2) global::DearImguiSharp.ImVec2.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVec2.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImVec2_destroy(global::DearImguiSharp.ImVec2 self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImVec2_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImVec2 ImVec2ImVec2Float(float _x, float _y)
        {
            var __ret = __Internal.ImVec2ImVec2Float(_x, _y);
            global::DearImguiSharp.ImVec2 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVec2.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVec2) global::DearImguiSharp.ImVec2.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVec2.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImVec4 ImVec4ImVec4Nil()
        {
            var __ret = __Internal.ImVec4ImVec4Nil();
            global::DearImguiSharp.ImVec4 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVec4.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVec4) global::DearImguiSharp.ImVec4.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVec4.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImVec4_destroy(global::DearImguiSharp.ImVec4 self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImVec4_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImVec4 ImVec4ImVec4Float(float _x, float _y, float _z, float _w)
        {
            var __ret = __Internal.ImVec4ImVec4Float(_x, _y, _z, _w);
            global::DearImguiSharp.ImVec4 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVec4.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVec4) global::DearImguiSharp.ImVec4.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVec4.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiContext CreateContext(global::DearImguiSharp.ImFontAtlas shared_font_atlas)
        {
            var __arg0 = ReferenceEquals(shared_font_atlas, null) ? global::System.IntPtr.Zero : shared_font_atlas.__Instance;
            var __ret = __Internal.CreateContext(__arg0);
            global::DearImguiSharp.ImGuiContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiContext) global::DearImguiSharp.ImGuiContext.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiContext.__CreateInstance(__ret);
            return __result0;
        }

        public static void DestroyContext(global::DearImguiSharp.ImGuiContext ctx)
        {
            var __arg0 = ReferenceEquals(ctx, null) ? global::System.IntPtr.Zero : ctx.__Instance;
            __Internal.DestroyContext(__arg0);
        }

        public static global::DearImguiSharp.ImGuiContext GetCurrentContext()
        {
            var __ret = __Internal.GetCurrentContext();
            global::DearImguiSharp.ImGuiContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiContext) global::DearImguiSharp.ImGuiContext.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiContext.__CreateInstance(__ret);
            return __result0;
        }

        public static void SetCurrentContext(global::DearImguiSharp.ImGuiContext ctx)
        {
            var __arg0 = ReferenceEquals(ctx, null) ? global::System.IntPtr.Zero : ctx.__Instance;
            __Internal.SetCurrentContext(__arg0);
        }

        public static bool DebugCheckVersionAndDataLayout(string version_str, ulong sz_io, ulong sz_style, ulong sz_vec2, ulong sz_vec4, ulong sz_drawvert, ulong sz_drawidx)
        {
            var __ret = __Internal.DebugCheckVersionAndDataLayout(version_str, sz_io, sz_style, sz_vec2, sz_vec4, sz_drawvert, sz_drawidx);
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiIO GetIO()
        {
            var __ret = __Internal.GetIO();
            global::DearImguiSharp.ImGuiIO __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiIO.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiIO) global::DearImguiSharp.ImGuiIO.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiIO.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiStyle GetStyle()
        {
            var __ret = __Internal.GetStyle();
            global::DearImguiSharp.ImGuiStyle __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiStyle.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiStyle) global::DearImguiSharp.ImGuiStyle.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiStyle.__CreateInstance(__ret);
            return __result0;
        }

        public static void NewFrame()
        {
            __Internal.NewFrame();
        }

        public static void EndFrame()
        {
            __Internal.EndFrame();
        }

        public static void Render()
        {
            __Internal.Render();
        }

        public static global::DearImguiSharp.ImDrawData GetDrawData()
        {
            var __ret = __Internal.GetDrawData();
            global::DearImguiSharp.ImDrawData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawData) global::DearImguiSharp.ImDrawData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawData.__CreateInstance(__ret);
            return __result0;
        }

        public static void ShowDemoWindow(ref bool p_open)
        {
            fixed (bool* __p_open0 = &p_open)
            {
                var __arg0 = __p_open0;
                __Internal.ShowDemoWindow(__arg0);
            }
        }

        public static void ShowAboutWindow(ref bool p_open)
        {
            fixed (bool* __p_open0 = &p_open)
            {
                var __arg0 = __p_open0;
                __Internal.ShowAboutWindow(__arg0);
            }
        }

        public static void ShowMetricsWindow(ref bool p_open)
        {
            fixed (bool* __p_open0 = &p_open)
            {
                var __arg0 = __p_open0;
                __Internal.ShowMetricsWindow(__arg0);
            }
        }

        public static void ShowStyleEditor(global::DearImguiSharp.ImGuiStyle @ref)
        {
            var __arg0 = ReferenceEquals(@ref, null) ? global::System.IntPtr.Zero : @ref.__Instance;
            __Internal.ShowStyleEditor(__arg0);
        }

        public static bool ShowStyleSelector(string label)
        {
            var __ret = __Internal.ShowStyleSelector(label);
            return __ret;
        }

        public static void ShowFontSelector(string label)
        {
            __Internal.ShowFontSelector(label);
        }

        public static void ShowUserGuide()
        {
            __Internal.ShowUserGuide();
        }

        public static string GetVersion()
        {
            var __ret = __Internal.GetVersion();
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static void StyleColorsDark(global::DearImguiSharp.ImGuiStyle dst)
        {
            var __arg0 = ReferenceEquals(dst, null) ? global::System.IntPtr.Zero : dst.__Instance;
            __Internal.StyleColorsDark(__arg0);
        }

        public static void StyleColorsClassic(global::DearImguiSharp.ImGuiStyle dst)
        {
            var __arg0 = ReferenceEquals(dst, null) ? global::System.IntPtr.Zero : dst.__Instance;
            __Internal.StyleColorsClassic(__arg0);
        }

        public static void StyleColorsLight(global::DearImguiSharp.ImGuiStyle dst)
        {
            var __arg0 = ReferenceEquals(dst, null) ? global::System.IntPtr.Zero : dst.__Instance;
            __Internal.StyleColorsLight(__arg0);
        }

        public static bool Begin(string name, ref bool p_open, int flags)
        {
            fixed (bool* __p_open1 = &p_open)
            {
                var __arg1 = __p_open1;
                var __ret = __Internal.Begin(name, __arg1, flags);
                return __ret;
            }
        }

        public static void End()
        {
            __Internal.End();
        }

        public static bool BeginChildStr(string str_id, global::DearImguiSharp.ImVec2 size, bool border, int flags)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            var __ret = __Internal.BeginChildStr(str_id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, border, flags);
            return __ret;
        }

        public static bool BeginChildID(uint id, global::DearImguiSharp.ImVec2 size, bool border, int flags)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            var __ret = __Internal.BeginChildID(id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, border, flags);
            return __ret;
        }

        public static void EndChild()
        {
            __Internal.EndChild();
        }

        public static bool IsWindowAppearing()
        {
            var __ret = __Internal.IsWindowAppearing();
            return __ret;
        }

        public static bool IsWindowCollapsed()
        {
            var __ret = __Internal.IsWindowCollapsed();
            return __ret;
        }

        public static bool IsWindowFocused(int flags)
        {
            var __ret = __Internal.IsWindowFocused(flags);
            return __ret;
        }

        public static bool IsWindowHovered(int flags)
        {
            var __ret = __Internal.IsWindowHovered(flags);
            return __ret;
        }

        public static global::DearImguiSharp.ImDrawList GetWindowDrawList()
        {
            var __ret = __Internal.GetWindowDrawList();
            global::DearImguiSharp.ImDrawList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawList) global::DearImguiSharp.ImDrawList.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawList.__CreateInstance(__ret);
            return __result0;
        }

        public static void GetWindowPos(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetWindowPos(__arg0);
        }

        public static void GetWindowSize(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetWindowSize(__arg0);
        }

        public static float GetWindowWidth()
        {
            var __ret = __Internal.GetWindowWidth();
            return __ret;
        }

        public static float GetWindowHeight()
        {
            var __ret = __Internal.GetWindowHeight();
            return __ret;
        }

        public static void SetNextWindowPos(global::DearImguiSharp.ImVec2 pos, int cond, global::DearImguiSharp.ImVec2 pivot)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg0 = pos.__Instance;
            if (ReferenceEquals(pivot, null))
                throw new global::System.ArgumentNullException("pivot", "Cannot be null because it is passed by value.");
            var __arg2 = pivot.__Instance;
            __Internal.SetNextWindowPos(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, cond, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2);
        }

        public static void SetNextWindowSize(global::DearImguiSharp.ImVec2 size, int cond)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg0 = size.__Instance;
            __Internal.SetNextWindowSize(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, cond);
        }

        public static void SetNextWindowSizeConstraints(global::DearImguiSharp.ImVec2 size_min, global::DearImguiSharp.ImVec2 size_max, global::DearImguiSharp.ImGuiSizeCallback custom_callback, global::System.IntPtr custom_callback_data)
        {
            if (ReferenceEquals(size_min, null))
                throw new global::System.ArgumentNullException("size_min", "Cannot be null because it is passed by value.");
            var __arg0 = size_min.__Instance;
            if (ReferenceEquals(size_max, null))
                throw new global::System.ArgumentNullException("size_max", "Cannot be null because it is passed by value.");
            var __arg1 = size_max.__Instance;
            var __arg2 = custom_callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(custom_callback);
            __Internal.SetNextWindowSizeConstraints(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, __arg2, custom_callback_data);
        }

        public static void SetNextWindowContentSize(global::DearImguiSharp.ImVec2 size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg0 = size.__Instance;
            __Internal.SetNextWindowContentSize(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0);
        }

        public static void SetNextWindowCollapsed(bool collapsed, int cond)
        {
            __Internal.SetNextWindowCollapsed(collapsed, cond);
        }

        public static void SetNextWindowFocus()
        {
            __Internal.SetNextWindowFocus();
        }

        public static void SetNextWindowBgAlpha(float alpha)
        {
            __Internal.SetNextWindowBgAlpha(alpha);
        }

        public static void SetWindowPosVec2(global::DearImguiSharp.ImVec2 pos, int cond)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg0 = pos.__Instance;
            __Internal.SetWindowPosVec2(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, cond);
        }

        public static void SetWindowSizeVec2(global::DearImguiSharp.ImVec2 size, int cond)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg0 = size.__Instance;
            __Internal.SetWindowSizeVec2(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, cond);
        }

        public static void SetWindowCollapsedBool(bool collapsed, int cond)
        {
            __Internal.SetWindowCollapsedBool(collapsed, cond);
        }

        public static void SetWindowFocusNil()
        {
            __Internal.SetWindowFocusNil();
        }

        public static void SetWindowFontScale(float scale)
        {
            __Internal.SetWindowFontScale(scale);
        }

        public static void SetWindowPosStr(string name, global::DearImguiSharp.ImVec2 pos, int cond)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            __Internal.SetWindowPosStr(name, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, cond);
        }

        public static void SetWindowSizeStr(string name, global::DearImguiSharp.ImVec2 size, int cond)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            __Internal.SetWindowSizeStr(name, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, cond);
        }

        public static void SetWindowCollapsedStr(string name, bool collapsed, int cond)
        {
            __Internal.SetWindowCollapsedStr(name, collapsed, cond);
        }

        public static void SetWindowFocusStr(string name)
        {
            __Internal.SetWindowFocusStr(name);
        }

        public static void GetContentRegionMax(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetContentRegionMax(__arg0);
        }

        public static void GetContentRegionAvail(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetContentRegionAvail(__arg0);
        }

        public static void GetWindowContentRegionMin(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetWindowContentRegionMin(__arg0);
        }

        public static void GetWindowContentRegionMax(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetWindowContentRegionMax(__arg0);
        }

        public static float GetWindowContentRegionWidth()
        {
            var __ret = __Internal.GetWindowContentRegionWidth();
            return __ret;
        }

        public static float GetScrollX()
        {
            var __ret = __Internal.GetScrollX();
            return __ret;
        }

        public static float GetScrollY()
        {
            var __ret = __Internal.GetScrollY();
            return __ret;
        }

        public static float GetScrollMaxX()
        {
            var __ret = __Internal.GetScrollMaxX();
            return __ret;
        }

        public static float GetScrollMaxY()
        {
            var __ret = __Internal.GetScrollMaxY();
            return __ret;
        }

        public static void SetScrollXFloat(float scroll_x)
        {
            __Internal.SetScrollXFloat(scroll_x);
        }

        public static void SetScrollYFloat(float scroll_y)
        {
            __Internal.SetScrollYFloat(scroll_y);
        }

        public static void SetScrollHereX(float center_x_ratio)
        {
            __Internal.SetScrollHereX(center_x_ratio);
        }

        public static void SetScrollHereY(float center_y_ratio)
        {
            __Internal.SetScrollHereY(center_y_ratio);
        }

        public static void SetScrollFromPosXFloat(float local_x, float center_x_ratio)
        {
            __Internal.SetScrollFromPosXFloat(local_x, center_x_ratio);
        }

        public static void SetScrollFromPosYFloat(float local_y, float center_y_ratio)
        {
            __Internal.SetScrollFromPosYFloat(local_y, center_y_ratio);
        }

        public static void PushFont(global::DearImguiSharp.ImFont font)
        {
            var __arg0 = ReferenceEquals(font, null) ? global::System.IntPtr.Zero : font.__Instance;
            __Internal.PushFont(__arg0);
        }

        public static void PopFont()
        {
            __Internal.PopFont();
        }

        public static void PushStyleColorU32(int idx, uint col)
        {
            __Internal.PushStyleColorU32(idx, col);
        }

        public static void PushStyleColorVec4(int idx, global::DearImguiSharp.ImVec4 col)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is passed by value.");
            var __arg1 = col.__Instance;
            __Internal.PushStyleColorVec4(idx, __arg1);
        }

        public static void PopStyleColor(int count)
        {
            __Internal.PopStyleColor(count);
        }

        public static void PushStyleVarFloat(int idx, float val)
        {
            __Internal.PushStyleVarFloat(idx, val);
        }

        public static void PushStyleVarVec2(int idx, global::DearImguiSharp.ImVec2 val)
        {
            if (ReferenceEquals(val, null))
                throw new global::System.ArgumentNullException("val", "Cannot be null because it is passed by value.");
            var __arg1 = val.__Instance;
            __Internal.PushStyleVarVec2(idx, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
        }

        public static void PopStyleVar(int count)
        {
            __Internal.PopStyleVar(count);
        }

        public static global::DearImguiSharp.ImVec4 GetStyleColorVec4(int idx)
        {
            var __ret = __Internal.GetStyleColorVec4(idx);
            global::DearImguiSharp.ImVec4 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVec4.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVec4) global::DearImguiSharp.ImVec4.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVec4.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImFont GetFont()
        {
            var __ret = __Internal.GetFont();
            global::DearImguiSharp.ImFont __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(__ret);
            return __result0;
        }

        public static float GetFontSize()
        {
            var __ret = __Internal.GetFontSize();
            return __ret;
        }

        public static void GetFontTexUvWhitePixel(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetFontTexUvWhitePixel(__arg0);
        }

        public static uint GetColorU32Col(int idx, float alpha_mul)
        {
            var __ret = __Internal.GetColorU32Col(idx, alpha_mul);
            return __ret;
        }

        public static uint GetColorU32Vec4(global::DearImguiSharp.ImVec4 col)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is passed by value.");
            var __arg0 = col.__Instance;
            var __ret = __Internal.GetColorU32Vec4(__arg0);
            return __ret;
        }

        public static uint GetColorU32U32(uint col)
        {
            var __ret = __Internal.GetColorU32U32(col);
            return __ret;
        }

        public static void PushItemWidth(float item_width)
        {
            __Internal.PushItemWidth(item_width);
        }

        public static void PopItemWidth()
        {
            __Internal.PopItemWidth();
        }

        public static void SetNextItemWidth(float item_width)
        {
            __Internal.SetNextItemWidth(item_width);
        }

        public static float CalcItemWidth()
        {
            var __ret = __Internal.CalcItemWidth();
            return __ret;
        }

        public static void PushTextWrapPos(float wrap_local_pos_x)
        {
            __Internal.PushTextWrapPos(wrap_local_pos_x);
        }

        public static void PopTextWrapPos()
        {
            __Internal.PopTextWrapPos();
        }

        public static void PushAllowKeyboardFocus(bool allow_keyboard_focus)
        {
            __Internal.PushAllowKeyboardFocus(allow_keyboard_focus);
        }

        public static void PopAllowKeyboardFocus()
        {
            __Internal.PopAllowKeyboardFocus();
        }

        public static void PushButtonRepeat(bool repeat)
        {
            __Internal.PushButtonRepeat(repeat);
        }

        public static void PopButtonRepeat()
        {
            __Internal.PopButtonRepeat();
        }

        public static void Separator()
        {
            __Internal.Separator();
        }

        public static void SameLine(float offset_from_start_x, float spacing)
        {
            __Internal.SameLine(offset_from_start_x, spacing);
        }

        public static void NewLine()
        {
            __Internal.NewLine();
        }

        public static void Spacing()
        {
            __Internal.Spacing();
        }

        public static void Dummy(global::DearImguiSharp.ImVec2 size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg0 = size.__Instance;
            __Internal.Dummy(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0);
        }

        public static void Indent(float indent_w)
        {
            __Internal.Indent(indent_w);
        }

        public static void Unindent(float indent_w)
        {
            __Internal.Unindent(indent_w);
        }

        public static void BeginGroup()
        {
            __Internal.BeginGroup();
        }

        public static void EndGroup()
        {
            __Internal.EndGroup();
        }

        public static void GetCursorPos(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetCursorPos(__arg0);
        }

        public static float GetCursorPosX()
        {
            var __ret = __Internal.GetCursorPosX();
            return __ret;
        }

        public static float GetCursorPosY()
        {
            var __ret = __Internal.GetCursorPosY();
            return __ret;
        }

        public static void SetCursorPos(global::DearImguiSharp.ImVec2 local_pos)
        {
            if (ReferenceEquals(local_pos, null))
                throw new global::System.ArgumentNullException("local_pos", "Cannot be null because it is passed by value.");
            var __arg0 = local_pos.__Instance;
            __Internal.SetCursorPos(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0);
        }

        public static void SetCursorPosX(float local_x)
        {
            __Internal.SetCursorPosX(local_x);
        }

        public static void SetCursorPosY(float local_y)
        {
            __Internal.SetCursorPosY(local_y);
        }

        public static void GetCursorStartPos(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetCursorStartPos(__arg0);
        }

        public static void GetCursorScreenPos(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetCursorScreenPos(__arg0);
        }

        public static void SetCursorScreenPos(global::DearImguiSharp.ImVec2 pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg0 = pos.__Instance;
            __Internal.SetCursorScreenPos(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0);
        }

        public static void AlignTextToFramePadding()
        {
            __Internal.AlignTextToFramePadding();
        }

        public static float GetTextLineHeight()
        {
            var __ret = __Internal.GetTextLineHeight();
            return __ret;
        }

        public static float GetTextLineHeightWithSpacing()
        {
            var __ret = __Internal.GetTextLineHeightWithSpacing();
            return __ret;
        }

        public static float GetFrameHeight()
        {
            var __ret = __Internal.GetFrameHeight();
            return __ret;
        }

        public static float GetFrameHeightWithSpacing()
        {
            var __ret = __Internal.GetFrameHeightWithSpacing();
            return __ret;
        }

        public static void PushIDStr(string str_id)
        {
            __Internal.PushIDStr(str_id);
        }

        public static void PushIDStrStr(string str_id_begin, string str_id_end)
        {
            __Internal.PushIDStrStr(str_id_begin, str_id_end);
        }

        public static void PushIDPtr(global::System.IntPtr ptr_id)
        {
            __Internal.PushIDPtr(ptr_id);
        }

        public static void PushIDInt(int int_id)
        {
            __Internal.PushIDInt(int_id);
        }

        public static void PopID()
        {
            __Internal.PopID();
        }

        public static uint GetIDStr(string str_id)
        {
            var __ret = __Internal.GetIDStr(str_id);
            return __ret;
        }

        public static uint GetIDStrStr(string str_id_begin, string str_id_end)
        {
            var __ret = __Internal.GetIDStrStr(str_id_begin, str_id_end);
            return __ret;
        }

        public static uint GetIDPtr(global::System.IntPtr ptr_id)
        {
            var __ret = __Internal.GetIDPtr(ptr_id);
            return __ret;
        }

        public static void TextUnformatted(string text, string text_end)
        {
            __Internal.TextUnformatted(text, text_end);
        }

        public static void Text(string fmt)
        {
            __Internal.Text(fmt);
        }

        public static void TextColored(global::DearImguiSharp.ImVec4 col, string fmt)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is passed by value.");
            var __arg0 = col.__Instance;
            __Internal.TextColored(__arg0, fmt);
        }

        public static void TextDisabled(string fmt)
        {
            __Internal.TextDisabled(fmt);
        }

        public static void TextWrapped(string fmt)
        {
            __Internal.TextWrapped(fmt);
        }

        public static void LabelText(string label, string fmt)
        {
            __Internal.LabelText(label, fmt);
        }

        public static void BulletText(string fmt)
        {
            __Internal.BulletText(fmt);
        }

        public static bool Button(string label, global::DearImguiSharp.ImVec2 size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            var __ret = __Internal.Button(label, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            return __ret;
        }

        public static bool SmallButton(string label)
        {
            var __ret = __Internal.SmallButton(label);
            return __ret;
        }

        public static bool InvisibleButton(string str_id, global::DearImguiSharp.ImVec2 size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            var __ret = __Internal.InvisibleButton(str_id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            return __ret;
        }

        public static bool ArrowButton(string str_id, int dir)
        {
            var __ret = __Internal.ArrowButton(str_id, dir);
            return __ret;
        }

        public static void Image(global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2 size, global::DearImguiSharp.ImVec2 uv0, global::DearImguiSharp.ImVec2 uv1, global::DearImguiSharp.ImVec4 tint_col, global::DearImguiSharp.ImVec4 border_col)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            if (ReferenceEquals(uv0, null))
                throw new global::System.ArgumentNullException("uv0", "Cannot be null because it is passed by value.");
            var __arg2 = uv0.__Instance;
            if (ReferenceEquals(uv1, null))
                throw new global::System.ArgumentNullException("uv1", "Cannot be null because it is passed by value.");
            var __arg3 = uv1.__Instance;
            if (ReferenceEquals(tint_col, null))
                throw new global::System.ArgumentNullException("tint_col", "Cannot be null because it is passed by value.");
            var __arg4 = tint_col.__Instance;
            if (ReferenceEquals(border_col, null))
                throw new global::System.ArgumentNullException("border_col", "Cannot be null because it is passed by value.");
            var __arg5 = border_col.__Instance;
            __Internal.Image(user_texture_id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, __arg4, __arg5);
        }

        public static bool ImageButton(global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2 size, global::DearImguiSharp.ImVec2 uv0, global::DearImguiSharp.ImVec2 uv1, int frame_padding, global::DearImguiSharp.ImVec4 bg_col, global::DearImguiSharp.ImVec4 tint_col)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            if (ReferenceEquals(uv0, null))
                throw new global::System.ArgumentNullException("uv0", "Cannot be null because it is passed by value.");
            var __arg2 = uv0.__Instance;
            if (ReferenceEquals(uv1, null))
                throw new global::System.ArgumentNullException("uv1", "Cannot be null because it is passed by value.");
            var __arg3 = uv1.__Instance;
            if (ReferenceEquals(bg_col, null))
                throw new global::System.ArgumentNullException("bg_col", "Cannot be null because it is passed by value.");
            var __arg5 = bg_col.__Instance;
            if (ReferenceEquals(tint_col, null))
                throw new global::System.ArgumentNullException("tint_col", "Cannot be null because it is passed by value.");
            var __arg6 = tint_col.__Instance;
            var __ret = __Internal.ImageButton(user_texture_id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, frame_padding, __arg5, __arg6);
            return __ret;
        }

        public static bool Checkbox(string label, ref bool v)
        {
            fixed (bool* __v1 = &v)
            {
                var __arg1 = __v1;
                var __ret = __Internal.Checkbox(label, __arg1);
                return __ret;
            }
        }

        public static bool CheckboxFlags(string label, ref uint flags, uint flags_value)
        {
            fixed (uint* __flags1 = &flags)
            {
                var __arg1 = __flags1;
                var __ret = __Internal.CheckboxFlags(label, __arg1, flags_value);
                return __ret;
            }
        }

        public static bool RadioButtonBool(string label, bool active)
        {
            var __ret = __Internal.RadioButtonBool(label, active);
            return __ret;
        }

        public static bool RadioButtonIntPtr(string label, ref int v, int v_button)
        {
            fixed (int* __v1 = &v)
            {
                var __arg1 = __v1;
                var __ret = __Internal.RadioButtonIntPtr(label, __arg1, v_button);
                return __ret;
            }
        }

        public static void ProgressBar(float fraction, global::DearImguiSharp.ImVec2 size_arg, string overlay)
        {
            if (ReferenceEquals(size_arg, null))
                throw new global::System.ArgumentNullException("size_arg", "Cannot be null because it is passed by value.");
            var __arg1 = size_arg.__Instance;
            __Internal.ProgressBar(fraction, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, overlay);
        }

        public static void Bullet()
        {
            __Internal.Bullet();
        }

        public static bool BeginCombo(string label, string preview_value, int flags)
        {
            var __ret = __Internal.BeginCombo(label, preview_value, flags);
            return __ret;
        }

        public static void EndCombo()
        {
            __Internal.EndCombo();
        }

        public static bool ComboStr_arr(string label, ref int current_item, string[] items, int items_count, int popup_max_height_in_items)
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var __ret = __Internal.ComboStr_arr(label, __arg1, items, items_count, popup_max_height_in_items);
                return __ret;
            }
        }

        public static bool ComboStr(string label, ref int current_item, string items_separated_by_zeros, int popup_max_height_in_items)
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var __ret = __Internal.ComboStr(label, __arg1, items_separated_by_zeros, popup_max_height_in_items);
                return __ret;
            }
        }

        public static bool ComboFnPtr(string label, ref int current_item, global::DearImguiSharp.Delegates.Func_bool_IntPtr_int_sbytePtrPtr items_getter, global::System.IntPtr data, int items_count, int popup_max_height_in_items)
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var __arg2 = items_getter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(items_getter);
                var __ret = __Internal.ComboFnPtr(label, __arg1, __arg2, data, items_count, popup_max_height_in_items);
                return __ret;
            }
        }

        public static bool DragFloat(string label, ref float v, float v_speed, float v_min, float v_max, string format, float power)
        {
            fixed (float* __v1 = &v)
            {
                var __arg1 = __v1;
                var __ret = __Internal.DragFloat(label, __arg1, v_speed, v_min, v_max, format, power);
                return __ret;
            }
        }

        public static bool DragFloat2(string label, float[] v, float v_speed, float v_min, float v_max, string format, float power)
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.DragFloat2(label, v, v_speed, v_min, v_max, format, power);
            return __ret;
        }

        public static bool DragFloat3(string label, float[] v, float v_speed, float v_min, float v_max, string format, float power)
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.DragFloat3(label, v, v_speed, v_min, v_max, format, power);
            return __ret;
        }

        public static bool DragFloat4(string label, float[] v, float v_speed, float v_min, float v_max, string format, float power)
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.DragFloat4(label, v, v_speed, v_min, v_max, format, power);
            return __ret;
        }

        public static bool DragFloatRange2(string label, ref float v_current_min, ref float v_current_max, float v_speed, float v_min, float v_max, string format, string format_max, float power)
        {
            fixed (float* __v_current_min1 = &v_current_min)
            {
                var __arg1 = __v_current_min1;
                fixed (float* __v_current_max2 = &v_current_max)
                {
                    var __arg2 = __v_current_max2;
                    var __ret = __Internal.DragFloatRange2(label, __arg1, __arg2, v_speed, v_min, v_max, format, format_max, power);
                    return __ret;
                }
            }
        }

        public static bool DragInt(string label, ref int v, float v_speed, int v_min, int v_max, string format)
        {
            fixed (int* __v1 = &v)
            {
                var __arg1 = __v1;
                var __ret = __Internal.DragInt(label, __arg1, v_speed, v_min, v_max, format);
                return __ret;
            }
        }

        public static bool DragInt2(string label, int[] v, float v_speed, int v_min, int v_max, string format)
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.DragInt2(label, v, v_speed, v_min, v_max, format);
            return __ret;
        }

        public static bool DragInt3(string label, int[] v, float v_speed, int v_min, int v_max, string format)
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.DragInt3(label, v, v_speed, v_min, v_max, format);
            return __ret;
        }

        public static bool DragInt4(string label, int[] v, float v_speed, int v_min, int v_max, string format)
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.DragInt4(label, v, v_speed, v_min, v_max, format);
            return __ret;
        }

        public static bool DragIntRange2(string label, ref int v_current_min, ref int v_current_max, float v_speed, int v_min, int v_max, string format, string format_max)
        {
            fixed (int* __v_current_min1 = &v_current_min)
            {
                var __arg1 = __v_current_min1;
                fixed (int* __v_current_max2 = &v_current_max)
                {
                    var __arg2 = __v_current_max2;
                    var __ret = __Internal.DragIntRange2(label, __arg1, __arg2, v_speed, v_min, v_max, format, format_max);
                    return __ret;
                }
            }
        }

        public static bool DragScalar(string label, int data_type, global::System.IntPtr p_data, float v_speed, global::System.IntPtr p_min, global::System.IntPtr p_max, string format, float power)
        {
            var __ret = __Internal.DragScalar(label, data_type, p_data, v_speed, p_min, p_max, format, power);
            return __ret;
        }

        public static bool DragScalarN(string label, int data_type, global::System.IntPtr p_data, int components, float v_speed, global::System.IntPtr p_min, global::System.IntPtr p_max, string format, float power)
        {
            var __ret = __Internal.DragScalarN(label, data_type, p_data, components, v_speed, p_min, p_max, format, power);
            return __ret;
        }

        public static bool SliderFloat(string label, ref float v, float v_min, float v_max, string format, float power)
        {
            fixed (float* __v1 = &v)
            {
                var __arg1 = __v1;
                var __ret = __Internal.SliderFloat(label, __arg1, v_min, v_max, format, power);
                return __ret;
            }
        }

        public static bool SliderFloat2(string label, float[] v, float v_min, float v_max, string format, float power)
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.SliderFloat2(label, v, v_min, v_max, format, power);
            return __ret;
        }

        public static bool SliderFloat3(string label, float[] v, float v_min, float v_max, string format, float power)
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.SliderFloat3(label, v, v_min, v_max, format, power);
            return __ret;
        }

        public static bool SliderFloat4(string label, float[] v, float v_min, float v_max, string format, float power)
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.SliderFloat4(label, v, v_min, v_max, format, power);
            return __ret;
        }

        public static bool SliderAngle(string label, ref float v_rad, float v_degrees_min, float v_degrees_max, string format)
        {
            fixed (float* __v_rad1 = &v_rad)
            {
                var __arg1 = __v_rad1;
                var __ret = __Internal.SliderAngle(label, __arg1, v_degrees_min, v_degrees_max, format);
                return __ret;
            }
        }

        public static bool SliderInt(string label, ref int v, int v_min, int v_max, string format)
        {
            fixed (int* __v1 = &v)
            {
                var __arg1 = __v1;
                var __ret = __Internal.SliderInt(label, __arg1, v_min, v_max, format);
                return __ret;
            }
        }

        public static bool SliderInt2(string label, int[] v, int v_min, int v_max, string format)
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.SliderInt2(label, v, v_min, v_max, format);
            return __ret;
        }

        public static bool SliderInt3(string label, int[] v, int v_min, int v_max, string format)
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.SliderInt3(label, v, v_min, v_max, format);
            return __ret;
        }

        public static bool SliderInt4(string label, int[] v, int v_min, int v_max, string format)
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.SliderInt4(label, v, v_min, v_max, format);
            return __ret;
        }

        public static bool SliderScalar(string label, int data_type, global::System.IntPtr p_data, global::System.IntPtr p_min, global::System.IntPtr p_max, string format, float power)
        {
            var __ret = __Internal.SliderScalar(label, data_type, p_data, p_min, p_max, format, power);
            return __ret;
        }

        public static bool SliderScalarN(string label, int data_type, global::System.IntPtr p_data, int components, global::System.IntPtr p_min, global::System.IntPtr p_max, string format, float power)
        {
            var __ret = __Internal.SliderScalarN(label, data_type, p_data, components, p_min, p_max, format, power);
            return __ret;
        }

        public static bool VSliderFloat(string label, global::DearImguiSharp.ImVec2 size, ref float v, float v_min, float v_max, string format, float power)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            fixed (float* __v2 = &v)
            {
                var __arg2 = __v2;
                var __ret = __Internal.VSliderFloat(label, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, __arg2, v_min, v_max, format, power);
                return __ret;
            }
        }

        public static bool VSliderInt(string label, global::DearImguiSharp.ImVec2 size, ref int v, int v_min, int v_max, string format)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            fixed (int* __v2 = &v)
            {
                var __arg2 = __v2;
                var __ret = __Internal.VSliderInt(label, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, __arg2, v_min, v_max, format);
                return __ret;
            }
        }

        public static bool VSliderScalar(string label, global::DearImguiSharp.ImVec2 size, int data_type, global::System.IntPtr p_data, global::System.IntPtr p_min, global::System.IntPtr p_max, string format, float power)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            var __ret = __Internal.VSliderScalar(label, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, data_type, p_data, p_min, p_max, format, power);
            return __ret;
        }

        public static bool InputText(string label, sbyte* buf, ulong buf_size, int flags, global::DearImguiSharp.ImGuiInputTextCallback callback, global::System.IntPtr user_data)
        {
            var __arg4 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var __ret = __Internal.InputText(label, buf, buf_size, flags, __arg4, user_data);
            return __ret;
        }

        public static bool InputTextMultiline(string label, sbyte* buf, ulong buf_size, global::DearImguiSharp.ImVec2 size, int flags, global::DearImguiSharp.ImGuiInputTextCallback callback, global::System.IntPtr user_data)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg3 = size.__Instance;
            var __arg5 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var __ret = __Internal.InputTextMultiline(label, buf, buf_size, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, flags, __arg5, user_data);
            return __ret;
        }

        public static bool InputTextWithHint(string label, string hint, sbyte* buf, ulong buf_size, int flags, global::DearImguiSharp.ImGuiInputTextCallback callback, global::System.IntPtr user_data)
        {
            var __arg5 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var __ret = __Internal.InputTextWithHint(label, hint, buf, buf_size, flags, __arg5, user_data);
            return __ret;
        }

        public static bool InputFloat(string label, ref float v, float step, float step_fast, string format, int flags)
        {
            fixed (float* __v1 = &v)
            {
                var __arg1 = __v1;
                var __ret = __Internal.InputFloat(label, __arg1, step, step_fast, format, flags);
                return __ret;
            }
        }

        public static bool InputFloat2(string label, float[] v, string format, int flags)
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.InputFloat2(label, v, format, flags);
            return __ret;
        }

        public static bool InputFloat3(string label, float[] v, string format, int flags)
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.InputFloat3(label, v, format, flags);
            return __ret;
        }

        public static bool InputFloat4(string label, float[] v, string format, int flags)
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.InputFloat4(label, v, format, flags);
            return __ret;
        }

        public static bool InputInt(string label, ref int v, int step, int step_fast, int flags)
        {
            fixed (int* __v1 = &v)
            {
                var __arg1 = __v1;
                var __ret = __Internal.InputInt(label, __arg1, step, step_fast, flags);
                return __ret;
            }
        }

        public static bool InputInt2(string label, int[] v, int flags)
        {
            if (v == null || v.Length != 2)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.InputInt2(label, v, flags);
            return __ret;
        }

        public static bool InputInt3(string label, int[] v, int flags)
        {
            if (v == null || v.Length != 3)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.InputInt3(label, v, flags);
            return __ret;
        }

        public static bool InputInt4(string label, int[] v, int flags)
        {
            if (v == null || v.Length != 4)
                throw new ArgumentOutOfRangeException("v", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.InputInt4(label, v, flags);
            return __ret;
        }

        public static bool InputDouble(string label, ref double v, double step, double step_fast, string format, int flags)
        {
            fixed (double* __v1 = &v)
            {
                var __arg1 = __v1;
                var __ret = __Internal.InputDouble(label, __arg1, step, step_fast, format, flags);
                return __ret;
            }
        }

        public static bool InputScalar(string label, int data_type, global::System.IntPtr p_data, global::System.IntPtr p_step, global::System.IntPtr p_step_fast, string format, int flags)
        {
            var __ret = __Internal.InputScalar(label, data_type, p_data, p_step, p_step_fast, format, flags);
            return __ret;
        }

        public static bool InputScalarN(string label, int data_type, global::System.IntPtr p_data, int components, global::System.IntPtr p_step, global::System.IntPtr p_step_fast, string format, int flags)
        {
            var __ret = __Internal.InputScalarN(label, data_type, p_data, components, p_step, p_step_fast, format, flags);
            return __ret;
        }

        public static bool ColorEdit3(string label, float[] col, int flags)
        {
            if (col == null || col.Length != 3)
                throw new ArgumentOutOfRangeException("col", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.ColorEdit3(label, col, flags);
            return __ret;
        }

        public static bool ColorEdit4(string label, float[] col, int flags)
        {
            if (col == null || col.Length != 4)
                throw new ArgumentOutOfRangeException("col", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.ColorEdit4(label, col, flags);
            return __ret;
        }

        public static bool ColorPicker3(string label, float[] col, int flags)
        {
            if (col == null || col.Length != 3)
                throw new ArgumentOutOfRangeException("col", "The dimensions of the provided array don't match the required size.");
            var __ret = __Internal.ColorPicker3(label, col, flags);
            return __ret;
        }

        public static bool ColorPicker4(string label, float[] col, int flags, ref float ref_col)
        {
            if (col == null || col.Length != 4)
                throw new ArgumentOutOfRangeException("col", "The dimensions of the provided array don't match the required size.");
            fixed (float* __ref_col3 = &ref_col)
            {
                var __arg3 = __ref_col3;
                var __ret = __Internal.ColorPicker4(label, col, flags, __arg3);
                return __ret;
            }
        }

        public static bool ColorButton(string desc_id, global::DearImguiSharp.ImVec4 col, int flags, global::DearImguiSharp.ImVec2 size)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is passed by value.");
            var __arg1 = col.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg3 = size.__Instance;
            var __ret = __Internal.ColorButton(desc_id, __arg1, flags, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3);
            return __ret;
        }

        public static void SetColorEditOptions(int flags)
        {
            __Internal.SetColorEditOptions(flags);
        }

        public static bool TreeNodeStr(string label)
        {
            var __ret = __Internal.TreeNodeStr(label);
            return __ret;
        }

        public static bool TreeNodeStrStr(string str_id, string fmt)
        {
            var __ret = __Internal.TreeNodeStrStr(str_id, fmt);
            return __ret;
        }

        public static bool TreeNodePtr(global::System.IntPtr ptr_id, string fmt)
        {
            var __ret = __Internal.TreeNodePtr(ptr_id, fmt);
            return __ret;
        }

        public static bool TreeNodeExStr(string label, int flags)
        {
            var __ret = __Internal.TreeNodeExStr(label, flags);
            return __ret;
        }

        public static bool TreeNodeExStrStr(string str_id, int flags, string fmt)
        {
            var __ret = __Internal.TreeNodeExStrStr(str_id, flags, fmt);
            return __ret;
        }

        public static bool TreeNodeExPtr(global::System.IntPtr ptr_id, int flags, string fmt)
        {
            var __ret = __Internal.TreeNodeExPtr(ptr_id, flags, fmt);
            return __ret;
        }

        public static void TreePushStr(string str_id)
        {
            __Internal.TreePushStr(str_id);
        }

        public static void TreePushPtr(global::System.IntPtr ptr_id)
        {
            __Internal.TreePushPtr(ptr_id);
        }

        public static void TreePop()
        {
            __Internal.TreePop();
        }

        public static float GetTreeNodeToLabelSpacing()
        {
            var __ret = __Internal.GetTreeNodeToLabelSpacing();
            return __ret;
        }

        public static bool CollapsingHeaderTreeNodeFlags(string label, int flags)
        {
            var __ret = __Internal.CollapsingHeaderTreeNodeFlags(label, flags);
            return __ret;
        }

        public static bool CollapsingHeaderBoolPtr(string label, ref bool p_open, int flags)
        {
            fixed (bool* __p_open1 = &p_open)
            {
                var __arg1 = __p_open1;
                var __ret = __Internal.CollapsingHeaderBoolPtr(label, __arg1, flags);
                return __ret;
            }
        }

        public static void SetNextItemOpen(bool is_open, int cond)
        {
            __Internal.SetNextItemOpen(is_open, cond);
        }

        public static bool SelectableBool(string label, bool selected, int flags, global::DearImguiSharp.ImVec2 size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg3 = size.__Instance;
            var __ret = __Internal.SelectableBool(label, selected, flags, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3);
            return __ret;
        }

        public static bool SelectableBoolPtr(string label, ref bool p_selected, int flags, global::DearImguiSharp.ImVec2 size)
        {
            fixed (bool* __p_selected1 = &p_selected)
            {
                var __arg1 = __p_selected1;
                if (ReferenceEquals(size, null))
                    throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
                var __arg3 = size.__Instance;
                var __ret = __Internal.SelectableBoolPtr(label, __arg1, flags, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3);
                return __ret;
            }
        }

        public static bool ListBoxStr_arr(string label, ref int current_item, string[] items, int items_count, int height_in_items)
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var __ret = __Internal.ListBoxStr_arr(label, __arg1, items, items_count, height_in_items);
                return __ret;
            }
        }

        public static bool ListBoxFnPtr(string label, ref int current_item, global::DearImguiSharp.Delegates.Func_bool_IntPtr_int_sbytePtrPtr items_getter, global::System.IntPtr data, int items_count, int height_in_items)
        {
            fixed (int* __current_item1 = &current_item)
            {
                var __arg1 = __current_item1;
                var __arg2 = items_getter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(items_getter);
                var __ret = __Internal.ListBoxFnPtr(label, __arg1, __arg2, data, items_count, height_in_items);
                return __ret;
            }
        }

        public static bool ListBoxHeaderVec2(string label, global::DearImguiSharp.ImVec2 size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            var __ret = __Internal.ListBoxHeaderVec2(label, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            return __ret;
        }

        public static bool ListBoxHeaderInt(string label, int items_count, int height_in_items)
        {
            var __ret = __Internal.ListBoxHeaderInt(label, items_count, height_in_items);
            return __ret;
        }

        public static void ListBoxFooter()
        {
            __Internal.ListBoxFooter();
        }

        public static void PlotLinesFloatPtr(string label, ref float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2 graph_size, int stride)
        {
            fixed (float* __values1 = &values)
            {
                var __arg1 = __values1;
                if (ReferenceEquals(graph_size, null))
                    throw new global::System.ArgumentNullException("graph_size", "Cannot be null because it is passed by value.");
                var __arg7 = graph_size.__Instance;
                __Internal.PlotLinesFloatPtr(label, __arg1, values_count, values_offset, overlay_text, scale_min, scale_max, *(global::DearImguiSharp.ImVec2.__Internal*) __arg7, stride);
            }
        }

        public static void PlotLinesFnPtr(string label, global::DearImguiSharp.Delegates.Func_float_IntPtr_int values_getter, global::System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2 graph_size)
        {
            var __arg1 = values_getter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(values_getter);
            if (ReferenceEquals(graph_size, null))
                throw new global::System.ArgumentNullException("graph_size", "Cannot be null because it is passed by value.");
            var __arg8 = graph_size.__Instance;
            __Internal.PlotLinesFnPtr(label, __arg1, data, values_count, values_offset, overlay_text, scale_min, scale_max, *(global::DearImguiSharp.ImVec2.__Internal*) __arg8);
        }

        public static void PlotHistogramFloatPtr(string label, ref float values, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2 graph_size, int stride)
        {
            fixed (float* __values1 = &values)
            {
                var __arg1 = __values1;
                if (ReferenceEquals(graph_size, null))
                    throw new global::System.ArgumentNullException("graph_size", "Cannot be null because it is passed by value.");
                var __arg7 = graph_size.__Instance;
                __Internal.PlotHistogramFloatPtr(label, __arg1, values_count, values_offset, overlay_text, scale_min, scale_max, *(global::DearImguiSharp.ImVec2.__Internal*) __arg7, stride);
            }
        }

        public static void PlotHistogramFnPtr(string label, global::DearImguiSharp.Delegates.Func_float_IntPtr_int values_getter, global::System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2 graph_size)
        {
            var __arg1 = values_getter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(values_getter);
            if (ReferenceEquals(graph_size, null))
                throw new global::System.ArgumentNullException("graph_size", "Cannot be null because it is passed by value.");
            var __arg8 = graph_size.__Instance;
            __Internal.PlotHistogramFnPtr(label, __arg1, data, values_count, values_offset, overlay_text, scale_min, scale_max, *(global::DearImguiSharp.ImVec2.__Internal*) __arg8);
        }

        public static void ValueBool(string prefix, bool b)
        {
            __Internal.ValueBool(prefix, b);
        }

        public static void ValueInt(string prefix, int v)
        {
            __Internal.ValueInt(prefix, v);
        }

        public static void ValueUint(string prefix, uint v)
        {
            __Internal.ValueUint(prefix, v);
        }

        public static void ValueFloat(string prefix, float v, string float_format)
        {
            __Internal.ValueFloat(prefix, v, float_format);
        }

        public static bool BeginMenuBar()
        {
            var __ret = __Internal.BeginMenuBar();
            return __ret;
        }

        public static void EndMenuBar()
        {
            __Internal.EndMenuBar();
        }

        public static bool BeginMainMenuBar()
        {
            var __ret = __Internal.BeginMainMenuBar();
            return __ret;
        }

        public static void EndMainMenuBar()
        {
            __Internal.EndMainMenuBar();
        }

        public static bool BeginMenu(string label, bool enabled)
        {
            var __ret = __Internal.BeginMenu(label, enabled);
            return __ret;
        }

        public static void EndMenu()
        {
            __Internal.EndMenu();
        }

        public static bool MenuItemBool(string label, string shortcut, bool selected, bool enabled)
        {
            var __ret = __Internal.MenuItemBool(label, shortcut, selected, enabled);
            return __ret;
        }

        public static bool MenuItemBoolPtr(string label, string shortcut, ref bool p_selected, bool enabled)
        {
            fixed (bool* __p_selected2 = &p_selected)
            {
                var __arg2 = __p_selected2;
                var __ret = __Internal.MenuItemBoolPtr(label, shortcut, __arg2, enabled);
                return __ret;
            }
        }

        public static void BeginTooltip()
        {
            __Internal.BeginTooltip();
        }

        public static void EndTooltip()
        {
            __Internal.EndTooltip();
        }

        public static void SetTooltip(string fmt)
        {
            __Internal.SetTooltip(fmt);
        }

        public static void OpenPopup(string str_id)
        {
            __Internal.OpenPopup(str_id);
        }

        public static bool BeginPopup(string str_id, int flags)
        {
            var __ret = __Internal.BeginPopup(str_id, flags);
            return __ret;
        }

        public static bool BeginPopupContextItem(string str_id, int mouse_button)
        {
            var __ret = __Internal.BeginPopupContextItem(str_id, mouse_button);
            return __ret;
        }

        public static bool BeginPopupContextWindow(string str_id, int mouse_button, bool also_over_items)
        {
            var __ret = __Internal.BeginPopupContextWindow(str_id, mouse_button, also_over_items);
            return __ret;
        }

        public static bool BeginPopupContextVoid(string str_id, int mouse_button)
        {
            var __ret = __Internal.BeginPopupContextVoid(str_id, mouse_button);
            return __ret;
        }

        public static bool BeginPopupModal(string name, ref bool p_open, int flags)
        {
            fixed (bool* __p_open1 = &p_open)
            {
                var __arg1 = __p_open1;
                var __ret = __Internal.BeginPopupModal(name, __arg1, flags);
                return __ret;
            }
        }

        public static void EndPopup()
        {
            __Internal.EndPopup();
        }

        public static bool OpenPopupOnItemClick(string str_id, int mouse_button)
        {
            var __ret = __Internal.OpenPopupOnItemClick(str_id, mouse_button);
            return __ret;
        }

        public static bool IsPopupOpenStr(string str_id)
        {
            var __ret = __Internal.IsPopupOpenStr(str_id);
            return __ret;
        }

        public static void CloseCurrentPopup()
        {
            __Internal.CloseCurrentPopup();
        }

        public static void Columns(int count, string id, bool border)
        {
            __Internal.Columns(count, id, border);
        }

        public static void NextColumn()
        {
            __Internal.NextColumn();
        }

        public static int GetColumnIndex()
        {
            var __ret = __Internal.GetColumnIndex();
            return __ret;
        }

        public static float GetColumnWidth(int column_index)
        {
            var __ret = __Internal.GetColumnWidth(column_index);
            return __ret;
        }

        public static void SetColumnWidth(int column_index, float width)
        {
            __Internal.SetColumnWidth(column_index, width);
        }

        public static float GetColumnOffset(int column_index)
        {
            var __ret = __Internal.GetColumnOffset(column_index);
            return __ret;
        }

        public static void SetColumnOffset(int column_index, float offset_x)
        {
            __Internal.SetColumnOffset(column_index, offset_x);
        }

        public static int GetColumnsCount()
        {
            var __ret = __Internal.GetColumnsCount();
            return __ret;
        }

        public static bool BeginTabBar(string str_id, int flags)
        {
            var __ret = __Internal.BeginTabBar(str_id, flags);
            return __ret;
        }

        public static void EndTabBar()
        {
            __Internal.EndTabBar();
        }

        public static bool BeginTabItem(string label, ref bool p_open, int flags)
        {
            fixed (bool* __p_open1 = &p_open)
            {
                var __arg1 = __p_open1;
                var __ret = __Internal.BeginTabItem(label, __arg1, flags);
                return __ret;
            }
        }

        public static void EndTabItem()
        {
            __Internal.EndTabItem();
        }

        public static void SetTabItemClosed(string tab_or_docked_window_label)
        {
            __Internal.SetTabItemClosed(tab_or_docked_window_label);
        }

        public static void LogToTTY(int auto_open_depth)
        {
            __Internal.LogToTTY(auto_open_depth);
        }

        public static void LogToFile(int auto_open_depth, string filename)
        {
            __Internal.LogToFile(auto_open_depth, filename);
        }

        public static void LogToClipboard(int auto_open_depth)
        {
            __Internal.LogToClipboard(auto_open_depth);
        }

        public static void LogFinish()
        {
            __Internal.LogFinish();
        }

        public static void LogButtons()
        {
            __Internal.LogButtons();
        }

        public static bool BeginDragDropSource(int flags)
        {
            var __ret = __Internal.BeginDragDropSource(flags);
            return __ret;
        }

        public static bool SetDragDropPayload(string type, global::System.IntPtr data, ulong sz, int cond)
        {
            var __ret = __Internal.SetDragDropPayload(type, data, sz, cond);
            return __ret;
        }

        public static void EndDragDropSource()
        {
            __Internal.EndDragDropSource();
        }

        public static bool BeginDragDropTarget()
        {
            var __ret = __Internal.BeginDragDropTarget();
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiPayload AcceptDragDropPayload(string type, int flags)
        {
            var __ret = __Internal.AcceptDragDropPayload(type, flags);
            global::DearImguiSharp.ImGuiPayload __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiPayload.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiPayload) global::DearImguiSharp.ImGuiPayload.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiPayload.__CreateInstance(__ret);
            return __result0;
        }

        public static void EndDragDropTarget()
        {
            __Internal.EndDragDropTarget();
        }

        public static global::DearImguiSharp.ImGuiPayload GetDragDropPayload()
        {
            var __ret = __Internal.GetDragDropPayload();
            global::DearImguiSharp.ImGuiPayload __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiPayload.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiPayload) global::DearImguiSharp.ImGuiPayload.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiPayload.__CreateInstance(__ret);
            return __result0;
        }

        public static void PushClipRect(global::DearImguiSharp.ImVec2 clip_rect_min, global::DearImguiSharp.ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
        {
            if (ReferenceEquals(clip_rect_min, null))
                throw new global::System.ArgumentNullException("clip_rect_min", "Cannot be null because it is passed by value.");
            var __arg0 = clip_rect_min.__Instance;
            if (ReferenceEquals(clip_rect_max, null))
                throw new global::System.ArgumentNullException("clip_rect_max", "Cannot be null because it is passed by value.");
            var __arg1 = clip_rect_max.__Instance;
            __Internal.PushClipRect(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, intersect_with_current_clip_rect);
        }

        public static void PopClipRect()
        {
            __Internal.PopClipRect();
        }

        public static void SetItemDefaultFocus()
        {
            __Internal.SetItemDefaultFocus();
        }

        public static void SetKeyboardFocusHere(int offset)
        {
            __Internal.SetKeyboardFocusHere(offset);
        }

        public static bool IsItemHovered(int flags)
        {
            var __ret = __Internal.IsItemHovered(flags);
            return __ret;
        }

        public static bool IsItemActive()
        {
            var __ret = __Internal.IsItemActive();
            return __ret;
        }

        public static bool IsItemFocused()
        {
            var __ret = __Internal.IsItemFocused();
            return __ret;
        }

        public static bool IsItemClicked(int mouse_button)
        {
            var __ret = __Internal.IsItemClicked(mouse_button);
            return __ret;
        }

        public static bool IsItemVisible()
        {
            var __ret = __Internal.IsItemVisible();
            return __ret;
        }

        public static bool IsItemEdited()
        {
            var __ret = __Internal.IsItemEdited();
            return __ret;
        }

        public static bool IsItemActivated()
        {
            var __ret = __Internal.IsItemActivated();
            return __ret;
        }

        public static bool IsItemDeactivated()
        {
            var __ret = __Internal.IsItemDeactivated();
            return __ret;
        }

        public static bool IsItemDeactivatedAfterEdit()
        {
            var __ret = __Internal.IsItemDeactivatedAfterEdit();
            return __ret;
        }

        public static bool IsItemToggledOpen()
        {
            var __ret = __Internal.IsItemToggledOpen();
            return __ret;
        }

        public static bool IsAnyItemHovered()
        {
            var __ret = __Internal.IsAnyItemHovered();
            return __ret;
        }

        public static bool IsAnyItemActive()
        {
            var __ret = __Internal.IsAnyItemActive();
            return __ret;
        }

        public static bool IsAnyItemFocused()
        {
            var __ret = __Internal.IsAnyItemFocused();
            return __ret;
        }

        public static void GetItemRectMin(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetItemRectMin(__arg0);
        }

        public static void GetItemRectMax(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetItemRectMax(__arg0);
        }

        public static void GetItemRectSize(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetItemRectSize(__arg0);
        }

        public static void SetItemAllowOverlap()
        {
            __Internal.SetItemAllowOverlap();
        }

        public static bool IsRectVisibleNil(global::DearImguiSharp.ImVec2 size)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg0 = size.__Instance;
            var __ret = __Internal.IsRectVisibleNil(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0);
            return __ret;
        }

        public static bool IsRectVisibleVec2(global::DearImguiSharp.ImVec2 rect_min, global::DearImguiSharp.ImVec2 rect_max)
        {
            if (ReferenceEquals(rect_min, null))
                throw new global::System.ArgumentNullException("rect_min", "Cannot be null because it is passed by value.");
            var __arg0 = rect_min.__Instance;
            if (ReferenceEquals(rect_max, null))
                throw new global::System.ArgumentNullException("rect_max", "Cannot be null because it is passed by value.");
            var __arg1 = rect_max.__Instance;
            var __ret = __Internal.IsRectVisibleVec2(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            return __ret;
        }

        public static double GetTime()
        {
            var __ret = __Internal.GetTime();
            return __ret;
        }

        public static int GetFrameCount()
        {
            var __ret = __Internal.GetFrameCount();
            return __ret;
        }

        public static global::DearImguiSharp.ImDrawList GetBackgroundDrawList()
        {
            var __ret = __Internal.GetBackgroundDrawList();
            global::DearImguiSharp.ImDrawList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawList) global::DearImguiSharp.ImDrawList.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawList.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImDrawList GetForegroundDrawListNil()
        {
            var __ret = __Internal.GetForegroundDrawListNil();
            global::DearImguiSharp.ImDrawList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawList) global::DearImguiSharp.ImDrawList.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawList.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImDrawListSharedData GetDrawListSharedData()
        {
            var __ret = __Internal.GetDrawListSharedData();
            global::DearImguiSharp.ImDrawListSharedData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawListSharedData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawListSharedData) global::DearImguiSharp.ImDrawListSharedData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawListSharedData.__CreateInstance(__ret);
            return __result0;
        }

        public static string GetStyleColorName(int idx)
        {
            var __ret = __Internal.GetStyleColorName(idx);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static void SetStateStorage(global::DearImguiSharp.ImGuiStorage storage)
        {
            var __arg0 = ReferenceEquals(storage, null) ? global::System.IntPtr.Zero : storage.__Instance;
            __Internal.SetStateStorage(__arg0);
        }

        public static global::DearImguiSharp.ImGuiStorage GetStateStorage()
        {
            var __ret = __Internal.GetStateStorage();
            global::DearImguiSharp.ImGuiStorage __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiStorage.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiStorage) global::DearImguiSharp.ImGuiStorage.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiStorage.__CreateInstance(__ret);
            return __result0;
        }

        public static void CalcTextSize(global::DearImguiSharp.ImVec2 pOut, string text, string text_end, bool hide_text_after_double_hash, float wrap_width)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.CalcTextSize(__arg0, text, text_end, hide_text_after_double_hash, wrap_width);
        }

        public static void CalcListClipping(int items_count, float items_height, ref int out_items_display_start, ref int out_items_display_end)
        {
            fixed (int* __out_items_display_start2 = &out_items_display_start)
            {
                var __arg2 = __out_items_display_start2;
                fixed (int* __out_items_display_end3 = &out_items_display_end)
                {
                    var __arg3 = __out_items_display_end3;
                    __Internal.CalcListClipping(items_count, items_height, __arg2, __arg3);
                }
            }
        }

        public static bool BeginChildFrame(uint id, global::DearImguiSharp.ImVec2 size, int flags)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            var __ret = __Internal.BeginChildFrame(id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, flags);
            return __ret;
        }

        public static void EndChildFrame()
        {
            __Internal.EndChildFrame();
        }

        public static void ColorConvertU32ToFloat4(global::DearImguiSharp.ImVec4 pOut, uint @in)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.ColorConvertU32ToFloat4(__arg0, @in);
        }

        public static uint ColorConvertFloat4ToU32(global::DearImguiSharp.ImVec4 @in)
        {
            if (ReferenceEquals(@in, null))
                throw new global::System.ArgumentNullException("@in", "Cannot be null because it is passed by value.");
            var __arg0 = @in.__Instance;
            var __ret = __Internal.ColorConvertFloat4ToU32(__arg0);
            return __ret;
        }

        public static int GetKeyIndex(int imgui_key)
        {
            var __ret = __Internal.GetKeyIndex(imgui_key);
            return __ret;
        }

        public static bool IsKeyDown(int user_key_index)
        {
            var __ret = __Internal.IsKeyDown(user_key_index);
            return __ret;
        }

        public static bool IsKeyPressed(int user_key_index, bool repeat)
        {
            var __ret = __Internal.IsKeyPressed(user_key_index, repeat);
            return __ret;
        }

        public static bool IsKeyReleased(int user_key_index)
        {
            var __ret = __Internal.IsKeyReleased(user_key_index);
            return __ret;
        }

        public static int GetKeyPressedAmount(int key_index, float repeat_delay, float rate)
        {
            var __ret = __Internal.GetKeyPressedAmount(key_index, repeat_delay, rate);
            return __ret;
        }

        public static void CaptureKeyboardFromApp(bool want_capture_keyboard_value)
        {
            __Internal.CaptureKeyboardFromApp(want_capture_keyboard_value);
        }

        public static bool IsMouseDown(int button)
        {
            var __ret = __Internal.IsMouseDown(button);
            return __ret;
        }

        public static bool IsMouseClicked(int button, bool repeat)
        {
            var __ret = __Internal.IsMouseClicked(button, repeat);
            return __ret;
        }

        public static bool IsMouseReleased(int button)
        {
            var __ret = __Internal.IsMouseReleased(button);
            return __ret;
        }

        public static bool IsMouseDoubleClicked(int button)
        {
            var __ret = __Internal.IsMouseDoubleClicked(button);
            return __ret;
        }

        public static bool IsMouseHoveringRect(global::DearImguiSharp.ImVec2 r_min, global::DearImguiSharp.ImVec2 r_max, bool clip)
        {
            if (ReferenceEquals(r_min, null))
                throw new global::System.ArgumentNullException("r_min", "Cannot be null because it is passed by value.");
            var __arg0 = r_min.__Instance;
            if (ReferenceEquals(r_max, null))
                throw new global::System.ArgumentNullException("r_max", "Cannot be null because it is passed by value.");
            var __arg1 = r_max.__Instance;
            var __ret = __Internal.IsMouseHoveringRect(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, clip);
            return __ret;
        }

        public static bool IsMousePosValid(global::DearImguiSharp.ImVec2 mouse_pos)
        {
            var __arg0 = ReferenceEquals(mouse_pos, null) ? global::System.IntPtr.Zero : mouse_pos.__Instance;
            var __ret = __Internal.IsMousePosValid(__arg0);
            return __ret;
        }

        public static bool IsAnyMouseDown()
        {
            var __ret = __Internal.IsAnyMouseDown();
            return __ret;
        }

        public static void GetMousePos(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetMousePos(__arg0);
        }

        public static void GetMousePosOnOpeningCurrentPopup(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetMousePosOnOpeningCurrentPopup(__arg0);
        }

        public static bool IsMouseDragging(int button, float lock_threshold)
        {
            var __ret = __Internal.IsMouseDragging(button, lock_threshold);
            return __ret;
        }

        public static void GetMouseDragDelta(global::DearImguiSharp.ImVec2 pOut, int button, float lock_threshold)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetMouseDragDelta(__arg0, button, lock_threshold);
        }

        public static void ResetMouseDragDelta(int button)
        {
            __Internal.ResetMouseDragDelta(button);
        }

        public static int GetMouseCursor()
        {
            var __ret = __Internal.GetMouseCursor();
            return __ret;
        }

        public static void SetMouseCursor(int cursor_type)
        {
            __Internal.SetMouseCursor(cursor_type);
        }

        public static void CaptureMouseFromApp(bool want_capture_mouse_value)
        {
            __Internal.CaptureMouseFromApp(want_capture_mouse_value);
        }

        public static string GetClipboardText()
        {
            var __ret = __Internal.GetClipboardText();
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static void SetClipboardText(string text)
        {
            __Internal.SetClipboardText(text);
        }

        public static void LoadIniSettingsFromDisk(string ini_filename)
        {
            __Internal.LoadIniSettingsFromDisk(ini_filename);
        }

        public static void LoadIniSettingsFromMemory(string ini_data, ulong ini_size)
        {
            __Internal.LoadIniSettingsFromMemory(ini_data, ini_size);
        }

        public static void SaveIniSettingsToDisk(string ini_filename)
        {
            __Internal.SaveIniSettingsToDisk(ini_filename);
        }

        public static string SaveIniSettingsToMemory(ref ulong out_ini_size)
        {
            fixed (ulong* __out_ini_size0 = &out_ini_size)
            {
                var __arg0 = __out_ini_size0;
                var __ret = __Internal.SaveIniSettingsToMemory(__arg0);
                if (__ret == global::System.IntPtr.Zero)
                    return default(string);
                var __retPtr = (byte*) __ret;
                int __length = 0;
                while (*(__retPtr++) != 0) __length += sizeof(byte);
                return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
            }
        }

        public static void SetAllocatorFunctions(global::DearImguiSharp.Delegates.Func_IntPtr_ulong_IntPtr alloc_func, global::DearImguiSharp.Delegates.Action_IntPtr_IntPtr free_func, global::System.IntPtr user_data)
        {
            var __arg0 = alloc_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(alloc_func);
            var __arg1 = free_func == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(free_func);
            __Internal.SetAllocatorFunctions(__arg0, __arg1, user_data);
        }

        public static global::System.IntPtr MemAlloc(ulong size)
        {
            var __ret = __Internal.MemAlloc(size);
            return __ret;
        }

        public static void MemFree(global::System.IntPtr ptr)
        {
            __Internal.MemFree(ptr);
        }

        public static global::DearImguiSharp.ImGuiStyle ImGuiStyleImGuiStyle()
        {
            var __ret = __Internal.ImGuiStyleImGuiStyle();
            global::DearImguiSharp.ImGuiStyle __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiStyle.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiStyle) global::DearImguiSharp.ImGuiStyle.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiStyle.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiStyle_destroy(global::DearImguiSharp.ImGuiStyle self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStyle_destroy(__arg0);
        }

        public static void ImGuiStyleScaleAllSizes(global::DearImguiSharp.ImGuiStyle self, float scale_factor)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStyleScaleAllSizes(__arg0, scale_factor);
        }

        public static void ImGuiIO_AddInputCharacter(global::DearImguiSharp.ImGuiIO self, uint c)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiIO_AddInputCharacter(__arg0, c);
        }

        public static void ImGuiIO_AddInputCharactersUTF8(global::DearImguiSharp.ImGuiIO self, string str)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiIO_AddInputCharactersUTF8(__arg0, str);
        }

        public static void ImGuiIO_ClearInputCharacters(global::DearImguiSharp.ImGuiIO self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiIO_ClearInputCharacters(__arg0);
        }

        public static global::DearImguiSharp.ImGuiIO ImGuiIO_ImGuiIO()
        {
            var __ret = __Internal.ImGuiIO_ImGuiIO();
            global::DearImguiSharp.ImGuiIO __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiIO.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiIO) global::DearImguiSharp.ImGuiIO.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiIO.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiIO_destroy(global::DearImguiSharp.ImGuiIO self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiIO_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiInputTextCallbackData ImGuiInputTextCallbackDataImGuiInputTextCallbackData()
        {
            var __ret = __Internal.ImGuiInputTextCallbackDataImGuiInputTextCallbackData();
            global::DearImguiSharp.ImGuiInputTextCallbackData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiInputTextCallbackData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiInputTextCallbackData) global::DearImguiSharp.ImGuiInputTextCallbackData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiInputTextCallbackData.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiInputTextCallbackData_destroy(global::DearImguiSharp.ImGuiInputTextCallbackData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextCallbackData_destroy(__arg0);
        }

        public static void ImGuiInputTextCallbackDataDeleteChars(global::DearImguiSharp.ImGuiInputTextCallbackData self, int pos, int bytes_count)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextCallbackDataDeleteChars(__arg0, pos, bytes_count);
        }

        public static void ImGuiInputTextCallbackDataInsertChars(global::DearImguiSharp.ImGuiInputTextCallbackData self, int pos, string text, string text_end)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextCallbackDataInsertChars(__arg0, pos, text, text_end);
        }

        public static bool ImGuiInputTextCallbackDataHasSelection(global::DearImguiSharp.ImGuiInputTextCallbackData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiInputTextCallbackDataHasSelection(__arg0);
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiPayload ImGuiPayloadImGuiPayload()
        {
            var __ret = __Internal.ImGuiPayloadImGuiPayload();
            global::DearImguiSharp.ImGuiPayload __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiPayload.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiPayload) global::DearImguiSharp.ImGuiPayload.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiPayload.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiPayload_destroy(global::DearImguiSharp.ImGuiPayload self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiPayload_destroy(__arg0);
        }

        public static void ImGuiPayloadClear(global::DearImguiSharp.ImGuiPayload self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiPayloadClear(__arg0);
        }

        public static bool ImGuiPayloadIsDataType(global::DearImguiSharp.ImGuiPayload self, string type)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiPayloadIsDataType(__arg0, type);
            return __ret;
        }

        public static bool ImGuiPayloadIsPreview(global::DearImguiSharp.ImGuiPayload self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiPayloadIsPreview(__arg0);
            return __ret;
        }

        public static bool ImGuiPayloadIsDelivery(global::DearImguiSharp.ImGuiPayload self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiPayloadIsDelivery(__arg0);
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiOnceUponAFrame ImGuiOnceUponAFrameImGuiOnceUponAFrame()
        {
            var __ret = __Internal.ImGuiOnceUponAFrameImGuiOnceUponAFrame();
            global::DearImguiSharp.ImGuiOnceUponAFrame __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiOnceUponAFrame.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiOnceUponAFrame) global::DearImguiSharp.ImGuiOnceUponAFrame.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiOnceUponAFrame.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiOnceUponAFrame_destroy(global::DearImguiSharp.ImGuiOnceUponAFrame self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiOnceUponAFrame_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiTextFilter ImGuiTextFilterImGuiTextFilter(string default_filter)
        {
            var __ret = __Internal.ImGuiTextFilterImGuiTextFilter(default_filter);
            global::DearImguiSharp.ImGuiTextFilter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiTextFilter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiTextFilter) global::DearImguiSharp.ImGuiTextFilter.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiTextFilter.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiTextFilter_destroy(global::DearImguiSharp.ImGuiTextFilter self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTextFilter_destroy(__arg0);
        }

        public static bool ImGuiTextFilterDraw(global::DearImguiSharp.ImGuiTextFilter self, string label, float width)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiTextFilterDraw(__arg0, label, width);
            return __ret;
        }

        public static bool ImGuiTextFilterPassFilter(global::DearImguiSharp.ImGuiTextFilter self, string text, string text_end)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiTextFilterPassFilter(__arg0, text, text_end);
            return __ret;
        }

        public static void ImGuiTextFilterBuild(global::DearImguiSharp.ImGuiTextFilter self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTextFilterBuild(__arg0);
        }

        public static void ImGuiTextFilterClear(global::DearImguiSharp.ImGuiTextFilter self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTextFilterClear(__arg0);
        }

        public static bool ImGuiTextFilterIsActive(global::DearImguiSharp.ImGuiTextFilter self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiTextFilterIsActive(__arg0);
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiTextRange ImGuiTextRangeImGuiTextRangeNil()
        {
            var __ret = __Internal.ImGuiTextRangeImGuiTextRangeNil();
            global::DearImguiSharp.ImGuiTextRange __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiTextRange.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiTextRange) global::DearImguiSharp.ImGuiTextRange.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiTextRange.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiTextRange_destroy(global::DearImguiSharp.ImGuiTextRange self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTextRange_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiTextRange ImGuiTextRangeImGuiTextRangeStr(string _b, string _e)
        {
            var __ret = __Internal.ImGuiTextRangeImGuiTextRangeStr(_b, _e);
            global::DearImguiSharp.ImGuiTextRange __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiTextRange.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiTextRange) global::DearImguiSharp.ImGuiTextRange.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiTextRange.__CreateInstance(__ret);
            return __result0;
        }

        public static bool ImGuiTextRange_empty(global::DearImguiSharp.ImGuiTextRange self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiTextRange_empty(__arg0);
            return __ret;
        }

        public static void ImGuiTextRange_split(global::DearImguiSharp.ImGuiTextRange self, sbyte separator, global::DearImguiSharp.ImVectorImGuiTextRange @out)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg2 = ReferenceEquals(@out, null) ? global::System.IntPtr.Zero : @out.__Instance;
            __Internal.ImGuiTextRange_split(__arg0, separator, __arg2);
        }

        public static global::DearImguiSharp.ImGuiTextBuffer ImGuiTextBufferImGuiTextBuffer()
        {
            var __ret = __Internal.ImGuiTextBufferImGuiTextBuffer();
            global::DearImguiSharp.ImGuiTextBuffer __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiTextBuffer.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiTextBuffer) global::DearImguiSharp.ImGuiTextBuffer.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiTextBuffer.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiTextBuffer_destroy(global::DearImguiSharp.ImGuiTextBuffer self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTextBuffer_destroy(__arg0);
        }

        public static string ImGuiTextBuffer_begin(global::DearImguiSharp.ImGuiTextBuffer self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiTextBuffer_begin(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static string ImGuiTextBuffer_end(global::DearImguiSharp.ImGuiTextBuffer self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiTextBuffer_end(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int ImGuiTextBuffer_size(global::DearImguiSharp.ImGuiTextBuffer self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiTextBuffer_size(__arg0);
            return __ret;
        }

        public static bool ImGuiTextBuffer_empty(global::DearImguiSharp.ImGuiTextBuffer self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiTextBuffer_empty(__arg0);
            return __ret;
        }

        public static void ImGuiTextBuffer_clear(global::DearImguiSharp.ImGuiTextBuffer self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTextBuffer_clear(__arg0);
        }

        public static void ImGuiTextBuffer_reserve(global::DearImguiSharp.ImGuiTextBuffer self, int capacity)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTextBuffer_reserve(__arg0, capacity);
        }

        public static string ImGuiTextBuffer_c_str(global::DearImguiSharp.ImGuiTextBuffer self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiTextBuffer_c_str(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static void ImGuiTextBuffer_append(global::DearImguiSharp.ImGuiTextBuffer self, string str, string str_end)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTextBuffer_append(__arg0, str, str_end);
        }

        public static global::DearImguiSharp.ImGuiStoragePair ImGuiStoragePairImGuiStoragePairInt(uint _key, int _val_i)
        {
            var __ret = __Internal.ImGuiStoragePairImGuiStoragePairInt(_key, _val_i);
            global::DearImguiSharp.ImGuiStoragePair __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiStoragePair.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiStoragePair) global::DearImguiSharp.ImGuiStoragePair.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiStoragePair.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiStoragePair_destroy(global::DearImguiSharp.ImGuiStoragePair self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStoragePair_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiStoragePair ImGuiStoragePairImGuiStoragePairFloat(uint _key, float _val_f)
        {
            var __ret = __Internal.ImGuiStoragePairImGuiStoragePairFloat(_key, _val_f);
            global::DearImguiSharp.ImGuiStoragePair __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiStoragePair.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiStoragePair) global::DearImguiSharp.ImGuiStoragePair.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiStoragePair.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiStoragePair ImGuiStoragePairImGuiStoragePairPtr(uint _key, global::System.IntPtr _val_p)
        {
            var __ret = __Internal.ImGuiStoragePairImGuiStoragePairPtr(_key, _val_p);
            global::DearImguiSharp.ImGuiStoragePair __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiStoragePair.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiStoragePair) global::DearImguiSharp.ImGuiStoragePair.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiStoragePair.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiStorageClear(global::DearImguiSharp.ImGuiStorage self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStorageClear(__arg0);
        }

        public static int ImGuiStorageGetInt(global::DearImguiSharp.ImGuiStorage self, uint key, int default_val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiStorageGetInt(__arg0, key, default_val);
            return __ret;
        }

        public static void ImGuiStorageSetInt(global::DearImguiSharp.ImGuiStorage self, uint key, int val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStorageSetInt(__arg0, key, val);
        }

        public static bool ImGuiStorageGetBool(global::DearImguiSharp.ImGuiStorage self, uint key, bool default_val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiStorageGetBool(__arg0, key, default_val);
            return __ret;
        }

        public static void ImGuiStorageSetBool(global::DearImguiSharp.ImGuiStorage self, uint key, bool val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStorageSetBool(__arg0, key, val);
        }

        public static float ImGuiStorageGetFloat(global::DearImguiSharp.ImGuiStorage self, uint key, float default_val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiStorageGetFloat(__arg0, key, default_val);
            return __ret;
        }

        public static void ImGuiStorageSetFloat(global::DearImguiSharp.ImGuiStorage self, uint key, float val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStorageSetFloat(__arg0, key, val);
        }

        public static global::System.IntPtr ImGuiStorageGetVoidPtr(global::DearImguiSharp.ImGuiStorage self, uint key)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiStorageGetVoidPtr(__arg0, key);
            return __ret;
        }

        public static void ImGuiStorageSetVoidPtr(global::DearImguiSharp.ImGuiStorage self, uint key, global::System.IntPtr val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStorageSetVoidPtr(__arg0, key, val);
        }

        public static int* ImGuiStorageGetIntRef(global::DearImguiSharp.ImGuiStorage self, uint key, int default_val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiStorageGetIntRef(__arg0, key, default_val);
            return __ret;
        }

        public static bool* ImGuiStorageGetBoolRef(global::DearImguiSharp.ImGuiStorage self, uint key, bool default_val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiStorageGetBoolRef(__arg0, key, default_val);
            return __ret;
        }

        public static float* ImGuiStorageGetFloatRef(global::DearImguiSharp.ImGuiStorage self, uint key, float default_val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiStorageGetFloatRef(__arg0, key, default_val);
            return __ret;
        }

        public static void** ImGuiStorageGetVoidPtrRef(global::DearImguiSharp.ImGuiStorage self, uint key, global::System.IntPtr default_val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiStorageGetVoidPtrRef(__arg0, key, default_val);
            return __ret;
        }

        public static void ImGuiStorageSetAllInt(global::DearImguiSharp.ImGuiStorage self, int val)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStorageSetAllInt(__arg0, val);
        }

        public static void ImGuiStorageBuildSortByKey(global::DearImguiSharp.ImGuiStorage self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStorageBuildSortByKey(__arg0);
        }

        public static global::DearImguiSharp.ImGuiListClipper ImGuiListClipperImGuiListClipper(int items_count, float items_height)
        {
            var __ret = __Internal.ImGuiListClipperImGuiListClipper(items_count, items_height);
            global::DearImguiSharp.ImGuiListClipper __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiListClipper.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiListClipper) global::DearImguiSharp.ImGuiListClipper.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiListClipper.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiListClipper_destroy(global::DearImguiSharp.ImGuiListClipper self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiListClipper_destroy(__arg0);
        }

        public static bool ImGuiListClipperStep(global::DearImguiSharp.ImGuiListClipper self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiListClipperStep(__arg0);
            return __ret;
        }

        public static void ImGuiListClipperBegin(global::DearImguiSharp.ImGuiListClipper self, int items_count, float items_height)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiListClipperBegin(__arg0, items_count, items_height);
        }

        public static void ImGuiListClipperEnd(global::DearImguiSharp.ImGuiListClipper self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiListClipperEnd(__arg0);
        }

        public static global::DearImguiSharp.ImColor ImColorImColorNil()
        {
            var __ret = __Internal.ImColorImColorNil();
            global::DearImguiSharp.ImColor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImColor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImColor) global::DearImguiSharp.ImColor.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImColor.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImColor_destroy(global::DearImguiSharp.ImColor self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImColor_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImColor ImColorImColorInt(int r, int g, int b, int a)
        {
            var __ret = __Internal.ImColorImColorInt(r, g, b, a);
            global::DearImguiSharp.ImColor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImColor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImColor) global::DearImguiSharp.ImColor.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImColor.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImColor ImColorImColorU32(uint rgba)
        {
            var __ret = __Internal.ImColorImColorU32(rgba);
            global::DearImguiSharp.ImColor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImColor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImColor) global::DearImguiSharp.ImColor.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImColor.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImColor ImColorImColorFloat(float r, float g, float b, float a)
        {
            var __ret = __Internal.ImColorImColorFloat(r, g, b, a);
            global::DearImguiSharp.ImColor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImColor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImColor) global::DearImguiSharp.ImColor.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImColor.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImColor ImColorImColorVec4(global::DearImguiSharp.ImVec4 col)
        {
            if (ReferenceEquals(col, null))
                throw new global::System.ArgumentNullException("col", "Cannot be null because it is passed by value.");
            var __arg0 = col.__Instance;
            var __ret = __Internal.ImColorImColorVec4(__arg0);
            global::DearImguiSharp.ImColor __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImColor.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImColor) global::DearImguiSharp.ImColor.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImColor.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImColorSetHSV(global::DearImguiSharp.ImColor self, float h, float s, float v, float a)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImColorSetHSV(__arg0, h, s, v, a);
        }

        public static void ImColorHSV(global::DearImguiSharp.ImColor pOut, global::DearImguiSharp.ImColor self, float h, float s, float v, float a)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImColorHSV(__arg0, __arg1, h, s, v, a);
        }

        public static global::DearImguiSharp.ImDrawCmd ImDrawCmdImDrawCmd()
        {
            var __ret = __Internal.ImDrawCmdImDrawCmd();
            global::DearImguiSharp.ImDrawCmd __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawCmd.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawCmd) global::DearImguiSharp.ImDrawCmd.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawCmd.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImDrawCmd_destroy(global::DearImguiSharp.ImDrawCmd self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawCmd_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImDrawListSplitter ImDrawListSplitterImDrawListSplitter()
        {
            var __ret = __Internal.ImDrawListSplitterImDrawListSplitter();
            global::DearImguiSharp.ImDrawListSplitter __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawListSplitter.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawListSplitter) global::DearImguiSharp.ImDrawListSplitter.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawListSplitter.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImDrawListSplitter_destroy(global::DearImguiSharp.ImDrawListSplitter self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListSplitter_destroy(__arg0);
        }

        public static void ImDrawListSplitterClear(global::DearImguiSharp.ImDrawListSplitter self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListSplitterClear(__arg0);
        }

        public static void ImDrawListSplitterClearFreeMemory(global::DearImguiSharp.ImDrawListSplitter self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListSplitterClearFreeMemory(__arg0);
        }

        public static void ImDrawListSplitterSplit(global::DearImguiSharp.ImDrawListSplitter self, global::DearImguiSharp.ImDrawList draw_list, int count)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            __Internal.ImDrawListSplitterSplit(__arg0, __arg1, count);
        }

        public static void ImDrawListSplitterMerge(global::DearImguiSharp.ImDrawListSplitter self, global::DearImguiSharp.ImDrawList draw_list)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            __Internal.ImDrawListSplitterMerge(__arg0, __arg1);
        }

        public static void ImDrawListSplitterSetCurrentChannel(global::DearImguiSharp.ImDrawListSplitter self, global::DearImguiSharp.ImDrawList draw_list, int channel_idx)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            __Internal.ImDrawListSplitterSetCurrentChannel(__arg0, __arg1, channel_idx);
        }

        public static global::DearImguiSharp.ImDrawList ImDrawListImDrawList(global::DearImguiSharp.ImDrawListSharedData shared_data)
        {
            var __arg0 = ReferenceEquals(shared_data, null) ? global::System.IntPtr.Zero : shared_data.__Instance;
            var __ret = __Internal.ImDrawListImDrawList(__arg0);
            global::DearImguiSharp.ImDrawList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawList) global::DearImguiSharp.ImDrawList.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawList.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImDrawList_destroy(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawList_destroy(__arg0);
        }

        public static void ImDrawListPushClipRect(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 clip_rect_min, global::DearImguiSharp.ImVec2 clip_rect_max, bool intersect_with_current_clip_rect)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(clip_rect_min, null))
                throw new global::System.ArgumentNullException("clip_rect_min", "Cannot be null because it is passed by value.");
            var __arg1 = clip_rect_min.__Instance;
            if (ReferenceEquals(clip_rect_max, null))
                throw new global::System.ArgumentNullException("clip_rect_max", "Cannot be null because it is passed by value.");
            var __arg2 = clip_rect_max.__Instance;
            __Internal.ImDrawListPushClipRect(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, intersect_with_current_clip_rect);
        }

        public static void ImDrawListPushClipRectFullScreen(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPushClipRectFullScreen(__arg0);
        }

        public static void ImDrawListPopClipRect(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPopClipRect(__arg0);
        }

        public static void ImDrawListPushTextureID(global::DearImguiSharp.ImDrawList self, global::System.IntPtr texture_id)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPushTextureID(__arg0, texture_id);
        }

        public static void ImDrawListPopTextureID(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPopTextureID(__arg0);
        }

        public static void ImDrawListGetClipRectMin(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListGetClipRectMin(__arg0, __arg1);
        }

        public static void ImDrawListGetClipRectMax(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListGetClipRectMax(__arg0, __arg1);
        }

        public static void ImDrawListAddLine(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, uint col, float thickness)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg1 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg2 = p2.__Instance;
            __Internal.ImDrawListAddLine(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, col, thickness);
        }

        public static void ImDrawListAddRect(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p_min, global::DearImguiSharp.ImVec2 p_max, uint col, float rounding, int rounding_corners, float thickness)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p_min, null))
                throw new global::System.ArgumentNullException("p_min", "Cannot be null because it is passed by value.");
            var __arg1 = p_min.__Instance;
            if (ReferenceEquals(p_max, null))
                throw new global::System.ArgumentNullException("p_max", "Cannot be null because it is passed by value.");
            var __arg2 = p_max.__Instance;
            __Internal.ImDrawListAddRect(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, col, rounding, rounding_corners, thickness);
        }

        public static void ImDrawListAddRectFilled(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p_min, global::DearImguiSharp.ImVec2 p_max, uint col, float rounding, int rounding_corners)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p_min, null))
                throw new global::System.ArgumentNullException("p_min", "Cannot be null because it is passed by value.");
            var __arg1 = p_min.__Instance;
            if (ReferenceEquals(p_max, null))
                throw new global::System.ArgumentNullException("p_max", "Cannot be null because it is passed by value.");
            var __arg2 = p_max.__Instance;
            __Internal.ImDrawListAddRectFilled(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, col, rounding, rounding_corners);
        }

        public static void ImDrawListAddRectFilledMultiColor(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p_min, global::DearImguiSharp.ImVec2 p_max, uint col_upr_left, uint col_upr_right, uint col_bot_right, uint col_bot_left)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p_min, null))
                throw new global::System.ArgumentNullException("p_min", "Cannot be null because it is passed by value.");
            var __arg1 = p_min.__Instance;
            if (ReferenceEquals(p_max, null))
                throw new global::System.ArgumentNullException("p_max", "Cannot be null because it is passed by value.");
            var __arg2 = p_max.__Instance;
            __Internal.ImDrawListAddRectFilledMultiColor(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, col_upr_left, col_upr_right, col_bot_right, col_bot_left);
        }

        public static void ImDrawListAddQuad(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, global::DearImguiSharp.ImVec2 p4, uint col, float thickness)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg1 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg2 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg3 = p3.__Instance;
            if (ReferenceEquals(p4, null))
                throw new global::System.ArgumentNullException("p4", "Cannot be null because it is passed by value.");
            var __arg4 = p4.__Instance;
            __Internal.ImDrawListAddQuad(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, col, thickness);
        }

        public static void ImDrawListAddQuadFilled(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, global::DearImguiSharp.ImVec2 p4, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg1 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg2 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg3 = p3.__Instance;
            if (ReferenceEquals(p4, null))
                throw new global::System.ArgumentNullException("p4", "Cannot be null because it is passed by value.");
            var __arg4 = p4.__Instance;
            __Internal.ImDrawListAddQuadFilled(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, col);
        }

        public static void ImDrawListAddTriangle(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, uint col, float thickness)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg1 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg2 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg3 = p3.__Instance;
            __Internal.ImDrawListAddTriangle(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, col, thickness);
        }

        public static void ImDrawListAddTriangleFilled(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg1 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg2 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg3 = p3.__Instance;
            __Internal.ImDrawListAddTriangleFilled(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, col);
        }

        public static void ImDrawListAddCircle(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 center, float radius, uint col, int num_segments, float thickness)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(center, null))
                throw new global::System.ArgumentNullException("center", "Cannot be null because it is passed by value.");
            var __arg1 = center.__Instance;
            __Internal.ImDrawListAddCircle(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, radius, col, num_segments, thickness);
        }

        public static void ImDrawListAddCircleFilled(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 center, float radius, uint col, int num_segments)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(center, null))
                throw new global::System.ArgumentNullException("center", "Cannot be null because it is passed by value.");
            var __arg1 = center.__Instance;
            __Internal.ImDrawListAddCircleFilled(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, radius, col, num_segments);
        }

        public static void ImDrawListAddNgon(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 center, float radius, uint col, int num_segments, float thickness)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(center, null))
                throw new global::System.ArgumentNullException("center", "Cannot be null because it is passed by value.");
            var __arg1 = center.__Instance;
            __Internal.ImDrawListAddNgon(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, radius, col, num_segments, thickness);
        }

        public static void ImDrawListAddNgonFilled(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 center, float radius, uint col, int num_segments)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(center, null))
                throw new global::System.ArgumentNullException("center", "Cannot be null because it is passed by value.");
            var __arg1 = center.__Instance;
            __Internal.ImDrawListAddNgonFilled(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, radius, col, num_segments);
        }

        public static void ImDrawListAddTextVec2(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 pos, uint col, string text_begin, string text_end)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            __Internal.ImDrawListAddTextVec2(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, col, text_begin, text_end);
        }

        public static void ImDrawListAddTextFontPtr(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImFont font, float font_size, global::DearImguiSharp.ImVec2 pos, uint col, string text_begin, string text_end, float wrap_width, global::DearImguiSharp.ImVec4 cpu_fine_clip_rect)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(font, null) ? global::System.IntPtr.Zero : font.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg3 = pos.__Instance;
            var __arg8 = ReferenceEquals(cpu_fine_clip_rect, null) ? global::System.IntPtr.Zero : cpu_fine_clip_rect.__Instance;
            __Internal.ImDrawListAddTextFontPtr(__arg0, __arg1, font_size, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, col, text_begin, text_end, wrap_width, __arg8);
        }

        public static void ImDrawListAddPolyline(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 points, int num_points, uint col, bool closed, float thickness)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(points, null) ? global::System.IntPtr.Zero : points.__Instance;
            __Internal.ImDrawListAddPolyline(__arg0, __arg1, num_points, col, closed, thickness);
        }

        public static void ImDrawListAddConvexPolyFilled(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 points, int num_points, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(points, null) ? global::System.IntPtr.Zero : points.__Instance;
            __Internal.ImDrawListAddConvexPolyFilled(__arg0, __arg1, num_points, col);
        }

        public static void ImDrawListAddBezierCurve(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, global::DearImguiSharp.ImVec2 p4, uint col, float thickness, int num_segments)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg1 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg2 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg3 = p3.__Instance;
            if (ReferenceEquals(p4, null))
                throw new global::System.ArgumentNullException("p4", "Cannot be null because it is passed by value.");
            var __arg4 = p4.__Instance;
            __Internal.ImDrawListAddBezierCurve(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, col, thickness, num_segments);
        }

        public static void ImDrawListAddImage(global::DearImguiSharp.ImDrawList self, global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2 p_min, global::DearImguiSharp.ImVec2 p_max, global::DearImguiSharp.ImVec2 uv_min, global::DearImguiSharp.ImVec2 uv_max, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p_min, null))
                throw new global::System.ArgumentNullException("p_min", "Cannot be null because it is passed by value.");
            var __arg2 = p_min.__Instance;
            if (ReferenceEquals(p_max, null))
                throw new global::System.ArgumentNullException("p_max", "Cannot be null because it is passed by value.");
            var __arg3 = p_max.__Instance;
            if (ReferenceEquals(uv_min, null))
                throw new global::System.ArgumentNullException("uv_min", "Cannot be null because it is passed by value.");
            var __arg4 = uv_min.__Instance;
            if (ReferenceEquals(uv_max, null))
                throw new global::System.ArgumentNullException("uv_max", "Cannot be null because it is passed by value.");
            var __arg5 = uv_max.__Instance;
            __Internal.ImDrawListAddImage(__arg0, user_texture_id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, *(global::DearImguiSharp.ImVec2.__Internal*) __arg5, col);
        }

        public static void ImDrawListAddImageQuad(global::DearImguiSharp.ImDrawList self, global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, global::DearImguiSharp.ImVec2 p4, global::DearImguiSharp.ImVec2 uv1, global::DearImguiSharp.ImVec2 uv2, global::DearImguiSharp.ImVec2 uv3, global::DearImguiSharp.ImVec2 uv4, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg2 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg3 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg4 = p3.__Instance;
            if (ReferenceEquals(p4, null))
                throw new global::System.ArgumentNullException("p4", "Cannot be null because it is passed by value.");
            var __arg5 = p4.__Instance;
            if (ReferenceEquals(uv1, null))
                throw new global::System.ArgumentNullException("uv1", "Cannot be null because it is passed by value.");
            var __arg6 = uv1.__Instance;
            if (ReferenceEquals(uv2, null))
                throw new global::System.ArgumentNullException("uv2", "Cannot be null because it is passed by value.");
            var __arg7 = uv2.__Instance;
            if (ReferenceEquals(uv3, null))
                throw new global::System.ArgumentNullException("uv3", "Cannot be null because it is passed by value.");
            var __arg8 = uv3.__Instance;
            if (ReferenceEquals(uv4, null))
                throw new global::System.ArgumentNullException("uv4", "Cannot be null because it is passed by value.");
            var __arg9 = uv4.__Instance;
            __Internal.ImDrawListAddImageQuad(__arg0, user_texture_id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, *(global::DearImguiSharp.ImVec2.__Internal*) __arg5, *(global::DearImguiSharp.ImVec2.__Internal*) __arg6, *(global::DearImguiSharp.ImVec2.__Internal*) __arg7, *(global::DearImguiSharp.ImVec2.__Internal*) __arg8, *(global::DearImguiSharp.ImVec2.__Internal*) __arg9, col);
        }

        public static void ImDrawListAddImageRounded(global::DearImguiSharp.ImDrawList self, global::System.IntPtr user_texture_id, global::DearImguiSharp.ImVec2 p_min, global::DearImguiSharp.ImVec2 p_max, global::DearImguiSharp.ImVec2 uv_min, global::DearImguiSharp.ImVec2 uv_max, uint col, float rounding, int rounding_corners)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p_min, null))
                throw new global::System.ArgumentNullException("p_min", "Cannot be null because it is passed by value.");
            var __arg2 = p_min.__Instance;
            if (ReferenceEquals(p_max, null))
                throw new global::System.ArgumentNullException("p_max", "Cannot be null because it is passed by value.");
            var __arg3 = p_max.__Instance;
            if (ReferenceEquals(uv_min, null))
                throw new global::System.ArgumentNullException("uv_min", "Cannot be null because it is passed by value.");
            var __arg4 = uv_min.__Instance;
            if (ReferenceEquals(uv_max, null))
                throw new global::System.ArgumentNullException("uv_max", "Cannot be null because it is passed by value.");
            var __arg5 = uv_max.__Instance;
            __Internal.ImDrawListAddImageRounded(__arg0, user_texture_id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, *(global::DearImguiSharp.ImVec2.__Internal*) __arg5, col, rounding, rounding_corners);
        }

        public static void ImDrawListPathClear(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPathClear(__arg0);
        }

        public static void ImDrawListPathLineTo(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 pos)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            __Internal.ImDrawListPathLineTo(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
        }

        public static void ImDrawListPathLineToMergeDuplicate(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 pos)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            __Internal.ImDrawListPathLineToMergeDuplicate(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
        }

        public static void ImDrawListPathFillConvex(global::DearImguiSharp.ImDrawList self, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPathFillConvex(__arg0, col);
        }

        public static void ImDrawListPathStroke(global::DearImguiSharp.ImDrawList self, uint col, bool closed, float thickness)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPathStroke(__arg0, col, closed, thickness);
        }

        public static void ImDrawListPathArcTo(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 center, float radius, float a_min, float a_max, int num_segments)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(center, null))
                throw new global::System.ArgumentNullException("center", "Cannot be null because it is passed by value.");
            var __arg1 = center.__Instance;
            __Internal.ImDrawListPathArcTo(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, radius, a_min, a_max, num_segments);
        }

        public static void ImDrawListPathArcToFast(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 center, float radius, int a_min_of_12, int a_max_of_12)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(center, null))
                throw new global::System.ArgumentNullException("center", "Cannot be null because it is passed by value.");
            var __arg1 = center.__Instance;
            __Internal.ImDrawListPathArcToFast(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, radius, a_min_of_12, a_max_of_12);
        }

        public static void ImDrawListPathBezierCurveTo(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, global::DearImguiSharp.ImVec2 p4, int num_segments)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg1 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg2 = p3.__Instance;
            if (ReferenceEquals(p4, null))
                throw new global::System.ArgumentNullException("p4", "Cannot be null because it is passed by value.");
            var __arg3 = p4.__Instance;
            __Internal.ImDrawListPathBezierCurveTo(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, num_segments);
        }

        public static void ImDrawListPathRect(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 rect_min, global::DearImguiSharp.ImVec2 rect_max, float rounding, int rounding_corners)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(rect_min, null))
                throw new global::System.ArgumentNullException("rect_min", "Cannot be null because it is passed by value.");
            var __arg1 = rect_min.__Instance;
            if (ReferenceEquals(rect_max, null))
                throw new global::System.ArgumentNullException("rect_max", "Cannot be null because it is passed by value.");
            var __arg2 = rect_max.__Instance;
            __Internal.ImDrawListPathRect(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, rounding, rounding_corners);
        }

        public static void ImDrawListAddCallback(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImDrawCallback callback, global::System.IntPtr callback_data)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            __Internal.ImDrawListAddCallback(__arg0, __arg1, callback_data);
        }

        public static void ImDrawListAddDrawCmd(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListAddDrawCmd(__arg0);
        }

        public static global::DearImguiSharp.ImDrawList ImDrawListCloneOutput(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImDrawListCloneOutput(__arg0);
            global::DearImguiSharp.ImDrawList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawList) global::DearImguiSharp.ImDrawList.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawList.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImDrawListChannelsSplit(global::DearImguiSharp.ImDrawList self, int count)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListChannelsSplit(__arg0, count);
        }

        public static void ImDrawListChannelsMerge(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListChannelsMerge(__arg0);
        }

        public static void ImDrawListChannelsSetCurrent(global::DearImguiSharp.ImDrawList self, int n)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListChannelsSetCurrent(__arg0, n);
        }

        public static void ImDrawListClear(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListClear(__arg0);
        }

        public static void ImDrawListClearFreeMemory(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListClearFreeMemory(__arg0);
        }

        public static void ImDrawListPrimReserve(global::DearImguiSharp.ImDrawList self, int idx_count, int vtx_count)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPrimReserve(__arg0, idx_count, vtx_count);
        }

        public static void ImDrawListPrimUnreserve(global::DearImguiSharp.ImDrawList self, int idx_count, int vtx_count)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPrimUnreserve(__arg0, idx_count, vtx_count);
        }

        public static void ImDrawListPrimRect(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg1 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg2 = b.__Instance;
            __Internal.ImDrawListPrimRect(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, col);
        }

        public static void ImDrawListPrimRectUV(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, global::DearImguiSharp.ImVec2 uv_a, global::DearImguiSharp.ImVec2 uv_b, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg1 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg2 = b.__Instance;
            if (ReferenceEquals(uv_a, null))
                throw new global::System.ArgumentNullException("uv_a", "Cannot be null because it is passed by value.");
            var __arg3 = uv_a.__Instance;
            if (ReferenceEquals(uv_b, null))
                throw new global::System.ArgumentNullException("uv_b", "Cannot be null because it is passed by value.");
            var __arg4 = uv_b.__Instance;
            __Internal.ImDrawListPrimRectUV(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, col);
        }

        public static void ImDrawListPrimQuadUV(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, global::DearImguiSharp.ImVec2 c, global::DearImguiSharp.ImVec2 d, global::DearImguiSharp.ImVec2 uv_a, global::DearImguiSharp.ImVec2 uv_b, global::DearImguiSharp.ImVec2 uv_c, global::DearImguiSharp.ImVec2 uv_d, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg1 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg2 = b.__Instance;
            if (ReferenceEquals(c, null))
                throw new global::System.ArgumentNullException("c", "Cannot be null because it is passed by value.");
            var __arg3 = c.__Instance;
            if (ReferenceEquals(d, null))
                throw new global::System.ArgumentNullException("d", "Cannot be null because it is passed by value.");
            var __arg4 = d.__Instance;
            if (ReferenceEquals(uv_a, null))
                throw new global::System.ArgumentNullException("uv_a", "Cannot be null because it is passed by value.");
            var __arg5 = uv_a.__Instance;
            if (ReferenceEquals(uv_b, null))
                throw new global::System.ArgumentNullException("uv_b", "Cannot be null because it is passed by value.");
            var __arg6 = uv_b.__Instance;
            if (ReferenceEquals(uv_c, null))
                throw new global::System.ArgumentNullException("uv_c", "Cannot be null because it is passed by value.");
            var __arg7 = uv_c.__Instance;
            if (ReferenceEquals(uv_d, null))
                throw new global::System.ArgumentNullException("uv_d", "Cannot be null because it is passed by value.");
            var __arg8 = uv_d.__Instance;
            __Internal.ImDrawListPrimQuadUV(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, *(global::DearImguiSharp.ImVec2.__Internal*) __arg5, *(global::DearImguiSharp.ImVec2.__Internal*) __arg6, *(global::DearImguiSharp.ImVec2.__Internal*) __arg7, *(global::DearImguiSharp.ImVec2.__Internal*) __arg8, col);
        }

        public static void ImDrawListPrimWriteVtx(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 pos, global::DearImguiSharp.ImVec2 uv, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            if (ReferenceEquals(uv, null))
                throw new global::System.ArgumentNullException("uv", "Cannot be null because it is passed by value.");
            var __arg2 = uv.__Instance;
            __Internal.ImDrawListPrimWriteVtx(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, col);
        }

        public static void ImDrawListPrimWriteIdx(global::DearImguiSharp.ImDrawList self, ushort idx)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListPrimWriteIdx(__arg0, idx);
        }

        public static void ImDrawListPrimVtx(global::DearImguiSharp.ImDrawList self, global::DearImguiSharp.ImVec2 pos, global::DearImguiSharp.ImVec2 uv, uint col)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            if (ReferenceEquals(uv, null))
                throw new global::System.ArgumentNullException("uv", "Cannot be null because it is passed by value.");
            var __arg2 = uv.__Instance;
            __Internal.ImDrawListPrimVtx(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, col);
        }

        public static void ImDrawListUpdateClipRect(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListUpdateClipRect(__arg0);
        }

        public static void ImDrawListUpdateTextureID(global::DearImguiSharp.ImDrawList self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListUpdateTextureID(__arg0);
        }

        public static global::DearImguiSharp.ImDrawData ImDrawDataImDrawData()
        {
            var __ret = __Internal.ImDrawDataImDrawData();
            global::DearImguiSharp.ImDrawData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawData) global::DearImguiSharp.ImDrawData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawData.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImDrawData_destroy(global::DearImguiSharp.ImDrawData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawData_destroy(__arg0);
        }

        public static void ImDrawDataClear(global::DearImguiSharp.ImDrawData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawDataClear(__arg0);
        }

        public static void ImDrawDataDeIndexAllBuffers(global::DearImguiSharp.ImDrawData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawDataDeIndexAllBuffers(__arg0);
        }

        public static void ImDrawDataScaleClipRects(global::DearImguiSharp.ImDrawData self, global::DearImguiSharp.ImVec2 fb_scale)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(fb_scale, null))
                throw new global::System.ArgumentNullException("fb_scale", "Cannot be null because it is passed by value.");
            var __arg1 = fb_scale.__Instance;
            __Internal.ImDrawDataScaleClipRects(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
        }

        public static global::DearImguiSharp.ImFontConfig ImFontConfigImFontConfig()
        {
            var __ret = __Internal.ImFontConfigImFontConfig();
            global::DearImguiSharp.ImFontConfig __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFontConfig.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFontConfig) global::DearImguiSharp.ImFontConfig.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFontConfig.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImFontConfig_destroy(global::DearImguiSharp.ImFontConfig self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontConfig_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImFontGlyphRangesBuilder ImFontGlyphRangesBuilderImFontGlyphRangesBuilder()
        {
            var __ret = __Internal.ImFontGlyphRangesBuilderImFontGlyphRangesBuilder();
            global::DearImguiSharp.ImFontGlyphRangesBuilder __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFontGlyphRangesBuilder.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFontGlyphRangesBuilder) global::DearImguiSharp.ImFontGlyphRangesBuilder.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFontGlyphRangesBuilder.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImFontGlyphRangesBuilder_destroy(global::DearImguiSharp.ImFontGlyphRangesBuilder self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontGlyphRangesBuilder_destroy(__arg0);
        }

        public static void ImFontGlyphRangesBuilderClear(global::DearImguiSharp.ImFontGlyphRangesBuilder self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontGlyphRangesBuilderClear(__arg0);
        }

        public static bool ImFontGlyphRangesBuilderGetBit(global::DearImguiSharp.ImFontGlyphRangesBuilder self, int n)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontGlyphRangesBuilderGetBit(__arg0, n);
            return __ret;
        }

        public static void ImFontGlyphRangesBuilderSetBit(global::DearImguiSharp.ImFontGlyphRangesBuilder self, int n)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontGlyphRangesBuilderSetBit(__arg0, n);
        }

        public static void ImFontGlyphRangesBuilderAddChar(global::DearImguiSharp.ImFontGlyphRangesBuilder self, ushort c)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontGlyphRangesBuilderAddChar(__arg0, c);
        }

        public static void ImFontGlyphRangesBuilderAddText(global::DearImguiSharp.ImFontGlyphRangesBuilder self, string text, string text_end)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontGlyphRangesBuilderAddText(__arg0, text, text_end);
        }

        public static void ImFontGlyphRangesBuilderAddRanges(global::DearImguiSharp.ImFontGlyphRangesBuilder self, ref ushort ranges)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            fixed (ushort* __ranges1 = &ranges)
            {
                var __arg1 = __ranges1;
                __Internal.ImFontGlyphRangesBuilderAddRanges(__arg0, __arg1);
            }
        }

        public static void ImFontGlyphRangesBuilderBuildRanges(global::DearImguiSharp.ImFontGlyphRangesBuilder self, global::DearImguiSharp.ImVectorImWchar out_ranges)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(out_ranges, null) ? global::System.IntPtr.Zero : out_ranges.__Instance;
            __Internal.ImFontGlyphRangesBuilderBuildRanges(__arg0, __arg1);
        }

        public static global::DearImguiSharp.ImFontAtlasCustomRect ImFontAtlasCustomRectImFontAtlasCustomRect()
        {
            var __ret = __Internal.ImFontAtlasCustomRectImFontAtlasCustomRect();
            global::DearImguiSharp.ImFontAtlasCustomRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFontAtlasCustomRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFontAtlasCustomRect) global::DearImguiSharp.ImFontAtlasCustomRect.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFontAtlasCustomRect.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImFontAtlasCustomRect_destroy(global::DearImguiSharp.ImFontAtlasCustomRect self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontAtlasCustomRect_destroy(__arg0);
        }

        public static bool ImFontAtlasCustomRectIsPacked(global::DearImguiSharp.ImFontAtlasCustomRect self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasCustomRectIsPacked(__arg0);
            return __ret;
        }

        public static global::DearImguiSharp.ImFontAtlas ImFontAtlasImFontAtlas()
        {
            var __ret = __Internal.ImFontAtlasImFontAtlas();
            global::DearImguiSharp.ImFontAtlas __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFontAtlas.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFontAtlas) global::DearImguiSharp.ImFontAtlas.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFontAtlas.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImFontAtlas_destroy(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontAtlas_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImFont ImFontAtlasAddFont(global::DearImguiSharp.ImFontAtlas self, global::DearImguiSharp.ImFontConfig font_cfg)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(font_cfg, null) ? global::System.IntPtr.Zero : font_cfg.__Instance;
            var __ret = __Internal.ImFontAtlasAddFont(__arg0, __arg1);
            global::DearImguiSharp.ImFont __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImFont ImFontAtlasAddFontDefault(global::DearImguiSharp.ImFontAtlas self, global::DearImguiSharp.ImFontConfig font_cfg)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(font_cfg, null) ? global::System.IntPtr.Zero : font_cfg.__Instance;
            var __ret = __Internal.ImFontAtlasAddFontDefault(__arg0, __arg1);
            global::DearImguiSharp.ImFont __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImFont ImFontAtlasAddFontFromFileTTF(global::DearImguiSharp.ImFontAtlas self, string filename, float size_pixels, global::DearImguiSharp.ImFontConfig font_cfg, ref ushort glyph_ranges)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg3 = ReferenceEquals(font_cfg, null) ? global::System.IntPtr.Zero : font_cfg.__Instance;
            fixed (ushort* __glyph_ranges4 = &glyph_ranges)
            {
                var __arg4 = __glyph_ranges4;
                var __ret = __Internal.ImFontAtlasAddFontFromFileTTF(__arg0, filename, size_pixels, __arg3, __arg4);
                global::DearImguiSharp.ImFont __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[__ret];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::DearImguiSharp.ImFont ImFontAtlasAddFontFromMemoryTTF(global::DearImguiSharp.ImFontAtlas self, global::System.IntPtr font_data, int font_size, float size_pixels, global::DearImguiSharp.ImFontConfig font_cfg, ref ushort glyph_ranges)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg4 = ReferenceEquals(font_cfg, null) ? global::System.IntPtr.Zero : font_cfg.__Instance;
            fixed (ushort* __glyph_ranges5 = &glyph_ranges)
            {
                var __arg5 = __glyph_ranges5;
                var __ret = __Internal.ImFontAtlasAddFontFromMemoryTTF(__arg0, font_data, font_size, size_pixels, __arg4, __arg5);
                global::DearImguiSharp.ImFont __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[__ret];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::DearImguiSharp.ImFont ImFontAtlasAddFontFromMemoryCompressedTTF(global::DearImguiSharp.ImFontAtlas self, global::System.IntPtr compressed_font_data, int compressed_font_size, float size_pixels, global::DearImguiSharp.ImFontConfig font_cfg, ref ushort glyph_ranges)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg4 = ReferenceEquals(font_cfg, null) ? global::System.IntPtr.Zero : font_cfg.__Instance;
            fixed (ushort* __glyph_ranges5 = &glyph_ranges)
            {
                var __arg5 = __glyph_ranges5;
                var __ret = __Internal.ImFontAtlasAddFontFromMemoryCompressedTTF(__arg0, compressed_font_data, compressed_font_size, size_pixels, __arg4, __arg5);
                global::DearImguiSharp.ImFont __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[__ret];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static global::DearImguiSharp.ImFont ImFontAtlasAddFontFromMemoryCompressedBase85TTF(global::DearImguiSharp.ImFontAtlas self, string compressed_font_data_base85, float size_pixels, global::DearImguiSharp.ImFontConfig font_cfg, ref ushort glyph_ranges)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg3 = ReferenceEquals(font_cfg, null) ? global::System.IntPtr.Zero : font_cfg.__Instance;
            fixed (ushort* __glyph_ranges4 = &glyph_ranges)
            {
                var __arg4 = __glyph_ranges4;
                var __ret = __Internal.ImFontAtlasAddFontFromMemoryCompressedBase85TTF(__arg0, compressed_font_data_base85, size_pixels, __arg3, __arg4);
                global::DearImguiSharp.ImFont __result0;
                if (__ret == IntPtr.Zero) __result0 = null;
                else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(__ret))
                    __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[__ret];
                else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(__ret);
                return __result0;
            }
        }

        public static void ImFontAtlasClearInputData(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontAtlasClearInputData(__arg0);
        }

        public static void ImFontAtlasClearTexData(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontAtlasClearTexData(__arg0);
        }

        public static void ImFontAtlasClearFonts(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontAtlasClearFonts(__arg0);
        }

        public static void ImFontAtlasClear(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontAtlasClear(__arg0);
        }

        public static bool ImFontAtlasBuild(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasBuild(__arg0);
            return __ret;
        }

        public static void ImFontAtlasGetTexDataAsAlpha8(global::DearImguiSharp.ImFontAtlas self, byte** out_pixels, ref int out_width, ref int out_height, ref int out_bytes_per_pixel)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            fixed (int* __out_width2 = &out_width)
            {
                var __arg2 = __out_width2;
                fixed (int* __out_height3 = &out_height)
                {
                    var __arg3 = __out_height3;
                    fixed (int* __out_bytes_per_pixel4 = &out_bytes_per_pixel)
                    {
                        var __arg4 = __out_bytes_per_pixel4;
                        __Internal.ImFontAtlasGetTexDataAsAlpha8(__arg0, out_pixels, __arg2, __arg3, __arg4);
                    }
                }
            }
        }

        public static void ImFontAtlasGetTexDataAsRGBA32(global::DearImguiSharp.ImFontAtlas self, byte** out_pixels, ref int out_width, ref int out_height, ref int out_bytes_per_pixel)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            fixed (int* __out_width2 = &out_width)
            {
                var __arg2 = __out_width2;
                fixed (int* __out_height3 = &out_height)
                {
                    var __arg3 = __out_height3;
                    fixed (int* __out_bytes_per_pixel4 = &out_bytes_per_pixel)
                    {
                        var __arg4 = __out_bytes_per_pixel4;
                        __Internal.ImFontAtlasGetTexDataAsRGBA32(__arg0, out_pixels, __arg2, __arg3, __arg4);
                    }
                }
            }
        }

        public static bool ImFontAtlasIsBuilt(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasIsBuilt(__arg0);
            return __ret;
        }

        public static void ImFontAtlasSetTexID(global::DearImguiSharp.ImFontAtlas self, global::System.IntPtr id)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontAtlasSetTexID(__arg0, id);
        }

        public static ushort* ImFontAtlasGetGlyphRangesDefault(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasGetGlyphRangesDefault(__arg0);
            return __ret;
        }

        public static ushort* ImFontAtlasGetGlyphRangesKorean(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasGetGlyphRangesKorean(__arg0);
            return __ret;
        }

        public static ushort* ImFontAtlasGetGlyphRangesJapanese(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasGetGlyphRangesJapanese(__arg0);
            return __ret;
        }

        public static ushort* ImFontAtlasGetGlyphRangesChineseFull(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasGetGlyphRangesChineseFull(__arg0);
            return __ret;
        }

        public static ushort* ImFontAtlasGetGlyphRangesChineseSimplifiedCommon(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasGetGlyphRangesChineseSimplifiedCommon(__arg0);
            return __ret;
        }

        public static ushort* ImFontAtlasGetGlyphRangesCyrillic(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasGetGlyphRangesCyrillic(__arg0);
            return __ret;
        }

        public static ushort* ImFontAtlasGetGlyphRangesThai(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasGetGlyphRangesThai(__arg0);
            return __ret;
        }

        public static ushort* ImFontAtlasGetGlyphRangesVietnamese(global::DearImguiSharp.ImFontAtlas self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasGetGlyphRangesVietnamese(__arg0);
            return __ret;
        }

        public static int ImFontAtlasAddCustomRectRegular(global::DearImguiSharp.ImFontAtlas self, uint id, int width, int height)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasAddCustomRectRegular(__arg0, id, width, height);
            return __ret;
        }

        public static int ImFontAtlasAddCustomRectFontGlyph(global::DearImguiSharp.ImFontAtlas self, global::DearImguiSharp.ImFont font, ushort id, int width, int height, float advance_x, global::DearImguiSharp.ImVec2 offset)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(font, null) ? global::System.IntPtr.Zero : font.__Instance;
            if (ReferenceEquals(offset, null))
                throw new global::System.ArgumentNullException("offset", "Cannot be null because it is passed by value.");
            var __arg6 = offset.__Instance;
            var __ret = __Internal.ImFontAtlasAddCustomRectFontGlyph(__arg0, __arg1, id, width, height, advance_x, *(global::DearImguiSharp.ImVec2.__Internal*) __arg6);
            return __ret;
        }

        public static global::DearImguiSharp.ImFontAtlasCustomRect ImFontAtlasGetCustomRectByIndex(global::DearImguiSharp.ImFontAtlas self, int index)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontAtlasGetCustomRectByIndex(__arg0, index);
            global::DearImguiSharp.ImFontAtlasCustomRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFontAtlasCustomRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFontAtlasCustomRect) global::DearImguiSharp.ImFontAtlasCustomRect.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFontAtlasCustomRect.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImFontAtlasCalcCustomRectUV(global::DearImguiSharp.ImFontAtlas self, global::DearImguiSharp.ImFontAtlasCustomRect rect, global::DearImguiSharp.ImVec2 out_uv_min, global::DearImguiSharp.ImVec2 out_uv_max)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(rect, null) ? global::System.IntPtr.Zero : rect.__Instance;
            var __arg2 = ReferenceEquals(out_uv_min, null) ? global::System.IntPtr.Zero : out_uv_min.__Instance;
            var __arg3 = ReferenceEquals(out_uv_max, null) ? global::System.IntPtr.Zero : out_uv_max.__Instance;
            __Internal.ImFontAtlasCalcCustomRectUV(__arg0, __arg1, __arg2, __arg3);
        }

        public static bool ImFontAtlasGetMouseCursorTexData(global::DearImguiSharp.ImFontAtlas self, int cursor, global::DearImguiSharp.ImVec2 out_offset, global::DearImguiSharp.ImVec2 out_size, global::DearImguiSharp.ImVec2[] out_uv_border, global::DearImguiSharp.ImVec2[] out_uv_fill)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg2 = ReferenceEquals(out_offset, null) ? global::System.IntPtr.Zero : out_offset.__Instance;
            var __arg3 = ReferenceEquals(out_size, null) ? global::System.IntPtr.Zero : out_size.__Instance;
            if (out_uv_border == null || out_uv_border.Length != 2)
                throw new ArgumentOutOfRangeException("out_uv_border", "The dimensions of the provided array don't match the required size.");
            global::DearImguiSharp.ImVec2.__Internal[] __out_uv_border;
            if (ReferenceEquals(out_uv_border, null))
                __out_uv_border = null;
            else
            {
                __out_uv_border = new global::DearImguiSharp.ImVec2.__Internal[out_uv_border.Length];
                for (int i = 0; i < __out_uv_border.Length; i++)
                {
                    var __element = out_uv_border[i];
                    __out_uv_border[i] = ReferenceEquals(__element, null) ? new global::DearImguiSharp.ImVec2.__Internal() : *(global::DearImguiSharp.ImVec2.__Internal*) __element.__Instance;
                }
            }
            var __arg4 = __out_uv_border;
            if (out_uv_fill == null || out_uv_fill.Length != 2)
                throw new ArgumentOutOfRangeException("out_uv_fill", "The dimensions of the provided array don't match the required size.");
            global::DearImguiSharp.ImVec2.__Internal[] __out_uv_fill;
            if (ReferenceEquals(out_uv_fill, null))
                __out_uv_fill = null;
            else
            {
                __out_uv_fill = new global::DearImguiSharp.ImVec2.__Internal[out_uv_fill.Length];
                for (int i = 0; i < __out_uv_fill.Length; i++)
                {
                    var __element = out_uv_fill[i];
                    __out_uv_fill[i] = ReferenceEquals(__element, null) ? new global::DearImguiSharp.ImVec2.__Internal() : *(global::DearImguiSharp.ImVec2.__Internal*) __element.__Instance;
                }
            }
            var __arg5 = __out_uv_fill;
            var __ret = __Internal.ImFontAtlasGetMouseCursorTexData(__arg0, cursor, __arg2, __arg3, __arg4, __arg5);
            return __ret;
        }

        public static global::DearImguiSharp.ImFont ImFontImFont()
        {
            var __ret = __Internal.ImFontImFont();
            global::DearImguiSharp.ImFont __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImFont_destroy(global::DearImguiSharp.ImFont self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFont_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImFontGlyph ImFontFindGlyph(global::DearImguiSharp.ImFont self, ushort c)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontFindGlyph(__arg0, c);
            global::DearImguiSharp.ImFontGlyph __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFontGlyph.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFontGlyph) global::DearImguiSharp.ImFontGlyph.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFontGlyph.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImFontGlyph ImFontFindGlyphNoFallback(global::DearImguiSharp.ImFont self, ushort c)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontFindGlyphNoFallback(__arg0, c);
            global::DearImguiSharp.ImFontGlyph __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFontGlyph.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFontGlyph) global::DearImguiSharp.ImFontGlyph.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFontGlyph.__CreateInstance(__ret);
            return __result0;
        }

        public static float ImFontGetCharAdvance(global::DearImguiSharp.ImFont self, ushort c)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontGetCharAdvance(__arg0, c);
            return __ret;
        }

        public static bool ImFontIsLoaded(global::DearImguiSharp.ImFont self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontIsLoaded(__arg0);
            return __ret;
        }

        public static string ImFontGetDebugName(global::DearImguiSharp.ImFont self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontGetDebugName(__arg0);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static void ImFontCalcTextSizeA(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImFont self, float size, float max_width, float wrap_width, string text_begin, string text_end, sbyte** remaining)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontCalcTextSizeA(__arg0, __arg1, size, max_width, wrap_width, text_begin, text_end, remaining);
        }

        public static string ImFontCalcWordWrapPositionA(global::DearImguiSharp.ImFont self, float scale, string text, string text_end, float wrap_width)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImFontCalcWordWrapPositionA(__arg0, scale, text, text_end, wrap_width);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static void ImFontRenderChar(global::DearImguiSharp.ImFont self, global::DearImguiSharp.ImDrawList draw_list, float size, global::DearImguiSharp.ImVec2 pos, uint col, ushort c)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg3 = pos.__Instance;
            __Internal.ImFontRenderChar(__arg0, __arg1, size, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, col, c);
        }

        public static void ImFontRenderText(global::DearImguiSharp.ImFont self, global::DearImguiSharp.ImDrawList draw_list, float size, global::DearImguiSharp.ImVec2 pos, uint col, global::DearImguiSharp.ImVec4 clip_rect, string text_begin, string text_end, float wrap_width, bool cpu_fine_clip)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg3 = pos.__Instance;
            if (ReferenceEquals(clip_rect, null))
                throw new global::System.ArgumentNullException("clip_rect", "Cannot be null because it is passed by value.");
            var __arg5 = clip_rect.__Instance;
            __Internal.ImFontRenderText(__arg0, __arg1, size, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, col, __arg5, text_begin, text_end, wrap_width, cpu_fine_clip);
        }

        public static void ImFontBuildLookupTable(global::DearImguiSharp.ImFont self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontBuildLookupTable(__arg0);
        }

        public static void ImFontClearOutputData(global::DearImguiSharp.ImFont self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontClearOutputData(__arg0);
        }

        public static void ImFontGrowIndex(global::DearImguiSharp.ImFont self, int new_size)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontGrowIndex(__arg0, new_size);
        }

        public static void ImFontAddGlyph(global::DearImguiSharp.ImFont self, ushort c, float x0, float y0, float x1, float y1, float u0, float v0, float u1, float v1, float advance_x)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontAddGlyph(__arg0, c, x0, y0, x1, y1, u0, v0, u1, v1, advance_x);
        }

        public static void ImFontAddRemapChar(global::DearImguiSharp.ImFont self, ushort dst, ushort src, bool overwrite_dst)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontAddRemapChar(__arg0, dst, src, overwrite_dst);
        }

        public static void ImFontSetFallbackChar(global::DearImguiSharp.ImFont self, ushort c)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImFontSetFallbackChar(__arg0, c);
        }

        public static uint ImHashData(global::System.IntPtr data, ulong data_size, uint seed)
        {
            var __ret = __Internal.ImHashData(data, data_size, seed);
            return __ret;
        }

        public static uint ImHashStr(string data, ulong data_size, uint seed)
        {
            var __ret = __Internal.ImHashStr(data, data_size, seed);
            return __ret;
        }

        public static bool ImIsPowerOfTwo(int v)
        {
            var __ret = __Internal.ImIsPowerOfTwo(v);
            return __ret;
        }

        public static int ImUpperPowerOfTwo(int v)
        {
            var __ret = __Internal.ImUpperPowerOfTwo(v);
            return __ret;
        }

        public static int ImStricmp(string str1, string str2)
        {
            var __ret = __Internal.ImStricmp(str1, str2);
            return __ret;
        }

        public static int ImStrnicmp(string str1, string str2, ulong count)
        {
            var __ret = __Internal.ImStrnicmp(str1, str2, count);
            return __ret;
        }

        public static void ImStrncpy(sbyte* dst, string src, ulong count)
        {
            __Internal.ImStrncpy(dst, src, count);
        }

        public static sbyte* ImStrdup(string str)
        {
            var __ret = __Internal.ImStrdup(str);
            return __ret;
        }

        public static sbyte* ImStrdupcpy(sbyte* dst, ref ulong p_dst_size, string str)
        {
            fixed (ulong* __p_dst_size1 = &p_dst_size)
            {
                var __arg1 = __p_dst_size1;
                var __ret = __Internal.ImStrdupcpy(dst, __arg1, str);
                return __ret;
            }
        }

        public static string ImStrchrRange(string str_begin, string str_end, sbyte c)
        {
            var __ret = __Internal.ImStrchrRange(str_begin, str_end, c);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int ImStrlenW(ref ushort str)
        {
            fixed (ushort* __str0 = &str)
            {
                var __arg0 = __str0;
                var __ret = __Internal.ImStrlenW(__arg0);
                return __ret;
            }
        }

        public static string ImStreolRange(string str, string str_end)
        {
            var __ret = __Internal.ImStreolRange(str, str_end);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static ushort* ImStrbolW(ref ushort buf_mid_line, ref ushort buf_begin)
        {
            fixed (ushort* __buf_mid_line0 = &buf_mid_line)
            {
                var __arg0 = __buf_mid_line0;
                fixed (ushort* __buf_begin1 = &buf_begin)
                {
                    var __arg1 = __buf_begin1;
                    var __ret = __Internal.ImStrbolW(__arg0, __arg1);
                    return __ret;
                }
            }
        }

        public static string ImStristr(string haystack, string haystack_end, string needle, string needle_end)
        {
            var __ret = __Internal.ImStristr(haystack, haystack_end, needle, needle_end);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static void ImStrTrimBlanks(sbyte* str)
        {
            __Internal.ImStrTrimBlanks(str);
        }

        public static string ImStrSkipBlank(string str)
        {
            var __ret = __Internal.ImStrSkipBlank(str);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int ImFormatString(sbyte* buf, ulong buf_size, string fmt)
        {
            var __ret = __Internal.ImFormatString(buf, buf_size, fmt);
            return __ret;
        }

        public static string ImParseFormatFindStart(string format)
        {
            var __ret = __Internal.ImParseFormatFindStart(format);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static string ImParseFormatFindEnd(string format)
        {
            var __ret = __Internal.ImParseFormatFindEnd(format);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static string ImParseFormatTrimDecorations(string format, sbyte* buf, ulong buf_size)
        {
            var __ret = __Internal.ImParseFormatTrimDecorations(format, buf, buf_size);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static int ImParseFormatPrecision(string format, int default_value)
        {
            var __ret = __Internal.ImParseFormatPrecision(format, default_value);
            return __ret;
        }

        public static bool ImCharIsBlankA(sbyte c)
        {
            var __ret = __Internal.ImCharIsBlankA(c);
            return __ret;
        }

        public static bool ImCharIsBlankW(uint c)
        {
            var __ret = __Internal.ImCharIsBlankW(c);
            return __ret;
        }

        public static int ImTextStrToUtf8(sbyte* buf, int buf_size, ref ushort in_text, ref ushort in_text_end)
        {
            fixed (ushort* __in_text2 = &in_text)
            {
                var __arg2 = __in_text2;
                fixed (ushort* __in_text_end3 = &in_text_end)
                {
                    var __arg3 = __in_text_end3;
                    var __ret = __Internal.ImTextStrToUtf8(buf, buf_size, __arg2, __arg3);
                    return __ret;
                }
            }
        }

        public static int ImTextCharFromUtf8(ref uint out_char, string in_text, string in_text_end)
        {
            fixed (uint* __out_char0 = &out_char)
            {
                var __arg0 = __out_char0;
                var __ret = __Internal.ImTextCharFromUtf8(__arg0, in_text, in_text_end);
                return __ret;
            }
        }

        public static int ImTextStrFromUtf8(ref ushort buf, int buf_size, string in_text, string in_text_end, sbyte** in_remaining)
        {
            fixed (ushort* __buf0 = &buf)
            {
                var __arg0 = __buf0;
                var __ret = __Internal.ImTextStrFromUtf8(__arg0, buf_size, in_text, in_text_end, in_remaining);
                return __ret;
            }
        }

        public static int ImTextCountCharsFromUtf8(string in_text, string in_text_end)
        {
            var __ret = __Internal.ImTextCountCharsFromUtf8(in_text, in_text_end);
            return __ret;
        }

        public static int ImTextCountUtf8BytesFromChar(string in_text, string in_text_end)
        {
            var __ret = __Internal.ImTextCountUtf8BytesFromChar(in_text, in_text_end);
            return __ret;
        }

        public static int ImTextCountUtf8BytesFromStr(ref ushort in_text, ref ushort in_text_end)
        {
            fixed (ushort* __in_text0 = &in_text)
            {
                var __arg0 = __in_text0;
                fixed (ushort* __in_text_end1 = &in_text_end)
                {
                    var __arg1 = __in_text_end1;
                    var __ret = __Internal.ImTextCountUtf8BytesFromStr(__arg0, __arg1);
                    return __ret;
                }
            }
        }

        public static global::System.IntPtr ImFileOpen(string filename, string mode)
        {
            var __ret = __Internal.ImFileOpen(filename, mode);
            return __ret;
        }

        public static bool ImFileClose(global::System.IntPtr file)
        {
            var __ret = __Internal.ImFileClose(file);
            return __ret;
        }

        public static ulong ImFileGetSize(global::System.IntPtr file)
        {
            var __ret = __Internal.ImFileGetSize(file);
            return __ret;
        }

        public static ulong ImFileRead(global::System.IntPtr data, ulong size, ulong count, global::System.IntPtr file)
        {
            var __ret = __Internal.ImFileRead(data, size, count, file);
            return __ret;
        }

        public static ulong ImFileWrite(global::System.IntPtr data, ulong size, ulong count, global::System.IntPtr file)
        {
            var __ret = __Internal.ImFileWrite(data, size, count, file);
            return __ret;
        }

        public static global::System.IntPtr ImFileLoadToMemory(string filename, string mode, ref ulong out_file_size, int padding_bytes)
        {
            fixed (ulong* __out_file_size2 = &out_file_size)
            {
                var __arg2 = __out_file_size2;
                var __ret = __Internal.ImFileLoadToMemory(filename, mode, __arg2, padding_bytes);
                return __ret;
            }
        }

        public static float ImPowFloat(float x, float y)
        {
            var __ret = __Internal.ImPowFloat(x, y);
            return __ret;
        }

        public static double ImPowdouble(double x, double y)
        {
            var __ret = __Internal.ImPowdouble(x, y);
            return __ret;
        }

        public static void ImMin(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 lhs, global::DearImguiSharp.ImVec2 rhs)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(lhs, null))
                throw new global::System.ArgumentNullException("lhs", "Cannot be null because it is passed by value.");
            var __arg1 = lhs.__Instance;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is passed by value.");
            var __arg2 = rhs.__Instance;
            __Internal.ImMin(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2);
        }

        public static void ImMax(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 lhs, global::DearImguiSharp.ImVec2 rhs)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(lhs, null))
                throw new global::System.ArgumentNullException("lhs", "Cannot be null because it is passed by value.");
            var __arg1 = lhs.__Instance;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is passed by value.");
            var __arg2 = rhs.__Instance;
            __Internal.ImMax(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2);
        }

        public static void ImClamp(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 v, global::DearImguiSharp.ImVec2 mn, global::DearImguiSharp.ImVec2 mx)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is passed by value.");
            var __arg1 = v.__Instance;
            if (ReferenceEquals(mn, null))
                throw new global::System.ArgumentNullException("mn", "Cannot be null because it is passed by value.");
            var __arg2 = mn.__Instance;
            if (ReferenceEquals(mx, null))
                throw new global::System.ArgumentNullException("mx", "Cannot be null because it is passed by value.");
            var __arg3 = mx.__Instance;
            __Internal.ImClamp(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3);
        }

        public static void ImLerpVec2Float(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, float t)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg1 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg2 = b.__Instance;
            __Internal.ImLerpVec2Float(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, t);
        }

        public static void ImLerpVec2Vec2(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, global::DearImguiSharp.ImVec2 t)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg1 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg2 = b.__Instance;
            if (ReferenceEquals(t, null))
                throw new global::System.ArgumentNullException("t", "Cannot be null because it is passed by value.");
            var __arg3 = t.__Instance;
            __Internal.ImLerpVec2Vec2(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3);
        }

        public static void ImLerpVec4(global::DearImguiSharp.ImVec4 pOut, global::DearImguiSharp.ImVec4 a, global::DearImguiSharp.ImVec4 b, float t)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg1 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg2 = b.__Instance;
            __Internal.ImLerpVec4(__arg0, __arg1, __arg2, t);
        }

        public static float ImSaturate(float f)
        {
            var __ret = __Internal.ImSaturate(f);
            return __ret;
        }

        public static float ImLengthSqrVec2(global::DearImguiSharp.ImVec2 lhs)
        {
            if (ReferenceEquals(lhs, null))
                throw new global::System.ArgumentNullException("lhs", "Cannot be null because it is passed by value.");
            var __arg0 = lhs.__Instance;
            var __ret = __Internal.ImLengthSqrVec2(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0);
            return __ret;
        }

        public static float ImLengthSqrVec4(global::DearImguiSharp.ImVec4 lhs)
        {
            if (ReferenceEquals(lhs, null))
                throw new global::System.ArgumentNullException("lhs", "Cannot be null because it is passed by value.");
            var __arg0 = lhs.__Instance;
            var __ret = __Internal.ImLengthSqrVec4(__arg0);
            return __ret;
        }

        public static float ImInvLength(global::DearImguiSharp.ImVec2 lhs, float fail_value)
        {
            if (ReferenceEquals(lhs, null))
                throw new global::System.ArgumentNullException("lhs", "Cannot be null because it is passed by value.");
            var __arg0 = lhs.__Instance;
            var __ret = __Internal.ImInvLength(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, fail_value);
            return __ret;
        }

        public static float ImFloorFloat(float f)
        {
            var __ret = __Internal.ImFloorFloat(f);
            return __ret;
        }

        public static void ImFloorVec2(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 v)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is passed by value.");
            var __arg1 = v.__Instance;
            __Internal.ImFloorVec2(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
        }

        public static int ImModPositive(int a, int b)
        {
            var __ret = __Internal.ImModPositive(a, b);
            return __ret;
        }

        public static float ImDot(global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b)
        {
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg0 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg1 = b.__Instance;
            var __ret = __Internal.ImDot(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            return __ret;
        }

        public static void ImRotate(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 v, float cos_a, float sin_a)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is passed by value.");
            var __arg1 = v.__Instance;
            __Internal.ImRotate(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, cos_a, sin_a);
        }

        public static float ImLinearSweep(float current, float target, float speed)
        {
            var __ret = __Internal.ImLinearSweep(current, target, speed);
            return __ret;
        }

        public static void ImMul(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 lhs, global::DearImguiSharp.ImVec2 rhs)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(lhs, null))
                throw new global::System.ArgumentNullException("lhs", "Cannot be null because it is passed by value.");
            var __arg1 = lhs.__Instance;
            if (ReferenceEquals(rhs, null))
                throw new global::System.ArgumentNullException("rhs", "Cannot be null because it is passed by value.");
            var __arg2 = rhs.__Instance;
            __Internal.ImMul(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2);
        }

        public static void ImBezierCalc(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, global::DearImguiSharp.ImVec2 p4, float t)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg1 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg2 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg3 = p3.__Instance;
            if (ReferenceEquals(p4, null))
                throw new global::System.ArgumentNullException("p4", "Cannot be null because it is passed by value.");
            var __arg4 = p4.__Instance;
            __Internal.ImBezierCalc(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, t);
        }

        public static void ImBezierClosestPoint(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, global::DearImguiSharp.ImVec2 p4, global::DearImguiSharp.ImVec2 p, int num_segments)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg1 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg2 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg3 = p3.__Instance;
            if (ReferenceEquals(p4, null))
                throw new global::System.ArgumentNullException("p4", "Cannot be null because it is passed by value.");
            var __arg4 = p4.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is passed by value.");
            var __arg5 = p.__Instance;
            __Internal.ImBezierClosestPoint(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, *(global::DearImguiSharp.ImVec2.__Internal*) __arg5, num_segments);
        }

        public static void ImBezierClosestPointCasteljau(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 p1, global::DearImguiSharp.ImVec2 p2, global::DearImguiSharp.ImVec2 p3, global::DearImguiSharp.ImVec2 p4, global::DearImguiSharp.ImVec2 p, float tess_tol)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(p1, null))
                throw new global::System.ArgumentNullException("p1", "Cannot be null because it is passed by value.");
            var __arg1 = p1.__Instance;
            if (ReferenceEquals(p2, null))
                throw new global::System.ArgumentNullException("p2", "Cannot be null because it is passed by value.");
            var __arg2 = p2.__Instance;
            if (ReferenceEquals(p3, null))
                throw new global::System.ArgumentNullException("p3", "Cannot be null because it is passed by value.");
            var __arg3 = p3.__Instance;
            if (ReferenceEquals(p4, null))
                throw new global::System.ArgumentNullException("p4", "Cannot be null because it is passed by value.");
            var __arg4 = p4.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is passed by value.");
            var __arg5 = p.__Instance;
            __Internal.ImBezierClosestPointCasteljau(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, *(global::DearImguiSharp.ImVec2.__Internal*) __arg5, tess_tol);
        }

        public static void ImLineClosestPoint(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, global::DearImguiSharp.ImVec2 p)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg1 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg2 = b.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is passed by value.");
            var __arg3 = p.__Instance;
            __Internal.ImLineClosestPoint(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3);
        }

        public static bool ImTriangleContainsPoint(global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, global::DearImguiSharp.ImVec2 c, global::DearImguiSharp.ImVec2 p)
        {
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg0 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg1 = b.__Instance;
            if (ReferenceEquals(c, null))
                throw new global::System.ArgumentNullException("c", "Cannot be null because it is passed by value.");
            var __arg2 = c.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is passed by value.");
            var __arg3 = p.__Instance;
            var __ret = __Internal.ImTriangleContainsPoint(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3);
            return __ret;
        }

        public static void ImTriangleClosestPoint(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, global::DearImguiSharp.ImVec2 c, global::DearImguiSharp.ImVec2 p)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg1 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg2 = b.__Instance;
            if (ReferenceEquals(c, null))
                throw new global::System.ArgumentNullException("c", "Cannot be null because it is passed by value.");
            var __arg3 = c.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is passed by value.");
            var __arg4 = p.__Instance;
            __Internal.ImTriangleClosestPoint(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4);
        }

        public static void ImTriangleBarycentricCoords(global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, global::DearImguiSharp.ImVec2 c, global::DearImguiSharp.ImVec2 p, float out_u, float out_v, float out_w)
        {
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg0 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg1 = b.__Instance;
            if (ReferenceEquals(c, null))
                throw new global::System.ArgumentNullException("c", "Cannot be null because it is passed by value.");
            var __arg2 = c.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is passed by value.");
            var __arg3 = p.__Instance;
            __Internal.ImTriangleBarycentricCoords(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, out_u, out_v, out_w);
        }

        public static float ImTriangleArea(global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, global::DearImguiSharp.ImVec2 c)
        {
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg0 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg1 = b.__Instance;
            if (ReferenceEquals(c, null))
                throw new global::System.ArgumentNullException("c", "Cannot be null because it is passed by value.");
            var __arg2 = c.__Instance;
            var __ret = __Internal.ImTriangleArea(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2);
            return __ret;
        }

        public static int ImGetDirQuadrantFromDelta(float dx, float dy)
        {
            var __ret = __Internal.ImGetDirQuadrantFromDelta(dx, dy);
            return __ret;
        }

        public static global::DearImguiSharp.ImBoolVector ImBoolVectorImBoolVector()
        {
            var __ret = __Internal.ImBoolVectorImBoolVector();
            global::DearImguiSharp.ImBoolVector __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImBoolVector.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImBoolVector) global::DearImguiSharp.ImBoolVector.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImBoolVector.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImBoolVector_destroy(global::DearImguiSharp.ImBoolVector self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImBoolVector_destroy(__arg0);
        }

        public static void ImBoolVectorResize(global::DearImguiSharp.ImBoolVector self, int sz)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImBoolVectorResize(__arg0, sz);
        }

        public static void ImBoolVectorClear(global::DearImguiSharp.ImBoolVector self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImBoolVectorClear(__arg0);
        }

        public static bool ImBoolVectorGetBit(global::DearImguiSharp.ImBoolVector self, int n)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImBoolVectorGetBit(__arg0, n);
            return __ret;
        }

        public static void ImBoolVectorSetBit(global::DearImguiSharp.ImBoolVector self, int n, bool v)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImBoolVectorSetBit(__arg0, n, v);
        }

        public static global::DearImguiSharp.ImVec1 ImVec1ImVec1Nil()
        {
            var __ret = __Internal.ImVec1ImVec1Nil();
            global::DearImguiSharp.ImVec1 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVec1.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVec1) global::DearImguiSharp.ImVec1.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVec1.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImVec1_destroy(global::DearImguiSharp.ImVec1 self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImVec1_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImVec1 ImVec1ImVec1Float(float _x)
        {
            var __ret = __Internal.ImVec1ImVec1Float(_x);
            global::DearImguiSharp.ImVec1 __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVec1.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVec1) global::DearImguiSharp.ImVec1.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVec1.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImVec2ih ImVec2ihImVec2ihNil()
        {
            var __ret = __Internal.ImVec2ihImVec2ihNil();
            global::DearImguiSharp.ImVec2ih __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVec2ih.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVec2ih) global::DearImguiSharp.ImVec2ih.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVec2ih.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImVec2ih_destroy(global::DearImguiSharp.ImVec2ih self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImVec2ih_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImVec2ih ImVec2ihImVec2ihshort(short _x, short _y)
        {
            var __ret = __Internal.ImVec2ihImVec2ihshort(_x, _y);
            global::DearImguiSharp.ImVec2ih __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVec2ih.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVec2ih) global::DearImguiSharp.ImVec2ih.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVec2ih.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImRect ImRectImRectNil()
        {
            var __ret = __Internal.ImRectImRectNil();
            global::DearImguiSharp.ImRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImRect) global::DearImguiSharp.ImRect.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImRect.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImRect_destroy(global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRect_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImRect ImRectImRectVec2(global::DearImguiSharp.ImVec2 min, global::DearImguiSharp.ImVec2 max)
        {
            if (ReferenceEquals(min, null))
                throw new global::System.ArgumentNullException("min", "Cannot be null because it is passed by value.");
            var __arg0 = min.__Instance;
            if (ReferenceEquals(max, null))
                throw new global::System.ArgumentNullException("max", "Cannot be null because it is passed by value.");
            var __arg1 = max.__Instance;
            var __ret = __Internal.ImRectImRectVec2(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            global::DearImguiSharp.ImRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImRect) global::DearImguiSharp.ImRect.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImRect.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImRect ImRectImRectVec4(global::DearImguiSharp.ImVec4 v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is passed by value.");
            var __arg0 = v.__Instance;
            var __ret = __Internal.ImRectImRectVec4(__arg0);
            global::DearImguiSharp.ImRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImRect) global::DearImguiSharp.ImRect.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImRect.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImRect ImRectImRectFloat(float x1, float y1, float x2, float y2)
        {
            var __ret = __Internal.ImRectImRectFloat(x1, y1, x2, y2);
            global::DearImguiSharp.ImRect __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImRect.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImRect) global::DearImguiSharp.ImRect.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImRect.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImRectGetCenter(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectGetCenter(__arg0, __arg1);
        }

        public static void ImRectGetSize(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectGetSize(__arg0, __arg1);
        }

        public static float ImRectGetWidth(global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImRectGetWidth(__arg0);
            return __ret;
        }

        public static float ImRectGetHeight(global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImRectGetHeight(__arg0);
            return __ret;
        }

        public static void ImRectGetTL(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectGetTL(__arg0, __arg1);
        }

        public static void ImRectGetTR(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectGetTR(__arg0, __arg1);
        }

        public static void ImRectGetBL(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectGetBL(__arg0, __arg1);
        }

        public static void ImRectGetBR(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectGetBR(__arg0, __arg1);
        }

        public static bool ImRectContainsVec2(global::DearImguiSharp.ImRect self, global::DearImguiSharp.ImVec2 p)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is passed by value.");
            var __arg1 = p.__Instance;
            var __ret = __Internal.ImRectContainsVec2(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            return __ret;
        }

        public static bool ImRectContainsRect(global::DearImguiSharp.ImRect self, global::DearImguiSharp.ImRect r)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is passed by value.");
            var __arg1 = r.__Instance;
            var __ret = __Internal.ImRectContainsRect(__arg0, __arg1);
            return __ret;
        }

        public static bool ImRectOverlaps(global::DearImguiSharp.ImRect self, global::DearImguiSharp.ImRect r)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is passed by value.");
            var __arg1 = r.__Instance;
            var __ret = __Internal.ImRectOverlaps(__arg0, __arg1);
            return __ret;
        }

        public static void ImRectAddVec2(global::DearImguiSharp.ImRect self, global::DearImguiSharp.ImVec2 p)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(p, null))
                throw new global::System.ArgumentNullException("p", "Cannot be null because it is passed by value.");
            var __arg1 = p.__Instance;
            __Internal.ImRectAddVec2(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
        }

        public static void ImRectAddRect(global::DearImguiSharp.ImRect self, global::DearImguiSharp.ImRect r)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is passed by value.");
            var __arg1 = r.__Instance;
            __Internal.ImRectAddRect(__arg0, __arg1);
        }

        public static void ImRectExpandFloat(global::DearImguiSharp.ImRect self, float amount)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectExpandFloat(__arg0, amount);
        }

        public static void ImRectExpandVec2(global::DearImguiSharp.ImRect self, global::DearImguiSharp.ImVec2 amount)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(amount, null))
                throw new global::System.ArgumentNullException("amount", "Cannot be null because it is passed by value.");
            var __arg1 = amount.__Instance;
            __Internal.ImRectExpandVec2(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
        }

        public static void ImRectTranslate(global::DearImguiSharp.ImRect self, global::DearImguiSharp.ImVec2 d)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(d, null))
                throw new global::System.ArgumentNullException("d", "Cannot be null because it is passed by value.");
            var __arg1 = d.__Instance;
            __Internal.ImRectTranslate(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
        }

        public static void ImRectTranslateX(global::DearImguiSharp.ImRect self, float dx)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectTranslateX(__arg0, dx);
        }

        public static void ImRectTranslateY(global::DearImguiSharp.ImRect self, float dy)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectTranslateY(__arg0, dy);
        }

        public static void ImRectClipWith(global::DearImguiSharp.ImRect self, global::DearImguiSharp.ImRect r)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is passed by value.");
            var __arg1 = r.__Instance;
            __Internal.ImRectClipWith(__arg0, __arg1);
        }

        public static void ImRectClipWithFull(global::DearImguiSharp.ImRect self, global::DearImguiSharp.ImRect r)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(r, null))
                throw new global::System.ArgumentNullException("r", "Cannot be null because it is passed by value.");
            var __arg1 = r.__Instance;
            __Internal.ImRectClipWithFull(__arg0, __arg1);
        }

        public static void ImRectFloor(global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImRectFloor(__arg0);
        }

        public static bool ImRectIsInverted(global::DearImguiSharp.ImRect self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImRectIsInverted(__arg0);
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiStyleMod ImGuiStyleModImGuiStyleModInt(int idx, int v)
        {
            var __ret = __Internal.ImGuiStyleModImGuiStyleModInt(idx, v);
            global::DearImguiSharp.ImGuiStyleMod __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiStyleMod.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiStyleMod) global::DearImguiSharp.ImGuiStyleMod.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiStyleMod.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiStyleMod_destroy(global::DearImguiSharp.ImGuiStyleMod self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiStyleMod_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiStyleMod ImGuiStyleModImGuiStyleModFloat(int idx, float v)
        {
            var __ret = __Internal.ImGuiStyleModImGuiStyleModFloat(idx, v);
            global::DearImguiSharp.ImGuiStyleMod __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiStyleMod.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiStyleMod) global::DearImguiSharp.ImGuiStyleMod.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiStyleMod.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiStyleMod ImGuiStyleModImGuiStyleModVec2(int idx, global::DearImguiSharp.ImVec2 v)
        {
            if (ReferenceEquals(v, null))
                throw new global::System.ArgumentNullException("v", "Cannot be null because it is passed by value.");
            var __arg1 = v.__Instance;
            var __ret = __Internal.ImGuiStyleModImGuiStyleModVec2(idx, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            global::DearImguiSharp.ImGuiStyleMod __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiStyleMod.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiStyleMod) global::DearImguiSharp.ImGuiStyleMod.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiStyleMod.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiMenuColumns ImGuiMenuColumnsImGuiMenuColumns()
        {
            var __ret = __Internal.ImGuiMenuColumnsImGuiMenuColumns();
            global::DearImguiSharp.ImGuiMenuColumns __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiMenuColumns.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiMenuColumns) global::DearImguiSharp.ImGuiMenuColumns.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiMenuColumns.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiMenuColumns_destroy(global::DearImguiSharp.ImGuiMenuColumns self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiMenuColumns_destroy(__arg0);
        }

        public static void ImGuiMenuColumnsUpdate(global::DearImguiSharp.ImGuiMenuColumns self, int count, float spacing, bool clear)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiMenuColumnsUpdate(__arg0, count, spacing, clear);
        }

        public static float ImGuiMenuColumnsDeclColumns(global::DearImguiSharp.ImGuiMenuColumns self, float w0, float w1, float w2)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiMenuColumnsDeclColumns(__arg0, w0, w1, w2);
            return __ret;
        }

        public static float ImGuiMenuColumnsCalcExtraSpace(global::DearImguiSharp.ImGuiMenuColumns self, float avail_w)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiMenuColumnsCalcExtraSpace(__arg0, avail_w);
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiInputTextState ImGuiInputTextStateImGuiInputTextState()
        {
            var __ret = __Internal.ImGuiInputTextStateImGuiInputTextState();
            global::DearImguiSharp.ImGuiInputTextState __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiInputTextState.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiInputTextState) global::DearImguiSharp.ImGuiInputTextState.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiInputTextState.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiInputTextState_destroy(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextState_destroy(__arg0);
        }

        public static void ImGuiInputTextStateClearText(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextStateClearText(__arg0);
        }

        public static void ImGuiInputTextStateClearFreeMemory(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextStateClearFreeMemory(__arg0);
        }

        public static int ImGuiInputTextStateGetUndoAvailCount(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiInputTextStateGetUndoAvailCount(__arg0);
            return __ret;
        }

        public static int ImGuiInputTextStateGetRedoAvailCount(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiInputTextStateGetRedoAvailCount(__arg0);
            return __ret;
        }

        public static void ImGuiInputTextStateOnKeyPressed(global::DearImguiSharp.ImGuiInputTextState self, int key)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextStateOnKeyPressed(__arg0, key);
        }

        public static void ImGuiInputTextStateCursorAnimReset(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextStateCursorAnimReset(__arg0);
        }

        public static void ImGuiInputTextStateCursorClamp(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextStateCursorClamp(__arg0);
        }

        public static bool ImGuiInputTextStateHasSelection(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiInputTextStateHasSelection(__arg0);
            return __ret;
        }

        public static void ImGuiInputTextStateClearSelection(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextStateClearSelection(__arg0);
        }

        public static void ImGuiInputTextStateSelectAll(global::DearImguiSharp.ImGuiInputTextState self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiInputTextStateSelectAll(__arg0);
        }

        public static global::DearImguiSharp.ImGuiWindowSettings ImGuiWindowSettingsImGuiWindowSettings()
        {
            var __ret = __Internal.ImGuiWindowSettingsImGuiWindowSettings();
            global::DearImguiSharp.ImGuiWindowSettings __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindowSettings) global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindowSettings.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiWindowSettings_destroy(global::DearImguiSharp.ImGuiWindowSettings self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiWindowSettings_destroy(__arg0);
        }

        public static sbyte* ImGuiWindowSettingsGetName(global::DearImguiSharp.ImGuiWindowSettings self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowSettingsGetName(__arg0);
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiSettingsHandler ImGuiSettingsHandlerImGuiSettingsHandler()
        {
            var __ret = __Internal.ImGuiSettingsHandlerImGuiSettingsHandler();
            global::DearImguiSharp.ImGuiSettingsHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiSettingsHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiSettingsHandler) global::DearImguiSharp.ImGuiSettingsHandler.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiSettingsHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiSettingsHandler_destroy(global::DearImguiSharp.ImGuiSettingsHandler self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiSettingsHandler_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiPopupData ImGuiPopupDataImGuiPopupData()
        {
            var __ret = __Internal.ImGuiPopupDataImGuiPopupData();
            global::DearImguiSharp.ImGuiPopupData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiPopupData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiPopupData) global::DearImguiSharp.ImGuiPopupData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiPopupData.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiPopupData_destroy(global::DearImguiSharp.ImGuiPopupData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiPopupData_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiColumnData ImGuiColumnDataImGuiColumnData()
        {
            var __ret = __Internal.ImGuiColumnDataImGuiColumnData();
            global::DearImguiSharp.ImGuiColumnData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiColumnData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiColumnData) global::DearImguiSharp.ImGuiColumnData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiColumnData.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiColumnData_destroy(global::DearImguiSharp.ImGuiColumnData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiColumnData_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiColumns ImGuiColumnsImGuiColumns()
        {
            var __ret = __Internal.ImGuiColumnsImGuiColumns();
            global::DearImguiSharp.ImGuiColumns __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiColumns.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiColumns) global::DearImguiSharp.ImGuiColumns.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiColumns.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiColumns_destroy(global::DearImguiSharp.ImGuiColumns self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiColumns_destroy(__arg0);
        }

        public static void ImGuiColumnsClear(global::DearImguiSharp.ImGuiColumns self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiColumnsClear(__arg0);
        }

        public static global::DearImguiSharp.ImDrawListSharedData ImDrawListSharedDataImDrawListSharedData()
        {
            var __ret = __Internal.ImDrawListSharedDataImDrawListSharedData();
            global::DearImguiSharp.ImDrawListSharedData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawListSharedData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawListSharedData) global::DearImguiSharp.ImDrawListSharedData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawListSharedData.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImDrawListSharedData_destroy(global::DearImguiSharp.ImDrawListSharedData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListSharedData_destroy(__arg0);
        }

        public static void ImDrawListSharedDataSetCircleSegmentMaxError(global::DearImguiSharp.ImDrawListSharedData self, float max_error)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawListSharedDataSetCircleSegmentMaxError(__arg0, max_error);
        }

        public static void ImDrawDataBuilderClear(global::DearImguiSharp.ImDrawDataBuilder self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawDataBuilderClear(__arg0);
        }

        public static void ImDrawDataBuilderClearFreeMemory(global::DearImguiSharp.ImDrawDataBuilder self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawDataBuilderClearFreeMemory(__arg0);
        }

        public static void ImDrawDataBuilderFlattenIntoSingleLayer(global::DearImguiSharp.ImDrawDataBuilder self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImDrawDataBuilderFlattenIntoSingleLayer(__arg0);
        }

        public static global::DearImguiSharp.ImGuiNavMoveResult ImGuiNavMoveResultImGuiNavMoveResult()
        {
            var __ret = __Internal.ImGuiNavMoveResultImGuiNavMoveResult();
            global::DearImguiSharp.ImGuiNavMoveResult __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiNavMoveResult.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiNavMoveResult) global::DearImguiSharp.ImGuiNavMoveResult.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiNavMoveResult.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiNavMoveResult_destroy(global::DearImguiSharp.ImGuiNavMoveResult self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiNavMoveResult_destroy(__arg0);
        }

        public static void ImGuiNavMoveResultClear(global::DearImguiSharp.ImGuiNavMoveResult self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiNavMoveResultClear(__arg0);
        }

        public static global::DearImguiSharp.ImGuiNextWindowData ImGuiNextWindowDataImGuiNextWindowData()
        {
            var __ret = __Internal.ImGuiNextWindowDataImGuiNextWindowData();
            global::DearImguiSharp.ImGuiNextWindowData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiNextWindowData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiNextWindowData) global::DearImguiSharp.ImGuiNextWindowData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiNextWindowData.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiNextWindowData_destroy(global::DearImguiSharp.ImGuiNextWindowData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiNextWindowData_destroy(__arg0);
        }

        public static void ImGuiNextWindowDataClearFlags(global::DearImguiSharp.ImGuiNextWindowData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiNextWindowDataClearFlags(__arg0);
        }

        public static global::DearImguiSharp.ImGuiNextItemData ImGuiNextItemDataImGuiNextItemData()
        {
            var __ret = __Internal.ImGuiNextItemDataImGuiNextItemData();
            global::DearImguiSharp.ImGuiNextItemData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiNextItemData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiNextItemData) global::DearImguiSharp.ImGuiNextItemData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiNextItemData.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiNextItemData_destroy(global::DearImguiSharp.ImGuiNextItemData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiNextItemData_destroy(__arg0);
        }

        public static void ImGuiNextItemDataClearFlags(global::DearImguiSharp.ImGuiNextItemData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiNextItemDataClearFlags(__arg0);
        }

        public static global::DearImguiSharp.ImGuiPtrOrIndex ImGuiPtrOrIndexImGuiPtrOrIndexPtr(global::System.IntPtr ptr)
        {
            var __ret = __Internal.ImGuiPtrOrIndexImGuiPtrOrIndexPtr(ptr);
            global::DearImguiSharp.ImGuiPtrOrIndex __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiPtrOrIndex.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiPtrOrIndex) global::DearImguiSharp.ImGuiPtrOrIndex.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiPtrOrIndex.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiPtrOrIndex_destroy(global::DearImguiSharp.ImGuiPtrOrIndex self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiPtrOrIndex_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiPtrOrIndex ImGuiPtrOrIndexImGuiPtrOrIndexInt(int index)
        {
            var __ret = __Internal.ImGuiPtrOrIndexImGuiPtrOrIndexInt(index);
            global::DearImguiSharp.ImGuiPtrOrIndex __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiPtrOrIndex.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiPtrOrIndex) global::DearImguiSharp.ImGuiPtrOrIndex.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiPtrOrIndex.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiContext ImGuiContextImGuiContext(global::DearImguiSharp.ImFontAtlas shared_font_atlas)
        {
            var __arg0 = ReferenceEquals(shared_font_atlas, null) ? global::System.IntPtr.Zero : shared_font_atlas.__Instance;
            var __ret = __Internal.ImGuiContextImGuiContext(__arg0);
            global::DearImguiSharp.ImGuiContext __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiContext.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiContext) global::DearImguiSharp.ImGuiContext.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiContext.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiContext_destroy(global::DearImguiSharp.ImGuiContext self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiContext_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiWindowTempData ImGuiWindowTempDataImGuiWindowTempData()
        {
            var __ret = __Internal.ImGuiWindowTempDataImGuiWindowTempData();
            global::DearImguiSharp.ImGuiWindowTempData __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindowTempData.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindowTempData) global::DearImguiSharp.ImGuiWindowTempData.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindowTempData.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiWindowTempData_destroy(global::DearImguiSharp.ImGuiWindowTempData self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiWindowTempData_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiWindow ImGuiWindowImGuiWindow(global::DearImguiSharp.ImGuiContext context, string name)
        {
            var __arg0 = ReferenceEquals(context, null) ? global::System.IntPtr.Zero : context.__Instance;
            var __ret = __Internal.ImGuiWindowImGuiWindow(__arg0, name);
            global::DearImguiSharp.ImGuiWindow __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiWindow_destroy(global::DearImguiSharp.ImGuiWindow self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiWindow_destroy(__arg0);
        }

        public static uint ImGuiWindowGetIDStr(global::DearImguiSharp.ImGuiWindow self, string str, string str_end)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowGetIDStr(__arg0, str, str_end);
            return __ret;
        }

        public static uint ImGuiWindowGetIDPtr(global::DearImguiSharp.ImGuiWindow self, global::System.IntPtr ptr)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowGetIDPtr(__arg0, ptr);
            return __ret;
        }

        public static uint ImGuiWindowGetIDInt(global::DearImguiSharp.ImGuiWindow self, int n)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowGetIDInt(__arg0, n);
            return __ret;
        }

        public static uint ImGuiWindowGetIDNoKeepAliveStr(global::DearImguiSharp.ImGuiWindow self, string str, string str_end)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowGetIDNoKeepAliveStr(__arg0, str, str_end);
            return __ret;
        }

        public static uint ImGuiWindowGetIDNoKeepAlivePtr(global::DearImguiSharp.ImGuiWindow self, global::System.IntPtr ptr)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowGetIDNoKeepAlivePtr(__arg0, ptr);
            return __ret;
        }

        public static uint ImGuiWindowGetIDNoKeepAliveInt(global::DearImguiSharp.ImGuiWindow self, int n)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowGetIDNoKeepAliveInt(__arg0, n);
            return __ret;
        }

        public static uint ImGuiWindowGetIDFromRectangle(global::DearImguiSharp.ImGuiWindow self, global::DearImguiSharp.ImRect r_abs)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            if (ReferenceEquals(r_abs, null))
                throw new global::System.ArgumentNullException("r_abs", "Cannot be null because it is passed by value.");
            var __arg1 = r_abs.__Instance;
            var __ret = __Internal.ImGuiWindowGetIDFromRectangle(__arg0, __arg1);
            return __ret;
        }

        public static void ImGuiWindowRect(global::DearImguiSharp.ImRect pOut, global::DearImguiSharp.ImGuiWindow self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiWindowRect(__arg0, __arg1);
        }

        public static float ImGuiWindowCalcFontSize(global::DearImguiSharp.ImGuiWindow self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowCalcFontSize(__arg0);
            return __ret;
        }

        public static float ImGuiWindowTitleBarHeight(global::DearImguiSharp.ImGuiWindow self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowTitleBarHeight(__arg0);
            return __ret;
        }

        public static void ImGuiWindowTitleBarRect(global::DearImguiSharp.ImRect pOut, global::DearImguiSharp.ImGuiWindow self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiWindowTitleBarRect(__arg0, __arg1);
        }

        public static float ImGuiWindowMenuBarHeight(global::DearImguiSharp.ImGuiWindow self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __ret = __Internal.ImGuiWindowMenuBarHeight(__arg0);
            return __ret;
        }

        public static void ImGuiWindowMenuBarRect(global::DearImguiSharp.ImRect pOut, global::DearImguiSharp.ImGuiWindow self)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiWindowMenuBarRect(__arg0, __arg1);
        }

        public static global::DearImguiSharp.ImGuiItemHoveredDataBackup ImGuiItemHoveredDataBackupImGuiItemHoveredDataBackup()
        {
            var __ret = __Internal.ImGuiItemHoveredDataBackupImGuiItemHoveredDataBackup();
            global::DearImguiSharp.ImGuiItemHoveredDataBackup __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiItemHoveredDataBackup.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiItemHoveredDataBackup) global::DearImguiSharp.ImGuiItemHoveredDataBackup.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiItemHoveredDataBackup.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiItemHoveredDataBackup_destroy(global::DearImguiSharp.ImGuiItemHoveredDataBackup self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiItemHoveredDataBackup_destroy(__arg0);
        }

        public static void ImGuiItemHoveredDataBackupBackup(global::DearImguiSharp.ImGuiItemHoveredDataBackup self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiItemHoveredDataBackupBackup(__arg0);
        }

        public static void ImGuiItemHoveredDataBackupRestore(global::DearImguiSharp.ImGuiItemHoveredDataBackup self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiItemHoveredDataBackupRestore(__arg0);
        }

        public static global::DearImguiSharp.ImGuiTabItem ImGuiTabItemImGuiTabItem()
        {
            var __ret = __Internal.ImGuiTabItemImGuiTabItem();
            global::DearImguiSharp.ImGuiTabItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiTabItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiTabItem) global::DearImguiSharp.ImGuiTabItem.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiTabItem.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiTabItem_destroy(global::DearImguiSharp.ImGuiTabItem self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTabItem_destroy(__arg0);
        }

        public static global::DearImguiSharp.ImGuiTabBar ImGuiTabBarImGuiTabBar()
        {
            var __ret = __Internal.ImGuiTabBarImGuiTabBar();
            global::DearImguiSharp.ImGuiTabBar __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiTabBar.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiTabBar) global::DearImguiSharp.ImGuiTabBar.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiTabBar.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImGuiTabBar_destroy(global::DearImguiSharp.ImGuiTabBar self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImGuiTabBar_destroy(__arg0);
        }

        public static int ImGuiTabBarGetTabOrder(global::DearImguiSharp.ImGuiTabBar self, global::DearImguiSharp.ImGuiTabItem tab)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(tab, null) ? global::System.IntPtr.Zero : tab.__Instance;
            var __ret = __Internal.ImGuiTabBarGetTabOrder(__arg0, __arg1);
            return __ret;
        }

        public static string ImGuiTabBarGetTabName(global::DearImguiSharp.ImGuiTabBar self, global::DearImguiSharp.ImGuiTabItem tab)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            var __arg1 = ReferenceEquals(tab, null) ? global::System.IntPtr.Zero : tab.__Instance;
            var __ret = __Internal.ImGuiTabBarGetTabName(__arg0, __arg1);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static global::DearImguiSharp.ImGuiWindow GetCurrentWindowRead()
        {
            var __ret = __Internal.GetCurrentWindowRead();
            global::DearImguiSharp.ImGuiWindow __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiWindow GetCurrentWindow()
        {
            var __ret = __Internal.GetCurrentWindow();
            global::DearImguiSharp.ImGuiWindow __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiWindow FindWindowByID(uint id)
        {
            var __ret = __Internal.FindWindowByID(id);
            global::DearImguiSharp.ImGuiWindow __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiWindow FindWindowByName(string name)
        {
            var __ret = __Internal.FindWindowByName(name);
            global::DearImguiSharp.ImGuiWindow __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(__ret);
            return __result0;
        }

        public static void UpdateWindowParentAndRootLinks(global::DearImguiSharp.ImGuiWindow window, int flags, global::DearImguiSharp.ImGuiWindow parent_window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __arg2 = ReferenceEquals(parent_window, null) ? global::System.IntPtr.Zero : parent_window.__Instance;
            __Internal.UpdateWindowParentAndRootLinks(__arg0, flags, __arg2);
        }

        public static void CalcWindowExpectedSize(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.CalcWindowExpectedSize(__arg0, __arg1);
        }

        public static bool IsWindowChildOf(global::DearImguiSharp.ImGuiWindow window, global::DearImguiSharp.ImGuiWindow potential_parent)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __arg1 = ReferenceEquals(potential_parent, null) ? global::System.IntPtr.Zero : potential_parent.__Instance;
            var __ret = __Internal.IsWindowChildOf(__arg0, __arg1);
            return __ret;
        }

        public static bool IsWindowNavFocusable(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.IsWindowNavFocusable(__arg0);
            return __ret;
        }

        public static void GetWindowAllowedExtentRect(global::DearImguiSharp.ImRect pOut, global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.GetWindowAllowedExtentRect(__arg0, __arg1);
        }

        public static void SetWindowPosWindowPtr(global::DearImguiSharp.ImGuiWindow window, global::DearImguiSharp.ImVec2 pos, int cond)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            __Internal.SetWindowPosWindowPtr(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, cond);
        }

        public static void SetWindowSizeWindowPtr(global::DearImguiSharp.ImGuiWindow window, global::DearImguiSharp.ImVec2 size, int cond)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            __Internal.SetWindowSizeWindowPtr(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, cond);
        }

        public static void SetWindowCollapsedWindowPtr(global::DearImguiSharp.ImGuiWindow window, bool collapsed, int cond)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.SetWindowCollapsedWindowPtr(__arg0, collapsed, cond);
        }

        public static void FocusWindow(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.FocusWindow(__arg0);
        }

        public static void FocusTopMostWindowUnderOne(global::DearImguiSharp.ImGuiWindow under_this_window, global::DearImguiSharp.ImGuiWindow ignore_window)
        {
            var __arg0 = ReferenceEquals(under_this_window, null) ? global::System.IntPtr.Zero : under_this_window.__Instance;
            var __arg1 = ReferenceEquals(ignore_window, null) ? global::System.IntPtr.Zero : ignore_window.__Instance;
            __Internal.FocusTopMostWindowUnderOne(__arg0, __arg1);
        }

        public static void BringWindowToFocusFront(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.BringWindowToFocusFront(__arg0);
        }

        public static void BringWindowToDisplayFront(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.BringWindowToDisplayFront(__arg0);
        }

        public static void BringWindowToDisplayBack(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.BringWindowToDisplayBack(__arg0);
        }

        public static void SetCurrentFont(global::DearImguiSharp.ImFont font)
        {
            var __arg0 = ReferenceEquals(font, null) ? global::System.IntPtr.Zero : font.__Instance;
            __Internal.SetCurrentFont(__arg0);
        }

        public static global::DearImguiSharp.ImFont GetDefaultFont()
        {
            var __ret = __Internal.GetDefaultFont();
            global::DearImguiSharp.ImFont __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImFont.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImFont) global::DearImguiSharp.ImFont.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImFont.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImDrawList GetForegroundDrawListWindowPtr(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.GetForegroundDrawListWindowPtr(__arg0);
            global::DearImguiSharp.ImDrawList __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImDrawList.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImDrawList) global::DearImguiSharp.ImDrawList.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImDrawList.__CreateInstance(__ret);
            return __result0;
        }

        public static void Initialize(global::DearImguiSharp.ImGuiContext context)
        {
            var __arg0 = ReferenceEquals(context, null) ? global::System.IntPtr.Zero : context.__Instance;
            __Internal.Initialize(__arg0);
        }

        public static void Shutdown(global::DearImguiSharp.ImGuiContext context)
        {
            var __arg0 = ReferenceEquals(context, null) ? global::System.IntPtr.Zero : context.__Instance;
            __Internal.Shutdown(__arg0);
        }

        public static void UpdateHoveredWindowAndCaptureFlags()
        {
            __Internal.UpdateHoveredWindowAndCaptureFlags();
        }

        public static void StartMouseMovingWindow(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.StartMouseMovingWindow(__arg0);
        }

        public static void UpdateMouseMovingWindowNewFrame()
        {
            __Internal.UpdateMouseMovingWindowNewFrame();
        }

        public static void UpdateMouseMovingWindowEndFrame()
        {
            __Internal.UpdateMouseMovingWindowEndFrame();
        }

        public static void MarkIniSettingsDirtyNil()
        {
            __Internal.MarkIniSettingsDirtyNil();
        }

        public static void MarkIniSettingsDirtyWindowPtr(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.MarkIniSettingsDirtyWindowPtr(__arg0);
        }

        public static global::DearImguiSharp.ImGuiWindowSettings CreateNewWindowSettings(string name)
        {
            var __ret = __Internal.CreateNewWindowSettings(name);
            global::DearImguiSharp.ImGuiWindowSettings __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindowSettings) global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindowSettings.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiWindowSettings FindWindowSettings(uint id)
        {
            var __ret = __Internal.FindWindowSettings(id);
            global::DearImguiSharp.ImGuiWindowSettings __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindowSettings) global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindowSettings.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiWindowSettings FindOrCreateWindowSettings(string name)
        {
            var __ret = __Internal.FindOrCreateWindowSettings(name);
            global::DearImguiSharp.ImGuiWindowSettings __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindowSettings) global::DearImguiSharp.ImGuiWindowSettings.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindowSettings.__CreateInstance(__ret);
            return __result0;
        }

        public static global::DearImguiSharp.ImGuiSettingsHandler FindSettingsHandler(string type_name)
        {
            var __ret = __Internal.FindSettingsHandler(type_name);
            global::DearImguiSharp.ImGuiSettingsHandler __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiSettingsHandler.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiSettingsHandler) global::DearImguiSharp.ImGuiSettingsHandler.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiSettingsHandler.__CreateInstance(__ret);
            return __result0;
        }

        public static void SetScrollXWindowPtr(global::DearImguiSharp.ImGuiWindow window, float new_scroll_x)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.SetScrollXWindowPtr(__arg0, new_scroll_x);
        }

        public static void SetScrollYWindowPtr(global::DearImguiSharp.ImGuiWindow window, float new_scroll_y)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.SetScrollYWindowPtr(__arg0, new_scroll_y);
        }

        public static void SetScrollFromPosXWindowPtr(global::DearImguiSharp.ImGuiWindow window, float local_x, float center_x_ratio)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.SetScrollFromPosXWindowPtr(__arg0, local_x, center_x_ratio);
        }

        public static void SetScrollFromPosYWindowPtr(global::DearImguiSharp.ImGuiWindow window, float local_y, float center_y_ratio)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.SetScrollFromPosYWindowPtr(__arg0, local_y, center_y_ratio);
        }

        public static void ScrollToBringRectIntoView(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImGuiWindow window, global::DearImguiSharp.ImRect item_rect)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            if (ReferenceEquals(item_rect, null))
                throw new global::System.ArgumentNullException("item_rect", "Cannot be null because it is passed by value.");
            var __arg2 = item_rect.__Instance;
            __Internal.ScrollToBringRectIntoView(__arg0, __arg1, __arg2);
        }

        public static uint GetItemID()
        {
            var __ret = __Internal.GetItemID();
            return __ret;
        }

        public static int GetItemStatusFlags()
        {
            var __ret = __Internal.GetItemStatusFlags();
            return __ret;
        }

        public static uint GetActiveID()
        {
            var __ret = __Internal.GetActiveID();
            return __ret;
        }

        public static uint GetFocusID()
        {
            var __ret = __Internal.GetFocusID();
            return __ret;
        }

        public static void SetActiveID(uint id, global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg1 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.SetActiveID(id, __arg1);
        }

        public static void SetFocusID(uint id, global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg1 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.SetFocusID(id, __arg1);
        }

        public static void ClearActiveID()
        {
            __Internal.ClearActiveID();
        }

        public static uint GetHoveredID()
        {
            var __ret = __Internal.GetHoveredID();
            return __ret;
        }

        public static void SetHoveredID(uint id)
        {
            __Internal.SetHoveredID(id);
        }

        public static void KeepAliveID(uint id)
        {
            __Internal.KeepAliveID(id);
        }

        public static void MarkItemEdited(uint id)
        {
            __Internal.MarkItemEdited(id);
        }

        public static void PushOverrideID(uint id)
        {
            __Internal.PushOverrideID(id);
        }

        public static void ItemSizeVec2(global::DearImguiSharp.ImVec2 size, float text_baseline_y)
        {
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg0 = size.__Instance;
            __Internal.ItemSizeVec2(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, text_baseline_y);
        }

        public static void ItemSizeRect(global::DearImguiSharp.ImRect bb, float text_baseline_y)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            __Internal.ItemSizeRect(__arg0, text_baseline_y);
        }

        public static bool ItemAdd(global::DearImguiSharp.ImRect bb, uint id, global::DearImguiSharp.ImRect nav_bb)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            var __arg2 = ReferenceEquals(nav_bb, null) ? global::System.IntPtr.Zero : nav_bb.__Instance;
            var __ret = __Internal.ItemAdd(__arg0, id, __arg2);
            return __ret;
        }

        public static bool ItemHoverable(global::DearImguiSharp.ImRect bb, uint id)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            var __ret = __Internal.ItemHoverable(__arg0, id);
            return __ret;
        }

        public static bool IsClippedEx(global::DearImguiSharp.ImRect bb, uint id, bool clip_even_when_logged)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            var __ret = __Internal.IsClippedEx(__arg0, id, clip_even_when_logged);
            return __ret;
        }

        public static bool FocusableItemRegister(global::DearImguiSharp.ImGuiWindow window, uint id)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.FocusableItemRegister(__arg0, id);
            return __ret;
        }

        public static void FocusableItemUnregister(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.FocusableItemUnregister(__arg0);
        }

        public static void CalcItemSize(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 size, float default_w, float default_h)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg1 = size.__Instance;
            __Internal.CalcItemSize(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, default_w, default_h);
        }

        public static float CalcWrapWidthForPos(global::DearImguiSharp.ImVec2 pos, float wrap_pos_x)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg0 = pos.__Instance;
            var __ret = __Internal.CalcWrapWidthForPos(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, wrap_pos_x);
            return __ret;
        }

        public static void PushMultiItemsWidths(int components, float width_full)
        {
            __Internal.PushMultiItemsWidths(components, width_full);
        }

        public static void PushItemFlag(int option, bool enabled)
        {
            __Internal.PushItemFlag(option, enabled);
        }

        public static void PopItemFlag()
        {
            __Internal.PopItemFlag();
        }

        public static bool IsItemToggledSelection()
        {
            var __ret = __Internal.IsItemToggledSelection();
            return __ret;
        }

        public static void GetContentRegionMaxAbs(global::DearImguiSharp.ImVec2 pOut)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetContentRegionMaxAbs(__arg0);
        }

        public static void ShrinkWidths(global::DearImguiSharp.ImGuiShrinkWidthItem items, int count, float width_excess)
        {
            var __arg0 = ReferenceEquals(items, null) ? global::System.IntPtr.Zero : items.__Instance;
            __Internal.ShrinkWidths(__arg0, count, width_excess);
        }

        public static void LogBegin(global::DearImguiSharp.ImGuiLogType type, int auto_open_depth)
        {
            __Internal.LogBegin(type, auto_open_depth);
        }

        public static void LogToBuffer(int auto_open_depth)
        {
            __Internal.LogToBuffer(auto_open_depth);
        }

        public static bool BeginChildEx(string name, uint id, global::DearImguiSharp.ImVec2 size_arg, bool border, int flags)
        {
            if (ReferenceEquals(size_arg, null))
                throw new global::System.ArgumentNullException("size_arg", "Cannot be null because it is passed by value.");
            var __arg2 = size_arg.__Instance;
            var __ret = __Internal.BeginChildEx(name, id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, border, flags);
            return __ret;
        }

        public static void OpenPopupEx(uint id)
        {
            __Internal.OpenPopupEx(id);
        }

        public static void ClosePopupToLevel(int remaining, bool restore_focus_to_window_under_popup)
        {
            __Internal.ClosePopupToLevel(remaining, restore_focus_to_window_under_popup);
        }

        public static void ClosePopupsOverWindow(global::DearImguiSharp.ImGuiWindow ref_window, bool restore_focus_to_window_under_popup)
        {
            var __arg0 = ReferenceEquals(ref_window, null) ? global::System.IntPtr.Zero : ref_window.__Instance;
            __Internal.ClosePopupsOverWindow(__arg0, restore_focus_to_window_under_popup);
        }

        public static bool IsPopupOpenID(uint id)
        {
            var __ret = __Internal.IsPopupOpenID(id);
            return __ret;
        }

        public static bool BeginPopupEx(uint id, int extra_flags)
        {
            var __ret = __Internal.BeginPopupEx(id, extra_flags);
            return __ret;
        }

        public static void BeginTooltipEx(int extra_flags, int tooltip_flags)
        {
            __Internal.BeginTooltipEx(extra_flags, tooltip_flags);
        }

        public static global::DearImguiSharp.ImGuiWindow GetTopMostPopupModal()
        {
            var __ret = __Internal.GetTopMostPopupModal();
            global::DearImguiSharp.ImGuiWindow __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiWindow.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiWindow) global::DearImguiSharp.ImGuiWindow.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiWindow.__CreateInstance(__ret);
            return __result0;
        }

        public static void FindBestWindowPosForPopup(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            var __arg1 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.FindBestWindowPosForPopup(__arg0, __arg1);
        }

        public static void FindBestWindowPosForPopupEx(global::DearImguiSharp.ImVec2 pOut, global::DearImguiSharp.ImVec2 ref_pos, global::DearImguiSharp.ImVec2 size, ref int last_dir, global::DearImguiSharp.ImRect r_outer, global::DearImguiSharp.ImRect r_avoid, global::DearImguiSharp.ImGuiPopupPositionPolicy policy)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            if (ReferenceEquals(ref_pos, null))
                throw new global::System.ArgumentNullException("ref_pos", "Cannot be null because it is passed by value.");
            var __arg1 = ref_pos.__Instance;
            if (ReferenceEquals(size, null))
                throw new global::System.ArgumentNullException("size", "Cannot be null because it is passed by value.");
            var __arg2 = size.__Instance;
            fixed (int* __last_dir3 = &last_dir)
            {
                var __arg3 = __last_dir3;
                if (ReferenceEquals(r_outer, null))
                    throw new global::System.ArgumentNullException("r_outer", "Cannot be null because it is passed by value.");
                var __arg4 = r_outer.__Instance;
                if (ReferenceEquals(r_avoid, null))
                    throw new global::System.ArgumentNullException("r_avoid", "Cannot be null because it is passed by value.");
                var __arg5 = r_avoid.__Instance;
                __Internal.FindBestWindowPosForPopupEx(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, __arg3, __arg4, __arg5, policy);
            }
        }

        public static void NavInitWindow(global::DearImguiSharp.ImGuiWindow window, bool force_reinit)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.NavInitWindow(__arg0, force_reinit);
        }

        public static bool NavMoveRequestButNoResultYet()
        {
            var __ret = __Internal.NavMoveRequestButNoResultYet();
            return __ret;
        }

        public static void NavMoveRequestCancel()
        {
            __Internal.NavMoveRequestCancel();
        }

        public static void NavMoveRequestForward(int move_dir, int clip_dir, global::DearImguiSharp.ImRect bb_rel, int move_flags)
        {
            if (ReferenceEquals(bb_rel, null))
                throw new global::System.ArgumentNullException("bb_rel", "Cannot be null because it is passed by value.");
            var __arg2 = bb_rel.__Instance;
            __Internal.NavMoveRequestForward(move_dir, clip_dir, __arg2, move_flags);
        }

        public static void NavMoveRequestTryWrapping(global::DearImguiSharp.ImGuiWindow window, int move_flags)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.NavMoveRequestTryWrapping(__arg0, move_flags);
        }

        public static float GetNavInputAmount(int n, global::DearImguiSharp.ImGuiInputReadMode mode)
        {
            var __ret = __Internal.GetNavInputAmount(n, mode);
            return __ret;
        }

        public static void GetNavInputAmount2d(global::DearImguiSharp.ImVec2 pOut, int dir_sources, global::DearImguiSharp.ImGuiInputReadMode mode, float slow_factor, float fast_factor)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.GetNavInputAmount2d(__arg0, dir_sources, mode, slow_factor, fast_factor);
        }

        public static int CalcTypematicRepeatAmount(float t0, float t1, float repeat_delay, float repeat_rate)
        {
            var __ret = __Internal.CalcTypematicRepeatAmount(t0, t1, repeat_delay, repeat_rate);
            return __ret;
        }

        public static void ActivateItem(uint id)
        {
            __Internal.ActivateItem(id);
        }

        public static void SetNavID(uint id, int nav_layer, uint focus_scope_id)
        {
            __Internal.SetNavID(id, nav_layer, focus_scope_id);
        }

        public static void SetNavIDWithRectRel(uint id, int nav_layer, uint focus_scope_id, global::DearImguiSharp.ImRect rect_rel)
        {
            if (ReferenceEquals(rect_rel, null))
                throw new global::System.ArgumentNullException("rect_rel", "Cannot be null because it is passed by value.");
            var __arg3 = rect_rel.__Instance;
            __Internal.SetNavIDWithRectRel(id, nav_layer, focus_scope_id, __arg3);
        }

        public static void PushFocusScope(uint id)
        {
            __Internal.PushFocusScope(id);
        }

        public static void PopFocusScope()
        {
            __Internal.PopFocusScope();
        }

        public static uint GetFocusScopeID()
        {
            var __ret = __Internal.GetFocusScopeID();
            return __ret;
        }

        public static bool IsActiveIdUsingNavDir(int dir)
        {
            var __ret = __Internal.IsActiveIdUsingNavDir(dir);
            return __ret;
        }

        public static bool IsActiveIdUsingNavInput(int input)
        {
            var __ret = __Internal.IsActiveIdUsingNavInput(input);
            return __ret;
        }

        public static bool IsActiveIdUsingKey(int key)
        {
            var __ret = __Internal.IsActiveIdUsingKey(key);
            return __ret;
        }

        public static bool IsMouseDragPastThreshold(int button, float lock_threshold)
        {
            var __ret = __Internal.IsMouseDragPastThreshold(button, lock_threshold);
            return __ret;
        }

        public static bool IsKeyPressedMap(int key, bool repeat)
        {
            var __ret = __Internal.IsKeyPressedMap(key, repeat);
            return __ret;
        }

        public static bool IsNavInputDown(int n)
        {
            var __ret = __Internal.IsNavInputDown(n);
            return __ret;
        }

        public static bool IsNavInputTest(int n, global::DearImguiSharp.ImGuiInputReadMode rm)
        {
            var __ret = __Internal.IsNavInputTest(n, rm);
            return __ret;
        }

        public static bool BeginDragDropTargetCustom(global::DearImguiSharp.ImRect bb, uint id)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            var __ret = __Internal.BeginDragDropTargetCustom(__arg0, id);
            return __ret;
        }

        public static void ClearDragDrop()
        {
            __Internal.ClearDragDrop();
        }

        public static bool IsDragDropPayloadBeingAccepted()
        {
            var __ret = __Internal.IsDragDropPayloadBeingAccepted();
            return __ret;
        }

        public static void BeginColumns(string str_id, int count, int flags)
        {
            __Internal.BeginColumns(str_id, count, flags);
        }

        public static void EndColumns()
        {
            __Internal.EndColumns();
        }

        public static void PushColumnClipRect(int column_index)
        {
            __Internal.PushColumnClipRect(column_index);
        }

        public static void PushColumnsBackground()
        {
            __Internal.PushColumnsBackground();
        }

        public static void PopColumnsBackground()
        {
            __Internal.PopColumnsBackground();
        }

        public static uint GetColumnsID(string str_id, int count)
        {
            var __ret = __Internal.GetColumnsID(str_id, count);
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiColumns FindOrCreateColumns(global::DearImguiSharp.ImGuiWindow window, uint id)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.FindOrCreateColumns(__arg0, id);
            global::DearImguiSharp.ImGuiColumns __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiColumns.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiColumns) global::DearImguiSharp.ImGuiColumns.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiColumns.__CreateInstance(__ret);
            return __result0;
        }

        public static float GetColumnOffsetFromNorm(global::DearImguiSharp.ImGuiColumns columns, float offset_norm)
        {
            var __arg0 = ReferenceEquals(columns, null) ? global::System.IntPtr.Zero : columns.__Instance;
            var __ret = __Internal.GetColumnOffsetFromNorm(__arg0, offset_norm);
            return __ret;
        }

        public static float GetColumnNormFromOffset(global::DearImguiSharp.ImGuiColumns columns, float offset)
        {
            var __arg0 = ReferenceEquals(columns, null) ? global::System.IntPtr.Zero : columns.__Instance;
            var __ret = __Internal.GetColumnNormFromOffset(__arg0, offset);
            return __ret;
        }

        public static bool BeginTabBarEx(global::DearImguiSharp.ImGuiTabBar tab_bar, global::DearImguiSharp.ImRect bb, int flags)
        {
            var __arg0 = ReferenceEquals(tab_bar, null) ? global::System.IntPtr.Zero : tab_bar.__Instance;
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg1 = bb.__Instance;
            var __ret = __Internal.BeginTabBarEx(__arg0, __arg1, flags);
            return __ret;
        }

        public static global::DearImguiSharp.ImGuiTabItem TabBarFindTabByID(global::DearImguiSharp.ImGuiTabBar tab_bar, uint tab_id)
        {
            var __arg0 = ReferenceEquals(tab_bar, null) ? global::System.IntPtr.Zero : tab_bar.__Instance;
            var __ret = __Internal.TabBarFindTabByID(__arg0, tab_id);
            global::DearImguiSharp.ImGuiTabItem __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiTabItem.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiTabItem) global::DearImguiSharp.ImGuiTabItem.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiTabItem.__CreateInstance(__ret);
            return __result0;
        }

        public static void TabBarRemoveTab(global::DearImguiSharp.ImGuiTabBar tab_bar, uint tab_id)
        {
            var __arg0 = ReferenceEquals(tab_bar, null) ? global::System.IntPtr.Zero : tab_bar.__Instance;
            __Internal.TabBarRemoveTab(__arg0, tab_id);
        }

        public static void TabBarCloseTab(global::DearImguiSharp.ImGuiTabBar tab_bar, global::DearImguiSharp.ImGuiTabItem tab)
        {
            var __arg0 = ReferenceEquals(tab_bar, null) ? global::System.IntPtr.Zero : tab_bar.__Instance;
            var __arg1 = ReferenceEquals(tab, null) ? global::System.IntPtr.Zero : tab.__Instance;
            __Internal.TabBarCloseTab(__arg0, __arg1);
        }

        public static void TabBarQueueChangeTabOrder(global::DearImguiSharp.ImGuiTabBar tab_bar, global::DearImguiSharp.ImGuiTabItem tab, int dir)
        {
            var __arg0 = ReferenceEquals(tab_bar, null) ? global::System.IntPtr.Zero : tab_bar.__Instance;
            var __arg1 = ReferenceEquals(tab, null) ? global::System.IntPtr.Zero : tab.__Instance;
            __Internal.TabBarQueueChangeTabOrder(__arg0, __arg1, dir);
        }

        public static bool TabItemEx(global::DearImguiSharp.ImGuiTabBar tab_bar, string label, ref bool p_open, int flags)
        {
            var __arg0 = ReferenceEquals(tab_bar, null) ? global::System.IntPtr.Zero : tab_bar.__Instance;
            fixed (bool* __p_open2 = &p_open)
            {
                var __arg2 = __p_open2;
                var __ret = __Internal.TabItemEx(__arg0, label, __arg2, flags);
                return __ret;
            }
        }

        public static void TabItemCalcSize(global::DearImguiSharp.ImVec2 pOut, string label, bool has_close_button)
        {
            var __arg0 = ReferenceEquals(pOut, null) ? global::System.IntPtr.Zero : pOut.__Instance;
            __Internal.TabItemCalcSize(__arg0, label, has_close_button);
        }

        public static void TabItemBackground(global::DearImguiSharp.ImDrawList draw_list, global::DearImguiSharp.ImRect bb, int flags, uint col)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg1 = bb.__Instance;
            __Internal.TabItemBackground(__arg0, __arg1, flags, col);
        }

        public static bool TabItemLabelAndCloseButton(global::DearImguiSharp.ImDrawList draw_list, global::DearImguiSharp.ImRect bb, int flags, global::DearImguiSharp.ImVec2 frame_padding, string label, uint tab_id, uint close_button_id)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg1 = bb.__Instance;
            if (ReferenceEquals(frame_padding, null))
                throw new global::System.ArgumentNullException("frame_padding", "Cannot be null because it is passed by value.");
            var __arg3 = frame_padding.__Instance;
            var __ret = __Internal.TabItemLabelAndCloseButton(__arg0, __arg1, flags, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, label, tab_id, close_button_id);
            return __ret;
        }

        public static void RenderText(global::DearImguiSharp.ImVec2 pos, string text, string text_end, bool hide_text_after_hash)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg0 = pos.__Instance;
            __Internal.RenderText(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, text, text_end, hide_text_after_hash);
        }

        public static void RenderTextWrapped(global::DearImguiSharp.ImVec2 pos, string text, string text_end, float wrap_width)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg0 = pos.__Instance;
            __Internal.RenderTextWrapped(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, text, text_end, wrap_width);
        }

        public static void RenderTextClipped(global::DearImguiSharp.ImVec2 pos_min, global::DearImguiSharp.ImVec2 pos_max, string text, string text_end, global::DearImguiSharp.ImVec2 text_size_if_known, global::DearImguiSharp.ImVec2 align, global::DearImguiSharp.ImRect clip_rect)
        {
            if (ReferenceEquals(pos_min, null))
                throw new global::System.ArgumentNullException("pos_min", "Cannot be null because it is passed by value.");
            var __arg0 = pos_min.__Instance;
            if (ReferenceEquals(pos_max, null))
                throw new global::System.ArgumentNullException("pos_max", "Cannot be null because it is passed by value.");
            var __arg1 = pos_max.__Instance;
            var __arg4 = ReferenceEquals(text_size_if_known, null) ? global::System.IntPtr.Zero : text_size_if_known.__Instance;
            if (ReferenceEquals(align, null))
                throw new global::System.ArgumentNullException("align", "Cannot be null because it is passed by value.");
            var __arg5 = align.__Instance;
            var __arg6 = ReferenceEquals(clip_rect, null) ? global::System.IntPtr.Zero : clip_rect.__Instance;
            __Internal.RenderTextClipped(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, text, text_end, __arg4, *(global::DearImguiSharp.ImVec2.__Internal*) __arg5, __arg6);
        }

        public static void RenderTextClippedEx(global::DearImguiSharp.ImDrawList draw_list, global::DearImguiSharp.ImVec2 pos_min, global::DearImguiSharp.ImVec2 pos_max, string text, string text_end, global::DearImguiSharp.ImVec2 text_size_if_known, global::DearImguiSharp.ImVec2 align, global::DearImguiSharp.ImRect clip_rect)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(pos_min, null))
                throw new global::System.ArgumentNullException("pos_min", "Cannot be null because it is passed by value.");
            var __arg1 = pos_min.__Instance;
            if (ReferenceEquals(pos_max, null))
                throw new global::System.ArgumentNullException("pos_max", "Cannot be null because it is passed by value.");
            var __arg2 = pos_max.__Instance;
            var __arg5 = ReferenceEquals(text_size_if_known, null) ? global::System.IntPtr.Zero : text_size_if_known.__Instance;
            if (ReferenceEquals(align, null))
                throw new global::System.ArgumentNullException("align", "Cannot be null because it is passed by value.");
            var __arg6 = align.__Instance;
            var __arg7 = ReferenceEquals(clip_rect, null) ? global::System.IntPtr.Zero : clip_rect.__Instance;
            __Internal.RenderTextClippedEx(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, text, text_end, __arg5, *(global::DearImguiSharp.ImVec2.__Internal*) __arg6, __arg7);
        }

        public static void RenderTextEllipsis(global::DearImguiSharp.ImDrawList draw_list, global::DearImguiSharp.ImVec2 pos_min, global::DearImguiSharp.ImVec2 pos_max, float clip_max_x, float ellipsis_max_x, string text, string text_end, global::DearImguiSharp.ImVec2 text_size_if_known)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(pos_min, null))
                throw new global::System.ArgumentNullException("pos_min", "Cannot be null because it is passed by value.");
            var __arg1 = pos_min.__Instance;
            if (ReferenceEquals(pos_max, null))
                throw new global::System.ArgumentNullException("pos_max", "Cannot be null because it is passed by value.");
            var __arg2 = pos_max.__Instance;
            var __arg7 = ReferenceEquals(text_size_if_known, null) ? global::System.IntPtr.Zero : text_size_if_known.__Instance;
            __Internal.RenderTextEllipsis(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, clip_max_x, ellipsis_max_x, text, text_end, __arg7);
        }

        public static void RenderFrame(global::DearImguiSharp.ImVec2 p_min, global::DearImguiSharp.ImVec2 p_max, uint fill_col, bool border, float rounding)
        {
            if (ReferenceEquals(p_min, null))
                throw new global::System.ArgumentNullException("p_min", "Cannot be null because it is passed by value.");
            var __arg0 = p_min.__Instance;
            if (ReferenceEquals(p_max, null))
                throw new global::System.ArgumentNullException("p_max", "Cannot be null because it is passed by value.");
            var __arg1 = p_max.__Instance;
            __Internal.RenderFrame(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, fill_col, border, rounding);
        }

        public static void RenderFrameBorder(global::DearImguiSharp.ImVec2 p_min, global::DearImguiSharp.ImVec2 p_max, float rounding)
        {
            if (ReferenceEquals(p_min, null))
                throw new global::System.ArgumentNullException("p_min", "Cannot be null because it is passed by value.");
            var __arg0 = p_min.__Instance;
            if (ReferenceEquals(p_max, null))
                throw new global::System.ArgumentNullException("p_max", "Cannot be null because it is passed by value.");
            var __arg1 = p_max.__Instance;
            __Internal.RenderFrameBorder(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, rounding);
        }

        public static void RenderColorRectWithAlphaCheckerboard(global::DearImguiSharp.ImVec2 p_min, global::DearImguiSharp.ImVec2 p_max, uint fill_col, float grid_step, global::DearImguiSharp.ImVec2 grid_off, float rounding, int rounding_corners_flags)
        {
            if (ReferenceEquals(p_min, null))
                throw new global::System.ArgumentNullException("p_min", "Cannot be null because it is passed by value.");
            var __arg0 = p_min.__Instance;
            if (ReferenceEquals(p_max, null))
                throw new global::System.ArgumentNullException("p_max", "Cannot be null because it is passed by value.");
            var __arg1 = p_max.__Instance;
            if (ReferenceEquals(grid_off, null))
                throw new global::System.ArgumentNullException("grid_off", "Cannot be null because it is passed by value.");
            var __arg4 = grid_off.__Instance;
            __Internal.RenderColorRectWithAlphaCheckerboard(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, fill_col, grid_step, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, rounding, rounding_corners_flags);
        }

        public static void RenderCheckMark(global::DearImguiSharp.ImVec2 pos, uint col, float sz)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg0 = pos.__Instance;
            __Internal.RenderCheckMark(*(global::DearImguiSharp.ImVec2.__Internal*) __arg0, col, sz);
        }

        public static void RenderNavHighlight(global::DearImguiSharp.ImRect bb, uint id, int flags)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            __Internal.RenderNavHighlight(__arg0, id, flags);
        }

        public static string FindRenderedTextEnd(string text, string text_end)
        {
            var __ret = __Internal.FindRenderedTextEnd(text, text_end);
            if (__ret == global::System.IntPtr.Zero)
                return default(string);
            var __retPtr = (byte*) __ret;
            int __length = 0;
            while (*(__retPtr++) != 0) __length += sizeof(byte);
            return global::System.Text.Encoding.UTF8.GetString((byte*) __ret, __length);
        }

        public static void LogRenderedText(global::DearImguiSharp.ImVec2 ref_pos, string text, string text_end)
        {
            var __arg0 = ReferenceEquals(ref_pos, null) ? global::System.IntPtr.Zero : ref_pos.__Instance;
            __Internal.LogRenderedText(__arg0, text, text_end);
        }

        public static void RenderArrow(global::DearImguiSharp.ImDrawList draw_list, global::DearImguiSharp.ImVec2 pos, uint col, int dir, float scale)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            __Internal.RenderArrow(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, col, dir, scale);
        }

        public static void RenderBullet(global::DearImguiSharp.ImDrawList draw_list, global::DearImguiSharp.ImVec2 pos, uint col)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            __Internal.RenderBullet(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, col);
        }

        public static void RenderMouseCursor(global::DearImguiSharp.ImDrawList draw_list, global::DearImguiSharp.ImVec2 pos, float scale, int mouse_cursor, uint col_fill, uint col_border, uint col_shadow)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            __Internal.RenderMouseCursor(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, scale, mouse_cursor, col_fill, col_border, col_shadow);
        }

        public static void RenderArrowPointingAt(global::DearImguiSharp.ImDrawList draw_list, global::DearImguiSharp.ImVec2 pos, global::DearImguiSharp.ImVec2 half_sz, int direction, uint col)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            if (ReferenceEquals(half_sz, null))
                throw new global::System.ArgumentNullException("half_sz", "Cannot be null because it is passed by value.");
            var __arg2 = half_sz.__Instance;
            __Internal.RenderArrowPointingAt(__arg0, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, direction, col);
        }

        public static void RenderRectFilledRangeH(global::DearImguiSharp.ImDrawList draw_list, global::DearImguiSharp.ImRect rect, uint col, float x_start_norm, float x_end_norm, float rounding)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(rect, null))
                throw new global::System.ArgumentNullException("rect", "Cannot be null because it is passed by value.");
            var __arg1 = rect.__Instance;
            __Internal.RenderRectFilledRangeH(__arg0, __arg1, col, x_start_norm, x_end_norm, rounding);
        }

        public static void TextEx(string text, string text_end, int flags)
        {
            __Internal.TextEx(text, text_end, flags);
        }

        public static bool ButtonEx(string label, global::DearImguiSharp.ImVec2 size_arg, int flags)
        {
            if (ReferenceEquals(size_arg, null))
                throw new global::System.ArgumentNullException("size_arg", "Cannot be null because it is passed by value.");
            var __arg1 = size_arg.__Instance;
            var __ret = __Internal.ButtonEx(label, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1, flags);
            return __ret;
        }

        public static bool CloseButton(uint id, global::DearImguiSharp.ImVec2 pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            var __ret = __Internal.CloseButton(id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            return __ret;
        }

        public static bool CollapseButton(uint id, global::DearImguiSharp.ImVec2 pos)
        {
            if (ReferenceEquals(pos, null))
                throw new global::System.ArgumentNullException("pos", "Cannot be null because it is passed by value.");
            var __arg1 = pos.__Instance;
            var __ret = __Internal.CollapseButton(id, *(global::DearImguiSharp.ImVec2.__Internal*) __arg1);
            return __ret;
        }

        public static bool ArrowButtonEx(string str_id, int dir, global::DearImguiSharp.ImVec2 size_arg, int flags)
        {
            if (ReferenceEquals(size_arg, null))
                throw new global::System.ArgumentNullException("size_arg", "Cannot be null because it is passed by value.");
            var __arg2 = size_arg.__Instance;
            var __ret = __Internal.ArrowButtonEx(str_id, dir, *(global::DearImguiSharp.ImVec2.__Internal*) __arg2, flags);
            return __ret;
        }

        public static void Scrollbar(global::DearImguiSharp.ImGuiAxis axis)
        {
            __Internal.Scrollbar(axis);
        }

        public static bool ScrollbarEx(global::DearImguiSharp.ImRect bb, uint id, global::DearImguiSharp.ImGuiAxis axis, ref float p_scroll_v, float avail_v, float contents_v, int rounding_corners)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            fixed (float* __p_scroll_v3 = &p_scroll_v)
            {
                var __arg3 = __p_scroll_v3;
                var __ret = __Internal.ScrollbarEx(__arg0, id, axis, __arg3, avail_v, contents_v, rounding_corners);
                return __ret;
            }
        }

        public static uint GetWindowScrollbarID(global::DearImguiSharp.ImGuiWindow window, global::DearImguiSharp.ImGuiAxis axis)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.GetWindowScrollbarID(__arg0, axis);
            return __ret;
        }

        public static uint GetWindowResizeID(global::DearImguiSharp.ImGuiWindow window, int n)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            var __ret = __Internal.GetWindowResizeID(__arg0, n);
            return __ret;
        }

        public static void SeparatorEx(int flags)
        {
            __Internal.SeparatorEx(flags);
        }

        public static bool ButtonBehavior(global::DearImguiSharp.ImRect bb, uint id, ref bool out_hovered, ref bool out_held, int flags)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            fixed (bool* __out_hovered2 = &out_hovered)
            {
                var __arg2 = __out_hovered2;
                fixed (bool* __out_held3 = &out_held)
                {
                    var __arg3 = __out_held3;
                    var __ret = __Internal.ButtonBehavior(__arg0, id, __arg2, __arg3, flags);
                    return __ret;
                }
            }
        }

        public static bool DragBehavior(uint id, int data_type, global::System.IntPtr p_v, float v_speed, global::System.IntPtr p_min, global::System.IntPtr p_max, string format, float power, int flags)
        {
            var __ret = __Internal.DragBehavior(id, data_type, p_v, v_speed, p_min, p_max, format, power, flags);
            return __ret;
        }

        public static bool SliderBehavior(global::DearImguiSharp.ImRect bb, uint id, int data_type, global::System.IntPtr p_v, global::System.IntPtr p_min, global::System.IntPtr p_max, string format, float power, int flags, global::DearImguiSharp.ImRect out_grab_bb)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            var __arg9 = ReferenceEquals(out_grab_bb, null) ? global::System.IntPtr.Zero : out_grab_bb.__Instance;
            var __ret = __Internal.SliderBehavior(__arg0, id, data_type, p_v, p_min, p_max, format, power, flags, __arg9);
            return __ret;
        }

        public static bool SplitterBehavior(global::DearImguiSharp.ImRect bb, uint id, global::DearImguiSharp.ImGuiAxis axis, ref float size1, ref float size2, float min_size1, float min_size2, float hover_extend, float hover_visibility_delay)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            fixed (float* __size13 = &size1)
            {
                var __arg3 = __size13;
                fixed (float* __size24 = &size2)
                {
                    var __arg4 = __size24;
                    var __ret = __Internal.SplitterBehavior(__arg0, id, axis, __arg3, __arg4, min_size1, min_size2, hover_extend, hover_visibility_delay);
                    return __ret;
                }
            }
        }

        public static bool TreeNodeBehavior(uint id, int flags, string label, string label_end)
        {
            var __ret = __Internal.TreeNodeBehavior(id, flags, label, label_end);
            return __ret;
        }

        public static bool TreeNodeBehaviorIsOpen(uint id, int flags)
        {
            var __ret = __Internal.TreeNodeBehaviorIsOpen(id, flags);
            return __ret;
        }

        public static void TreePushOverrideID(uint id)
        {
            __Internal.TreePushOverrideID(id);
        }

        public static global::DearImguiSharp.ImGuiDataTypeInfo DataTypeGetInfo(int data_type)
        {
            var __ret = __Internal.DataTypeGetInfo(data_type);
            global::DearImguiSharp.ImGuiDataTypeInfo __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImGuiDataTypeInfo.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImGuiDataTypeInfo) global::DearImguiSharp.ImGuiDataTypeInfo.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImGuiDataTypeInfo.__CreateInstance(__ret);
            return __result0;
        }

        public static int DataTypeFormatString(sbyte* buf, int buf_size, int data_type, global::System.IntPtr p_data, string format)
        {
            var __ret = __Internal.DataTypeFormatString(buf, buf_size, data_type, p_data, format);
            return __ret;
        }

        public static void DataTypeApplyOp(int data_type, int op, global::System.IntPtr output, global::System.IntPtr arg_1, global::System.IntPtr arg_2)
        {
            __Internal.DataTypeApplyOp(data_type, op, output, arg_1, arg_2);
        }

        public static bool DataTypeApplyOpFromText(string buf, string initial_value_buf, int data_type, global::System.IntPtr p_data, string format)
        {
            var __ret = __Internal.DataTypeApplyOpFromText(buf, initial_value_buf, data_type, p_data, format);
            return __ret;
        }

        public static bool InputTextEx(string label, string hint, sbyte* buf, int buf_size, global::DearImguiSharp.ImVec2 size_arg, int flags, global::DearImguiSharp.ImGuiInputTextCallback callback, global::System.IntPtr user_data)
        {
            if (ReferenceEquals(size_arg, null))
                throw new global::System.ArgumentNullException("size_arg", "Cannot be null because it is passed by value.");
            var __arg4 = size_arg.__Instance;
            var __arg6 = callback == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(callback);
            var __ret = __Internal.InputTextEx(label, hint, buf, buf_size, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, flags, __arg6, user_data);
            return __ret;
        }

        public static bool TempInputTextScalar(global::DearImguiSharp.ImRect bb, uint id, string label, int data_type, global::System.IntPtr p_data, string format)
        {
            if (ReferenceEquals(bb, null))
                throw new global::System.ArgumentNullException("bb", "Cannot be null because it is passed by value.");
            var __arg0 = bb.__Instance;
            var __ret = __Internal.TempInputTextScalar(__arg0, id, label, data_type, p_data, format);
            return __ret;
        }

        public static bool TempInputTextIsActive(uint id)
        {
            var __ret = __Internal.TempInputTextIsActive(id);
            return __ret;
        }

        public static void ColorTooltip(string text, ref float col, int flags)
        {
            fixed (float* __col1 = &col)
            {
                var __arg1 = __col1;
                __Internal.ColorTooltip(text, __arg1, flags);
            }
        }

        public static void ColorEditOptionsPopup(ref float col, int flags)
        {
            fixed (float* __col0 = &col)
            {
                var __arg0 = __col0;
                __Internal.ColorEditOptionsPopup(__arg0, flags);
            }
        }

        public static void ColorPickerOptionsPopup(ref float ref_col, int flags)
        {
            fixed (float* __ref_col0 = &ref_col)
            {
                var __arg0 = __ref_col0;
                __Internal.ColorPickerOptionsPopup(__arg0, flags);
            }
        }

        public static void PlotEx(global::DearImguiSharp.ImGuiPlotType plot_type, string label, global::DearImguiSharp.Delegates.Func_float_IntPtr_int values_getter, global::System.IntPtr data, int values_count, int values_offset, string overlay_text, float scale_min, float scale_max, global::DearImguiSharp.ImVec2 frame_size)
        {
            var __arg2 = values_getter == null ? global::System.IntPtr.Zero : Marshal.GetFunctionPointerForDelegate(values_getter);
            if (ReferenceEquals(frame_size, null))
                throw new global::System.ArgumentNullException("frame_size", "Cannot be null because it is passed by value.");
            var __arg9 = frame_size.__Instance;
            __Internal.PlotEx(plot_type, label, __arg2, data, values_count, values_offset, overlay_text, scale_min, scale_max, *(global::DearImguiSharp.ImVec2.__Internal*) __arg9);
        }

        public static void ShadeVertsLinearColorGradientKeepAlpha(global::DearImguiSharp.ImDrawList draw_list, int vert_start_idx, int vert_end_idx, global::DearImguiSharp.ImVec2 gradient_p0, global::DearImguiSharp.ImVec2 gradient_p1, uint col0, uint col1)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(gradient_p0, null))
                throw new global::System.ArgumentNullException("gradient_p0", "Cannot be null because it is passed by value.");
            var __arg3 = gradient_p0.__Instance;
            if (ReferenceEquals(gradient_p1, null))
                throw new global::System.ArgumentNullException("gradient_p1", "Cannot be null because it is passed by value.");
            var __arg4 = gradient_p1.__Instance;
            __Internal.ShadeVertsLinearColorGradientKeepAlpha(__arg0, vert_start_idx, vert_end_idx, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, col0, col1);
        }

        public static void ShadeVertsLinearUV(global::DearImguiSharp.ImDrawList draw_list, int vert_start_idx, int vert_end_idx, global::DearImguiSharp.ImVec2 a, global::DearImguiSharp.ImVec2 b, global::DearImguiSharp.ImVec2 uv_a, global::DearImguiSharp.ImVec2 uv_b, bool clamp)
        {
            var __arg0 = ReferenceEquals(draw_list, null) ? global::System.IntPtr.Zero : draw_list.__Instance;
            if (ReferenceEquals(a, null))
                throw new global::System.ArgumentNullException("a", "Cannot be null because it is passed by value.");
            var __arg3 = a.__Instance;
            if (ReferenceEquals(b, null))
                throw new global::System.ArgumentNullException("b", "Cannot be null because it is passed by value.");
            var __arg4 = b.__Instance;
            if (ReferenceEquals(uv_a, null))
                throw new global::System.ArgumentNullException("uv_a", "Cannot be null because it is passed by value.");
            var __arg5 = uv_a.__Instance;
            if (ReferenceEquals(uv_b, null))
                throw new global::System.ArgumentNullException("uv_b", "Cannot be null because it is passed by value.");
            var __arg6 = uv_b.__Instance;
            __Internal.ShadeVertsLinearUV(__arg0, vert_start_idx, vert_end_idx, *(global::DearImguiSharp.ImVec2.__Internal*) __arg3, *(global::DearImguiSharp.ImVec2.__Internal*) __arg4, *(global::DearImguiSharp.ImVec2.__Internal*) __arg5, *(global::DearImguiSharp.ImVec2.__Internal*) __arg6, clamp);
        }

        public static void GcCompactTransientWindowBuffers(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.GcCompactTransientWindowBuffers(__arg0);
        }

        public static void GcAwakeTransientWindowBuffers(global::DearImguiSharp.ImGuiWindow window)
        {
            var __arg0 = ReferenceEquals(window, null) ? global::System.IntPtr.Zero : window.__Instance;
            __Internal.GcAwakeTransientWindowBuffers(__arg0);
        }

        public static void DebugDrawItemRect(uint col)
        {
            __Internal.DebugDrawItemRect(col);
        }

        public static void DebugStartItemPicker()
        {
            __Internal.DebugStartItemPicker();
        }

        public static bool ImFontAtlasBuildWithStbTruetype(global::DearImguiSharp.ImFontAtlas atlas)
        {
            var __arg0 = ReferenceEquals(atlas, null) ? global::System.IntPtr.Zero : atlas.__Instance;
            var __ret = __Internal.ImFontAtlasBuildWithStbTruetype(__arg0);
            return __ret;
        }

        public static void ImFontAtlasBuildRegisterDefaultCustomRects(global::DearImguiSharp.ImFontAtlas atlas)
        {
            var __arg0 = ReferenceEquals(atlas, null) ? global::System.IntPtr.Zero : atlas.__Instance;
            __Internal.ImFontAtlasBuildRegisterDefaultCustomRects(__arg0);
        }

        public static void ImFontAtlasBuildSetupFont(global::DearImguiSharp.ImFontAtlas atlas, global::DearImguiSharp.ImFont font, global::DearImguiSharp.ImFontConfig font_config, float ascent, float descent)
        {
            var __arg0 = ReferenceEquals(atlas, null) ? global::System.IntPtr.Zero : atlas.__Instance;
            var __arg1 = ReferenceEquals(font, null) ? global::System.IntPtr.Zero : font.__Instance;
            var __arg2 = ReferenceEquals(font_config, null) ? global::System.IntPtr.Zero : font_config.__Instance;
            __Internal.ImFontAtlasBuildSetupFont(__arg0, __arg1, __arg2, ascent, descent);
        }

        public static void ImFontAtlasBuildPackCustomRects(global::DearImguiSharp.ImFontAtlas atlas, global::System.IntPtr stbrp_context_opaque)
        {
            var __arg0 = ReferenceEquals(atlas, null) ? global::System.IntPtr.Zero : atlas.__Instance;
            __Internal.ImFontAtlasBuildPackCustomRects(__arg0, stbrp_context_opaque);
        }

        public static void ImFontAtlasBuildFinish(global::DearImguiSharp.ImFontAtlas atlas)
        {
            var __arg0 = ReferenceEquals(atlas, null) ? global::System.IntPtr.Zero : atlas.__Instance;
            __Internal.ImFontAtlasBuildFinish(__arg0);
        }

        public static void ImFontAtlasBuildMultiplyCalcLookupTable(byte[] out_table, float in_multiply_factor)
        {
            if (out_table == null || out_table.Length != 256)
                throw new ArgumentOutOfRangeException("out_table", "The dimensions of the provided array don't match the required size.");
            __Internal.ImFontAtlasBuildMultiplyCalcLookupTable(out_table, in_multiply_factor);
        }

        public static void ImFontAtlasBuildMultiplyRectAlpha8(byte[] table, byte* pixels, int x, int y, int w, int h, int stride)
        {
            if (table == null || table.Length != 256)
                throw new ArgumentOutOfRangeException("table", "The dimensions of the provided array don't match the required size.");
            __Internal.ImFontAtlasBuildMultiplyRectAlpha8(table, pixels, x, y, w, h, stride);
        }

        /// <summary>//////////////////////hand written functions</summary>
        public static void LogText(string fmt)
        {
            __Internal.LogText(fmt);
        }

        public static float GET_FLT_MAX()
        {
            var __ret = __Internal.GET_FLT_MAX();
            return __ret;
        }

        public static void ColorConvertRGBtoHSV(float r, float g, float b, ref float out_h, ref float out_s, ref float out_v)
        {
            fixed (float* __out_h3 = &out_h)
            {
                var __arg3 = __out_h3;
                fixed (float* __out_s4 = &out_s)
                {
                    var __arg4 = __out_s4;
                    fixed (float* __out_v5 = &out_v)
                    {
                        var __arg5 = __out_v5;
                        __Internal.ColorConvertRGBtoHSV(r, g, b, __arg3, __arg4, __arg5);
                    }
                }
            }
        }

        public static void ColorConvertHSVtoRGB(float h, float s, float v, ref float out_r, ref float out_g, ref float out_b)
        {
            fixed (float* __out_r3 = &out_r)
            {
                var __arg3 = __out_r3;
                fixed (float* __out_g4 = &out_g)
                {
                    var __arg4 = __out_g4;
                    fixed (float* __out_b5 = &out_b)
                    {
                        var __arg5 = __out_b5;
                        __Internal.ColorConvertHSVtoRGB(h, s, v, __arg3, __arg4, __arg5);
                    }
                }
            }
        }

        public static global::DearImguiSharp.ImVectorImWchar ImVectorImWchar_create()
        {
            var __ret = __Internal.ImVectorImWchar_create();
            global::DearImguiSharp.ImVectorImWchar __result0;
            if (__ret == IntPtr.Zero) __result0 = null;
            else if (global::DearImguiSharp.ImVectorImWchar.NativeToManagedMap.ContainsKey(__ret))
                __result0 = (global::DearImguiSharp.ImVectorImWchar) global::DearImguiSharp.ImVectorImWchar.NativeToManagedMap[__ret];
            else __result0 = global::DearImguiSharp.ImVectorImWchar.__CreateInstance(__ret);
            return __result0;
        }

        public static void ImVectorImWchar_destroy(global::DearImguiSharp.ImVectorImWchar self)
        {
            var __arg0 = ReferenceEquals(self, null) ? global::System.IntPtr.Zero : self.__Instance;
            __Internal.ImVectorImWchar_destroy(__arg0);
        }

        public static void ImVectorImWcharInit(global::DearImguiSharp.ImVectorImWchar p)
        {
            var __arg0 = ReferenceEquals(p, null) ? global::System.IntPtr.Zero : p.__Instance;
            __Internal.ImVectorImWcharInit(__arg0);
        }

        public static void ImVectorImWcharUnInit(global::DearImguiSharp.ImVectorImWchar p)
        {
            var __arg0 = ReferenceEquals(p, null) ? global::System.IntPtr.Zero : p.__Instance;
            __Internal.ImVectorImWcharUnInit(__arg0);
        }
    }

    public unsafe partial class ID3D11DeviceContext
    {
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ID3D11DeviceContext> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ID3D11DeviceContext>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ID3D11DeviceContext __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ID3D11DeviceContext(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ID3D11DeviceContext __CreateInstance(global::DearImguiSharp.ID3D11DeviceContext.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ID3D11DeviceContext(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ID3D11DeviceContext.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ID3D11DeviceContext.__Internal));
            *(global::DearImguiSharp.ID3D11DeviceContext.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ID3D11DeviceContext(global::DearImguiSharp.ID3D11DeviceContext.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ID3D11DeviceContext(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ID3D11Device
    {
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ID3D11Device> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.ID3D11Device>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.ID3D11Device __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ID3D11Device(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.ID3D11Device __CreateInstance(global::DearImguiSharp.ID3D11Device.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.ID3D11Device(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.ID3D11Device.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.ID3D11Device.__Internal));
            *(global::DearImguiSharp.ID3D11Device.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private ID3D11Device(global::DearImguiSharp.ID3D11Device.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected ID3D11Device(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class IDirect3DDevice9
    {
        public partial struct __Internal
        {
        }

        public global::System.IntPtr __Instance { get; protected set; }

        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.IDirect3DDevice9> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::DearImguiSharp.IDirect3DDevice9>();

        protected bool __ownsNativeInstance;

        internal static global::DearImguiSharp.IDirect3DDevice9 __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.IDirect3DDevice9(native.ToPointer(), skipVTables);
        }

        internal static global::DearImguiSharp.IDirect3DDevice9 __CreateInstance(global::DearImguiSharp.IDirect3DDevice9.__Internal native, bool skipVTables = false)
        {
            return new global::DearImguiSharp.IDirect3DDevice9(native, skipVTables);
        }

        private static void* __CopyValue(global::DearImguiSharp.IDirect3DDevice9.__Internal native)
        {
            var ret = Marshal.AllocHGlobal(sizeof(global::DearImguiSharp.IDirect3DDevice9.__Internal));
            *(global::DearImguiSharp.IDirect3DDevice9.__Internal*) ret = native;
            return ret.ToPointer();
        }

        private IDirect3DDevice9(global::DearImguiSharp.IDirect3DDevice9.__Internal native, bool skipVTables = false)
            : this(__CopyValue(native), skipVTables)
        {
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
        }

        protected IDirect3DDevice9(void* native, bool skipVTables = false)
        {
            if (native == null)
                return;
            __Instance = new global::System.IntPtr(native);
        }
    }

    public unsafe partial class ImGui
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplWin32_Init")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiImplWin32Init(global::System.IntPtr hwnd);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplWin32_Shutdown")]
            internal static extern void ImGuiImplWin32Shutdown();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplWin32_NewFrame")]
            internal static extern void ImGuiImplWin32NewFrame();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX9_Init")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiImplDX9Init(global::System.IntPtr device);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX9_Shutdown")]
            internal static extern void ImGuiImplDX9Shutdown();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX9_NewFrame")]
            internal static extern void ImGuiImplDX9NewFrame();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX9_RenderDrawData")]
            internal static extern void ImGuiImplDX9RenderDrawData(global::System.IntPtr draw_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX9_CreateDeviceObjects")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiImplDX9CreateDeviceObjects();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX9_InvalidateDeviceObjects")]
            internal static extern void ImGuiImplDX9InvalidateDeviceObjects();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX11_Init")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiImplDX11Init(global::System.IntPtr device, global::System.IntPtr device_context);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX11_Shutdown")]
            internal static extern void ImGuiImplDX11Shutdown();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX11_NewFrame")]
            internal static extern void ImGuiImplDX11NewFrame();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX11_RenderDrawData")]
            internal static extern void ImGuiImplDX11RenderDrawData(global::System.IntPtr draw_data);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX11_InvalidateDeviceObjects")]
            internal static extern void ImGuiImplDX11InvalidateDeviceObjects();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("cimgui.dll", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="ImGui_ImplDX11_CreateDeviceObjects")]
            [return: MarshalAs(UnmanagedType.I1)]
            internal static extern bool ImGuiImplDX11CreateDeviceObjects();
        }

        public static bool ImGuiImplWin32Init(global::System.IntPtr hwnd)
        {
            var __ret = __Internal.ImGuiImplWin32Init(hwnd);
            return __ret;
        }

        public static void ImGuiImplWin32Shutdown()
        {
            __Internal.ImGuiImplWin32Shutdown();
        }

        public static void ImGuiImplWin32NewFrame()
        {
            __Internal.ImGuiImplWin32NewFrame();
        }

        public static bool ImGuiImplDX9Init(global::DearImguiSharp.IDirect3DDevice9 device)
        {
            var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
            var __ret = __Internal.ImGuiImplDX9Init(__arg0);
            return __ret;
        }

        public static void ImGuiImplDX9Shutdown()
        {
            __Internal.ImGuiImplDX9Shutdown();
        }

        public static void ImGuiImplDX9NewFrame()
        {
            __Internal.ImGuiImplDX9NewFrame();
        }

        public static void ImGuiImplDX9RenderDrawData(global::DearImguiSharp.ImDrawData draw_data)
        {
            var __arg0 = ReferenceEquals(draw_data, null) ? global::System.IntPtr.Zero : draw_data.__Instance;
            __Internal.ImGuiImplDX9RenderDrawData(__arg0);
        }

        public static bool ImGuiImplDX9CreateDeviceObjects()
        {
            var __ret = __Internal.ImGuiImplDX9CreateDeviceObjects();
            return __ret;
        }

        public static void ImGuiImplDX9InvalidateDeviceObjects()
        {
            __Internal.ImGuiImplDX9InvalidateDeviceObjects();
        }

        public static bool ImGuiImplDX11Init(global::DearImguiSharp.ID3D11Device device, global::DearImguiSharp.ID3D11DeviceContext device_context)
        {
            var __arg0 = ReferenceEquals(device, null) ? global::System.IntPtr.Zero : device.__Instance;
            var __arg1 = ReferenceEquals(device_context, null) ? global::System.IntPtr.Zero : device_context.__Instance;
            var __ret = __Internal.ImGuiImplDX11Init(__arg0, __arg1);
            return __ret;
        }

        public static void ImGuiImplDX11Shutdown()
        {
            __Internal.ImGuiImplDX11Shutdown();
        }

        public static void ImGuiImplDX11NewFrame()
        {
            __Internal.ImGuiImplDX11NewFrame();
        }

        public static void ImGuiImplDX11RenderDrawData(global::DearImguiSharp.ImDrawData draw_data)
        {
            var __arg0 = ReferenceEquals(draw_data, null) ? global::System.IntPtr.Zero : draw_data.__Instance;
            __Internal.ImGuiImplDX11RenderDrawData(__arg0);
        }

        public static void ImGuiImplDX11InvalidateDeviceObjects()
        {
            __Internal.ImGuiImplDX11InvalidateDeviceObjects();
        }

        public static bool ImGuiImplDX11CreateDeviceObjects()
        {
            var __ret = __Internal.ImGuiImplDX11CreateDeviceObjects();
            return __ret;
        }
    }

    namespace Delegates
    {
        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr_IntPtr_string(global::System.IntPtr ctx, global::System.IntPtr handler, [MarshalAs(UnmanagedType.LPUTF8Str)] string name);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_IntPtr_IntPtr_string(global::System.IntPtr ctx, global::System.IntPtr handler, global::System.IntPtr entry, [MarshalAs(UnmanagedType.LPUTF8Str)] string line);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_IntPtr_IntPtr(global::System.IntPtr ctx, global::System.IntPtr handler, global::System.IntPtr out_buf);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_IntPtr(global::System.IntPtr user_data);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_string(global::System.IntPtr user_data, [MarshalAs(UnmanagedType.LPUTF8Str)] string text);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_int_int(int x, int y);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        [return: MarshalAs(UnmanagedType.I1)]
        public unsafe delegate bool Func_bool_IntPtr_int_sbytePtrPtr(global::System.IntPtr data, int idx, sbyte** out_text);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate float Func_float_IntPtr_int(global::System.IntPtr data, int idx);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate global::System.IntPtr Func_IntPtr_ulong_IntPtr(ulong sz, global::System.IntPtr user_data);

        [SuppressUnmanagedCodeSecurity, UnmanagedFunctionPointer(global::System.Runtime.InteropServices.CallingConvention.Cdecl)]
        public unsafe delegate void Action_IntPtr_IntPtr(global::System.IntPtr ptr, global::System.IntPtr user_data);
    }
}
